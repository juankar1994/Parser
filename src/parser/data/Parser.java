
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 22 19:34:10 CST 2015
//----------------------------------------------------

package parser.data;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.FileReader;
import java.io.*;
import parser.controller.DatosArchivoController;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 22 19:34:10 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\056\002\000\002\003\007\000\002\057\002" +
    "\000\002\003\007\000\002\003\002\000\002\052\006\000" +
    "\002\042\003\000\002\043\003\000\002\044\003\000\002" +
    "\055\003\000\002\045\003\000\002\031\003\000\002\031" +
    "\003\000\002\004\005\000\002\005\005\000\002\060\002" +
    "\000\002\005\007\000\002\011\005\000\002\011\004\000" +
    "\002\011\003\000\002\012\005\000\002\012\004\000\002" +
    "\061\002\000\002\012\005\000\002\013\004\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\004\000\002\014\004\000\002\014\003\000" +
    "\002\015\003\000\002\015\004\000\002\015\003\000\002" +
    "\016\005\000\002\020\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\004\000\002\017\003" +
    "\000\002\021\005\000\002\021\003\000\002\021\003\000" +
    "\002\026\005\000\002\026\005\000\002\026\003\000\002" +
    "\037\003\000\002\006\006\000\002\006\005\000\002\062" +
    "\002\000\002\006\007\000\002\007\006\000\002\063\002" +
    "\000\002\007\007\000\002\010\005\000\002\010\003\000" +
    "\002\022\010\000\002\064\002\000\002\022\011\000\002" +
    "\065\002\000\002\022\007\000\002\066\002\000\002\022" +
    "\010\000\002\050\003\000\002\046\003\000\002\047\003" +
    "\000\002\024\004\000\002\024\002\000\002\051\003\000" +
    "\002\023\007\000\002\067\002\000\002\023\010\000\002" +
    "\070\002\000\002\023\007\000\002\071\002\000\002\023" +
    "\007\000\002\053\003\000\002\054\003\000\002\025\005" +
    "\000\002\032\004\000\002\032\004\000\002\032\002\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\035" +
    "\003\000\002\035\003\000\002\034\003\000\002\034\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\010\002\ufffa\045\007\050\011\001\002\000" +
    "\004\053\244\001\002\000\010\002\ufffa\045\007\050\011" +
    "\001\002\000\004\053\016\001\002\000\004\053\ufff7\001" +
    "\002\000\004\002\013\001\002\000\004\053\ufff8\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002\000" +
    "\004\021\111\001\002\000\006\013\021\025\uffab\001\002" +
    "\000\010\013\ufff6\021\ufff5\025\ufff6\001\002\000\004\025" +
    "\106\001\002\000\004\025\ufff4\001\002\000\022\003\035" +
    "\005\027\021\036\040\024\046\022\047\034\051\033\053" +
    "\037\001\002\000\004\021\077\001\002\000\014\022\uffd3" +
    "\025\uffd3\027\uffd3\042\uffd3\043\uffd3\001\002\000\012\005" +
    "\027\021\036\051\033\053\075\001\002\000\014\022\uffdc" +
    "\025\uffdc\027\uffdc\042\uffdc\043\uffdc\001\002\000\014\022" +
    "\uffde\025\uffde\027\uffde\042\uffde\043\uffde\001\002\000\004" +
    "\051\074\001\002\000\040\004\064\005\057\011\055\012" +
    "\071\022\uffd5\025\uffd5\027\uffd5\033\062\034\061\035\070" +
    "\036\063\037\066\041\060\042\uffd5\043\uffd5\001\002\000" +
    "\014\022\uffd2\025\uffd2\027\uffd2\042\uffd2\043\uffd2\001\002" +
    "\000\004\025\uffad\001\002\000\040\004\uff9f\005\uff9f\011" +
    "\uff9f\012\uff9f\022\uff9f\025\uff9f\027\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\041\uff9f\042\uff9f\043\uff9f\001" +
    "\002\000\004\021\044\001\002\000\004\025\uffac\001\002" +
    "\000\020\005\027\021\036\040\024\046\022\047\034\051" +
    "\033\053\037\001\002\000\042\004\uffa0\005\uffa0\011\uffa0" +
    "\012\uffa0\021\040\022\uffa0\025\uffa0\027\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\001\002\000\004\022\041\001\002\000\014\022\uffd4\025" +
    "\uffd4\027\uffd4\042\uffd4\043\uffd4\001\002\000\004\022\043" +
    "\001\002\000\014\022\uffd7\025\uffd7\027\uffd7\042\uffd7\043" +
    "\uffd7\001\002\000\022\003\047\005\027\021\036\040\024" +
    "\046\022\047\034\051\033\053\037\001\002\000\006\022" +
    "\uffc5\027\uffc5\001\002\000\006\022\053\027\052\001\002" +
    "\000\004\022\uffc8\001\002\000\004\022\051\001\002\000" +
    "\014\022\uffc7\025\uffc7\027\uffc7\042\uffc7\043\uffc7\001\002" +
    "\000\020\005\027\021\036\040\024\046\022\047\034\051" +
    "\033\053\037\001\002\000\014\022\uffc9\025\uffc9\027\uffc9" +
    "\042\uffc9\043\uffc9\001\002\000\006\022\uffc6\027\uffc6\001" +
    "\002\000\014\022\uffa2\025\uffa2\027\uffa2\042\uffa2\043\uffa2" +
    "\001\002\000\014\022\uffd6\025\uffd6\027\uffd6\042\uffd6\043" +
    "\uffd6\001\002\000\020\005\uffa3\021\uffa3\040\uffa3\046\uffa3" +
    "\047\uffa3\051\uffa3\053\uffa3\001\002\000\020\005\uffa9\021" +
    "\uffa9\040\uffa9\046\uffa9\047\uffa9\051\uffa9\053\uffa9\001\002" +
    "\000\020\005\uffa6\021\uffa6\040\uffa6\046\uffa6\047\uffa6\051" +
    "\uffa6\053\uffa6\001\002\000\020\005\uffaa\021\uffaa\040\uffaa" +
    "\046\uffaa\047\uffaa\051\uffaa\053\uffaa\001\002\000\020\005" +
    "\uffa5\021\uffa5\040\uffa5\046\uffa5\047\uffa5\051\uffa5\053\uffa5" +
    "\001\002\000\020\005\uffa4\021\uffa4\040\uffa4\046\uffa4\047" +
    "\uffa4\051\uffa4\053\uffa4\001\002\000\020\005\027\021\036" +
    "\040\024\046\022\047\034\051\033\053\037\001\002\000" +
    "\020\005\uffa7\021\uffa7\040\uffa7\046\uffa7\047\uffa7\051\uffa7" +
    "\053\uffa7\001\002\000\020\005\027\021\036\040\024\046" +
    "\022\047\034\051\033\053\037\001\002\000\020\005\uffa8" +
    "\021\uffa8\040\uffa8\046\uffa8\047\uffa8\051\uffa8\053\uffa8\001" +
    "\002\000\014\022\uffa1\025\uffa1\027\uffa1\042\uffa1\043\uffa1" +
    "\001\002\000\014\022\uffd9\025\uffd9\027\uffd9\042\uffd9\043" +
    "\uffd9\001\002\000\014\022\uffd8\025\uffd8\027\uffd8\042\uffd8" +
    "\043\uffd8\001\002\000\040\004\uff9e\005\uff9e\011\uff9e\012" +
    "\uff9e\022\uff9e\025\uff9e\027\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\037\uff9e\041\uff9e\042\uff9e\043\uff9e\001\002\000" +
    "\040\004\uffa0\005\uffa0\011\uffa0\012\uffa0\022\uffa0\025\uffa0" +
    "\027\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\001\002\000\014\022\uffdd\025\uffdd" +
    "\027\uffdd\042\uffdd\043\uffdd\001\002\000\010\003\101\022" +
    "\100\053\102\001\002\000\014\022\uffcc\025\uffcc\027\uffcc" +
    "\042\uffcc\043\uffcc\001\002\000\004\022\uffcb\001\002\000" +
    "\004\022\103\001\002\000\014\022\uffcd\025\uffcd\027\uffcd" +
    "\042\uffcd\043\uffcd\001\002\000\004\022\105\001\002\000" +
    "\014\022\uffca\025\uffca\027\uffca\042\uffca\043\uffca\001\002" +
    "\000\036\002\ufff9\005\ufff9\021\ufff9\024\ufff9\030\ufff9\032" +
    "\ufff9\040\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\053\ufff9\001\002\000\010\002\ufffc\045\ufffc\050" +
    "\ufffc\001\002\000\010\002\ufff2\045\ufff2\050\ufff2\001\002" +
    "\000\006\003\114\022\113\001\002\000\010\002\ufff3\045" +
    "\ufff3\050\ufff3\001\002\000\010\003\120\023\117\025\236" +
    "\001\002\000\004\022\uffef\001\002\000\004\022\116\001" +
    "\002\000\006\003\120\023\117\001\002\000\032\005\027" +
    "\021\036\024\122\030\131\032\124\040\024\044\130\046" +
    "\022\047\034\050\011\051\033\053\140\001\002\000\010" +
    "\002\uffeb\045\uffeb\050\uffeb\001\002\000\010\002\uffee\045" +
    "\uffee\050\uffee\001\002\000\010\002\uffec\045\uffec\050\uffec" +
    "\001\002\000\032\005\uffe4\021\uffe4\024\uffe4\030\uffe4\032" +
    "\uffe4\040\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4" +
    "\053\uffe4\001\002\000\006\003\uffb0\021\uffb0\001\002\000" +
    "\032\005\027\021\036\024\235\030\131\032\124\040\024" +
    "\044\130\046\022\047\034\050\011\051\033\053\140\001" +
    "\002\000\004\025\234\001\002\000\032\005\uffe2\021\uffe2" +
    "\024\uffe2\030\uffe2\032\uffe2\040\uffe2\044\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\053\uffe2\001\002\000\020\005\027" +
    "\021\036\040\024\046\022\047\034\051\033\053\037\001" +
    "\002\000\006\003\uffbd\021\uffbd\001\002\000\004\053\231" +
    "\001\002\000\004\025\230\001\002\000\006\003\203\021" +
    "\204\001\002\000\032\005\uffe5\021\uffe5\024\uffe5\030\uffe5" +
    "\032\uffe5\040\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5\051" +
    "\uffe5\053\uffe5\001\002\000\032\005\uffdf\021\uffdf\024\uffdf" +
    "\030\uffdf\032\uffdf\040\uffdf\044\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\053\uffdf\001\002\000\032\005\uffe3\021\uffe3" +
    "\024\uffe3\030\uffe3\032\uffe3\040\uffe3\044\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\053\uffe3\001\002\000\034\004\uffa0" +
    "\005\uffa0\011\uffa0\012\uffa0\013\201\021\040\025\uffa0\033" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\041\uffa0\001\002" +
    "\000\006\003\142\021\143\001\002\000\004\022\uffb2\001" +
    "\002\000\022\003\147\005\027\021\036\040\024\046\022" +
    "\047\034\051\033\053\037\001\002\000\010\022\uffcf\042" +
    "\172\043\171\001\002\000\010\022\uffce\042\uffce\043\uffce" +
    "\001\002\000\004\022\uffbc\001\002\000\010\003\uffb4\022" +
    "\uffb6\023\uffb4\001\002\000\004\022\151\001\002\000\006" +
    "\003\uffaf\023\uffaf\001\002\000\006\003\154\023\153\001" +
    "\002\000\032\005\027\021\036\024\160\030\131\032\124" +
    "\040\024\044\130\046\022\047\034\050\011\051\033\053" +
    "\140\001\002\000\002\001\002\000\032\005\uffb7\021\uffb7" +
    "\024\uffb7\030\uffb7\032\uffb7\040\uffb7\044\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\053\uffb7\001\002\000\002\001\002" +
    "\000\034\005\uffe7\021\uffe7\024\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\040\uffe7\044\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\053\uffe7\001\002\000\034\005\uffe9\021\uffe9\024\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\040\uffe9\044\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\053\uffe9\001\002\000\032\005\027\021" +
    "\036\024\162\030\131\032\124\040\024\044\130\046\022" +
    "\047\034\050\011\051\033\053\140\001\002\000\034\005" +
    "\uffea\021\uffea\024\uffea\030\uffea\031\uffea\032\uffea\040\uffea" +
    "\044\uffea\046\uffea\047\uffea\050\uffea\051\uffea\053\uffea\001" +
    "\002\000\032\005\uffe6\021\uffe6\024\uffe6\030\uffe6\032\uffe6" +
    "\040\uffe6\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\053" +
    "\uffe6\001\002\000\006\003\154\023\153\001\002\000\004" +
    "\022\166\001\002\000\006\003\154\023\153\001\002\000" +
    "\032\005\uffb5\021\uffb5\024\uffb5\030\uffb5\032\uffb5\040\uffb5" +
    "\044\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\053\uffb5\001" +
    "\002\000\032\005\uffb3\021\uffb3\024\uffb3\030\uffb3\032\uffb3" +
    "\040\uffb3\044\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\053" +
    "\uffb3\001\002\000\020\005\027\021\036\040\024\046\022" +
    "\047\034\051\033\053\037\001\002\000\020\005\027\021" +
    "\036\040\024\046\022\047\034\051\033\053\037\001\002" +
    "\000\004\022\uffd0\001\002\000\004\022\uffd1\001\002\000" +
    "\004\022\176\001\002\000\006\003\154\023\153\001\002" +
    "\000\032\005\uffb1\021\uffb1\024\uffb1\030\uffb1\032\uffb1\040" +
    "\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1" +
    "\001\002\000\020\005\027\021\036\040\024\046\022\047" +
    "\034\051\033\053\037\001\002\000\020\005\uffda\021\uffda" +
    "\040\uffda\046\uffda\047\uffda\051\uffda\053\uffda\001\002\000" +
    "\004\025\uffdb\001\002\000\004\022\uffbf\001\002\000\022" +
    "\003\205\005\027\021\036\040\024\046\022\047\034\051" +
    "\033\053\037\001\002\000\010\003\uffc1\022\uffc3\023\uffc1" +
    "\001\002\000\004\022\210\001\002\000\006\003\154\023" +
    "\153\001\002\000\006\003\uffbb\023\uffbb\001\002\000\034" +
    "\005\uffb9\021\uffb9\024\uffb9\030\uffb9\031\213\032\uffb9\040" +
    "\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9" +
    "\001\002\000\006\003\154\023\153\001\002\000\006\003" +
    "\uffb8\023\uffb8\001\002\000\032\005\uffc4\021\uffc4\024\uffc4" +
    "\030\uffc4\032\uffc4\040\uffc4\044\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\053\uffc4\001\002\000\032\005\uffba\021\uffba" +
    "\024\uffba\030\uffba\032\uffba\040\uffba\044\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\053\uffba\001\002\000\006\003\154" +
    "\023\153\001\002\000\004\022\220\001\002\000\006\003" +
    "\154\023\153\001\002\000\034\005\uffb9\021\uffb9\024\uffb9" +
    "\030\uffb9\031\213\032\uffb9\040\uffb9\044\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\053\uffb9\001\002\000\032\005\uffc2" +
    "\021\uffc2\024\uffc2\030\uffc2\032\uffc2\040\uffc2\044\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\053\uffc2\001\002\000\032" +
    "\005\uffc0\021\uffc0\024\uffc0\030\uffc0\032\uffc0\040\uffc0\044" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\053\uffc0\001\002" +
    "\000\004\022\225\001\002\000\006\003\154\023\153\001" +
    "\002\000\034\005\uffb9\021\uffb9\024\uffb9\030\uffb9\031\213" +
    "\032\uffb9\040\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\053\uffb9\001\002\000\032\005\uffbe\021\uffbe\024\uffbe" +
    "\030\uffbe\032\uffbe\040\uffbe\044\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\053\uffbe\001\002\000\032\005\uffe0\021\uffe0" +
    "\024\uffe0\030\uffe0\032\uffe0\040\uffe0\044\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\053\uffe0\001\002\000\006\013\ufff6" +
    "\025\ufff6\001\002\000\004\025\233\001\002\000\032\005" +
    "\uffae\021\uffae\024\uffae\030\uffae\032\uffae\040\uffae\044\uffae" +
    "\046\uffae\047\uffae\050\uffae\051\uffae\053\uffae\001\002\000" +
    "\032\005\uffe1\021\uffe1\024\uffe1\030\uffe1\032\uffe1\040\uffe1" +
    "\044\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\053\uffe1\001" +
    "\002\000\010\002\uffed\045\uffed\050\uffed\001\002\000\010" +
    "\002\ufff1\045\ufff1\050\ufff1\001\002\000\010\002\ufff0\045" +
    "\ufff0\050\ufff0\001\002\000\010\002\ufffa\045\007\050\011" +
    "\001\002\000\004\002\ufffb\001\002\000\004\002\uffff\001" +
    "\002\000\004\021\111\001\002\000\004\021\ufff5\001\002" +
    "\000\010\002\ufffe\045\ufffe\050\ufffe\001\002\000\010\002" +
    "\ufffa\045\007\050\011\001\002\000\004\002\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\014\002\007\003\011\042\005\043\003\052" +
    "\004\001\001\000\004\055\242\001\001\000\012\003\241" +
    "\042\005\043\003\052\004\001\001\000\006\044\014\055" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\111\005\107\031\106\001\001\000\006\032\017\045\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\022\007\030\015\031\017\025\021\024" +
    "\027\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\075\027\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\055\035\066\036" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\022\007\030\015\041\017\025\021\024\027\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\022\007\030" +
    "\010\045\015\044\017\025\021\024\027\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\022\007" +
    "\030\015\053\017\025\021\024\027\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\022\007\030\015\072\017\025\021\024\027\027" +
    "\001\001\000\002\001\001\000\016\006\022\007\030\015" +
    "\071\017\025\021\024\027\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\236\001\001\000\004\060\114\001\001\000\002\001" +
    "\001\000\004\011\120\001\001\000\042\006\022\007\030" +
    "\013\124\014\134\015\125\016\132\017\025\021\024\022" +
    "\122\023\126\025\135\027\027\042\131\050\133\052\136" +
    "\053\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\006\022\007\030\014\162\015\125\016\132\017\025\021" +
    "\024\022\122\023\126\025\135\027\027\042\131\050\133" +
    "\052\136\053\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\022\007\030\015\231\017\025\021\024" +
    "\027\027\001\001\000\002\001\001\000\004\044\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\177\001" +
    "\001\000\002\001\001\000\004\071\174\001\001\000\024" +
    "\006\022\007\030\015\144\017\025\021\024\026\145\027" +
    "\027\037\143\046\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\067\164\070\163\001" +
    "\001\000\004\054\151\001\001\000\002\001\001\000\004" +
    "\012\154\001\001\000\042\006\022\007\030\013\160\014" +
    "\134\015\125\016\132\017\025\021\024\022\122\023\126" +
    "\025\135\027\027\042\131\050\133\052\136\053\140\001" +
    "\001\000\004\061\155\001\001\000\002\001\001\000\004" +
    "\030\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\006\022\007\030\014\162\015\125\016\132\017\025" +
    "\021\024\022\122\023\126\025\135\027\027\042\131\050" +
    "\133\052\136\053\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\167\001\001\000\002\001\001\000" +
    "\004\012\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\022\007\030\015\144\017\025\021\024\026" +
    "\173\027\027\037\143\001\001\000\022\006\022\007\030" +
    "\015\144\017\025\021\024\026\172\027\027\037\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\176\001\001\000\002\001\001\000\016\006" +
    "\022\007\030\015\201\017\025\021\024\027\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\223\001" +
    "\001\000\024\006\022\007\030\015\144\017\025\021\024" +
    "\026\145\027\027\037\143\046\205\001\001\000\006\064" +
    "\216\065\215\001\001\000\004\047\206\001\001\000\004" +
    "\012\210\001\001\000\002\001\001\000\006\024\213\051" +
    "\211\001\001\000\004\012\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\222\001" +
    "\001\000\002\001\001\000\004\012\220\001\001\000\006" +
    "\024\221\051\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\225\001\001\000\006" +
    "\024\226\051\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\240\042\005\043\003\052\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\111\005\107\031\244\001\001\000\002\001\001\000\004" +
    "\056\245\001\001\000\012\003\246\042\005\043\003\052" +
    "\004\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static Lexer s;
    public static int errors = 0;
    public static ErrorData errorData = ErrorData.getInstance();
    public DatosArchivoController archivoController = DatosArchivoController.getInstance();
    ErrorData detectedError;
    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public PilaSemantica pilaSemantica = new PilaSemantica();
    String assemblyFile = "";
    
    /* Reporte de error encontrado. */

    public void report_error(String message,int line, int column) {
        StringBuilder m = new StringBuilder("Error");
        m.append(" en la línea "+(line+1));
        m.append(", columna "+(column+1));
        m.append(" : " + message);
        archivoController.mostrarErroresSemanticos(m.toString());
    }
    public void report_error(String message, Object info) {
        if (info instanceof String){
            errors++;
            String mensaje = ", se esperaba: " + message;
            try{
                detectedError.setId(errors);
            }catch(Exception e){
                detectedError = new ErrorData(errors, info.toString(), mensaje);
            }
            detectedError.setMessage(detectedError.getMessage() + mensaje);
            errorData.insertarError(detectedError);
        }
        else {
            StringBuilder m = new StringBuilder("Error");
            if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                if (s.left >= 0) {                
                    m.append(" en la línea "+(s.left+1));
                    if (s.right >= 0)
                        m.append(", columna "+(s.right+1));
                }
            }
            m.append(" : " + message);
            detectedError = new ErrorData(errors, info.toString(), m.toString());
        }
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        System.out.println("----------FUI YO------------");
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            s = new Lexer(new FileReader(args[0]));
            Parser p = new Parser(s);
            p.parse();
            System.out.println("\n*** Fin del parseo ***");
            System.out.println(p.assemblyFile);
            PrintWriter writer = new PrintWriter("archivoEnsamblador.asm", "UTF-8");
            writer.println("section .text\n\tglobal _start\n_start:  ");
            writer.println(p.assemblyFile);

            //Section .data
            writer.println("\tmov eax, 1");
            writer.println("\tmov ebx, 0");
            writer.println("\tint 80h");

            writer.println("section     .data\n");
            ArrayList<String> TS = p.tablaSimbolos.getTempVars();
            for(int i = 0; i < TS.size(); i++){
                writer.println("\t" + TS.get(i) + ":    resb 1");
            }

            
            writer.close();

            System.out.println("Total de errores = " + errors + ".");
            errors = 0;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor ::= SUBSTRACT LITERAL_ENTERO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer lit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor ::= LITERAL_ENTERO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer lit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  System.out.println("---------------CREADO-LIT---------------");
                                RegistroSemanticoVar RS_DO = new RegistroSemanticoVar("RS_DO_C",lit.toString());
                                parser.pilaSemantica.push(RS_DO);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RegistroSemanticoVar RS_DO = new RegistroSemanticoVar("RS_DO_D",i.toString());
                                System.out.println("---------------CREADO-"+i.toString()+"---------------");
                                if( parser.tablaSimbolos.get(RS_DO.getToken()) ==null){
                                    parser.report_error(" Variable '" + RS_DO.getToken() + "' no ha sido declarado.", ileft,iright); 
                                }
                                RS_DO.setValor(parser.tablaSimbolos.get(RS_DO.getToken()).getDireccion());
                                RS_DO.setDireccion(parser.tablaSimbolos.get(RS_DO.getToken()).getDireccion());
                                parser.pilaSemantica.push(RS_DO);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operacion_bin_1 ::= MINUSMINUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(p.toString(),"MenosMenos");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operacion_bin_1 ::= PLUSPLUS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"MasMas");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operador ::= SUBSTRACT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(s.toString(),"Resta");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operador ::= ADD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(a.toString(),"Suma");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"Mayor");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comparador ::= MENORQUE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"Menor");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comparador ::= MAYOREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"MayorIgual");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // comparador ::= MENOREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"MenorIgual");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // comparador ::= NOTEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"NoIgual");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comparador ::= EQUAL 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"Igual");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // validar_expr ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // validar_expr ::= ASSIGN error 
            {
              Object RESULT =null;
		 parser.report_error(" una expresión o falta ; al final.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // validar_expr ::= ASSIGN expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;
		
                                RegistroSemanticoVar RS_DO = (RegistroSemanticoVar) parser.pilaSemantica.pop();
                                parser.assemblyFile += "\tmov ax, " + RS_DO.getDireccion() + "\n";
                                parser.assemblyFile += "\tret\n"; 
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // test_while ::= RPAREN 
            {
              Object RESULT =null;
		
                                RegistroSemanticoVar RS_DO = (RegistroSemanticoVar)parser.pilaSemantica.pop();
                                parser.assemblyFile+= "\tmov eax,"+RS_DO.getDireccion()+" \n"; 
                                parser.assemblyFile+= "\tcmp eax, 0 \n"; 
                                parser.assemblyFile+= "\tJNZ "+ ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_WHILE")).getExit_label() +  "\n" ;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_while",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // start_while ::= WHILE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RegistroSemanticoSTMT RS_WHILE = new RegistroSemanticoSTMT(w.toString(), "RS_WHILE");//Crear RS_WHILE
                                RS_WHILE.setStmt_label(parser.tablaSimbolos.getLabelName());
                                RS_WHILE.setExit_label(parser.tablaSimbolos.getLabelName());
                                parser.pilaSemantica.push(RS_WHILE);    
                                parser.assemblyFile += ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_WHILE")).getStmt_label()+": \n";
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("start_while",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // while_statement ::= start_while error NT$11 RPAREN bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$11 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un LPAREN al final de la condición del WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // while_statement ::= start_while LPAREN error NT$10 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$10 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un RPAREN al final de la condición del WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // while_statement ::= start_while LPAREN error NT$9 RPAREN bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$9 ::= 
            {
              Object RESULT =null;
 parser.report_error("una condición valida para el WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // while_statement ::= start_while LPAREN condicion_stmt test_while bloque 
            {
              Object RESULT =null;
		
                                parser.assemblyFile += "\tJMP "+((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_WHILE")).getStmt_label()+" \n";
                                parser.assemblyFile += ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_WHILE")).getExit_label()+": \n";
                                parser.pilaSemantica.pop();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // else_stmt ::= ELSE 
            {
              Object RESULT =null;
		
                                     parser.assemblyFile += "\tJMP "+((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_IF")).getExit_label()+" \n";
                                     parser.assemblyFile += ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_IF")).getStmt_label()+": \n";
                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // else_statement ::= else_stmt bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // test_if ::= RPAREN 
            {
              Object RESULT =null;
		
                                    RegistroSemanticoVar RS_DO = (RegistroSemanticoVar)parser.pilaSemantica.pop();
                                    parser.assemblyFile+= "\tmov eax,"+RS_DO.getDireccion()+" \n"; 
                                    parser.assemblyFile+= "\tcmp eax, 0 \n"; 
                                    parser.assemblyFile+= "\tJNZ "+ ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_IF")).getStmt_label() +  "\n" ;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_if",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicion_stmt ::= condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // start_if ::= IF 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RegistroSemanticoSTMT RS_IF = new RegistroSemanticoSTMT(tipo.toString(), "RS_IF");//Crear RS_IF
                                    RS_IF.setStmt_label(parser.tablaSimbolos.getLabelName());
                                    RS_IF.setExit_label(parser.tablaSimbolos.getLabelName());
                                    parser.pilaSemantica.push(RS_IF);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("start_if",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if_statement ::= start_if error NT$8 RPAREN bloque else_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$8 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un LPAREN al final de la condición del IF.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_statement ::= start_if LPAREN error NT$7 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$7 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un RPAREN al final de la condición del IF.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_statement ::= start_if LPAREN error NT$6 RPAREN bloque else_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$6 ::= 
            {
              Object RESULT =null;
 parser.report_error(" una condición válida para el IF.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_statement ::= start_if LPAREN condicion_stmt test_if bloque else_statement 
            {
              Object RESULT =null;
		 
                                        parser.assemblyFile += ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_IF")).getExit_label()+": \n";
                                        RegistroSemantico a = parser.pilaSemantica.pop();
                                        System.out.println("**************" + a.getToken());
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // write_f_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // write_f_aux ::= write_f_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // write_f ::= WRITE LPAREN error NT$5 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetros incorrectos en el WRITE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // write_f ::= WRITE LPAREN write_f_aux RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // read_f ::= READ LPAREN error NT$4 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetros incorrectos en el READ.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // read_f ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // read_f ::= READ LPAREN IDENTIFICADOR RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicion_2 ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion ::= condicion_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion ::= condicion_2 OR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= condicion_2 AND condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // call_function ::= write_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // call_function ::= read_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // call_function ::= IDENTIFICADOR LPAREN RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= valor operacion_bin_1 
            {
              Object RESULT =null;
		 
                               RegistroSemantico RS_OP= parser.pilaSemantica.pop();
                               RegistroSemantico RS_DO1= parser.pilaSemantica.pop();
                               String var = parser.tablaSimbolos.getVarName();
                               IOperacion op = (IOperacion)new OperacionFactory(RS_OP.getTipo()).getOp();
                               op.setOperandor(RS_DO1);
                               op.setVarReturn(var);
                               String code = op.generarCodigo();
                               parser.assemblyFile += code;
                               RegistroSemanticoVar RS_RESULT = new RegistroSemanticoVar(RS_DO1.getTipo(),var);
                               parser.pilaSemantica.push(RS_RESULT);
                               parser.tablaSimbolos.get(RS_DO1.getToken()).setDireccion(var);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= LPAREN expresion RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= valor comparador expresion 
            {
              Object RESULT =null;
		 RegistroSemantico RS_DO1= parser.pilaSemantica.pop();
                               RegistroSemantico RS_OP= parser.pilaSemantica.pop();
                               RegistroSemantico RS_DO2= parser.pilaSemantica.pop();
                               IOperacion op = (IOperacion)new OperacionFactory(RS_OP.getTipo()).getOp();
                               op.setOperandos(RS_DO1,RS_DO2);
                               op.generarCodigo();
                               //Se crea una variable donde guardar Resultado
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= valor operador expresion 
            {
              Object RESULT =null;
		 RegistroSemantico RS_DO1= parser.pilaSemantica.pop();
                               RegistroSemantico RS_OP= parser.pilaSemantica.pop();
                               RegistroSemantico RS_DO2= parser.pilaSemantica.pop();
                               System.out.println(RS_DO1.getValor());
                               String var = parser.tablaSimbolos.getVarName();
                               IOperacion op = (IOperacion)new OperacionFactory(RS_OP.getTipo()).getOp();
                               op.setOperandos(RS_DO1,RS_DO2);
                               op.setVarReturn(var);
                               String code = op.generarCodigo();
                               parser.assemblyFile += code;
                               RegistroSemanticoVar RS_RESULT = new RegistroSemanticoVar(RS_DO1.getTipo(),var);
                               parser.pilaSemantica.push(RS_RESULT);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_asignaciones ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion ::= IDENTIFICADOR op_asignaciones expresion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                if( parser.tablaSimbolos.get(i.toString()) ==null){
                                    parser.report_error(" Variable '" + i.toString() + "' no ha sido declarada.", ileft,iright); 
                                }else{
                                    RegistroSemanticoVar RS_DO = (RegistroSemanticoVar) parser.pilaSemantica.pop();
                                    System.out.println("----********-----------------"+RS_DO.getDireccion()+"------------------");
                                    parser.tablaSimbolos.get(i.toString()).setDireccion(RS_DO.getDireccion());
                                }   
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= call_function 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    if( parser.tablaSimbolos.get(i.toString()) ==null){
                                        parser.report_error(" Función '" + i.toString() + "' no ha sido declarada.", ileft,iright); 
                                    }else{
                                        String tipo = parser.tablaSimbolos.get(i.toString()).getTipo();
                                        RegistroSemanticoVar RS_DO = new RegistroSemanticoVar(tipo, "ax");
                                        parser.pilaSemantica.push(RS_DO);
                                        parser.assemblyFile += "\tcall " + i.toString() + "\n";
                                    }   
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= EXCLAMACION exp 
            {
              Object RESULT =null;
		
                                RegistroSemanticoVar RS_DO = (RegistroSemanticoVar) parser.pilaSemantica.pop();
                                String var = parser.tablaSimbolos.getVarName();
                                IOperacion op = (IOperacion)new OperacionFactory("Not").getOp();
                                op.setOperandor(RS_DO);
                                op.setVarReturn(var);
                                String code = op.generarCodigo();
                                parser.assemblyFile += code;
                                RegistroSemanticoVar RS_RESULT = new RegistroSemanticoVar(RS_DO.getTipo(),var);
                                parser.pilaSemantica.push(RS_RESULT);

                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= return_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= asignacion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= expresion SEMICOLON 
            {
              Object RESULT =null;
		
                                System.out.println("===========================");
                                parser.pilaSemantica.pop(); 

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque ::= error NT$3 decision_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.report_error(" no se encuentra el LBRACE o expresión inválida.","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque ::= LBRACE lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque_global ::= error 
            {
              Object RESULT =null;
		 parser.report_error(" no se encuentra el LBRACE ACA .","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque_global ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_global ::= LBRACE lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcion ::= LPAREN error NT$2 RPAREN bloque_global 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetro incorrecto.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion ::= LPAREN RPAREN bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_funcion ::= LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_funcion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decision_operacion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decision_operacion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // verification_part ::= validar_expr 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("verification_part",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // id_fun_declaration ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        RegistroSemanticoSTMT RS_ID = new RegistroSemanticoSTMT(id.toString(), "RS_ID_F");//Crear RS_ID_F
                                        RS_ID.setStmt_label(parser.tablaSimbolos.getLabelName());
                                        parser.pilaSemantica.push(RS_ID);
                                        parser.assemblyFile += ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_ID_F")).getStmt_label()+": \n";
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_fun_declaration",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // id_declaration ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        parser.pilaSemantica.push(new RegistroSemantico(id.toString(), "RS_ID"));//Crear RS_ID
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_declaration",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_declaration_part ::= VOID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        parser.pilaSemantica.push(new RegistroSemantico(tipo.toString(), "RS_TIPO"));//Crear RS_Tipo
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_part",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration_part ::= INT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        parser.pilaSemantica.push(new RegistroSemantico(tipo.toString(), "RS_TIPO"));//Crear RS_Tipo
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable ::= declaration_part id_declaration verification_part SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                                    System.out.println("*************************************");
                                    RegistroSemantico RS_DO = parser.pilaSemantica.pop();
                                    String id,valor;
                                    if(RS_DO.getTipo()!="RS_ID"){
                                        RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                        System.out.println("::::::::::"+RS_ID.getToken());
                                        id=RS_ID.getToken();
                                        valor= RS_DO.getValor();
                                    }else{
                                        id=RS_DO.getToken();
                                        valor="0";
                                    }
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    
                                    System.out.println("*************************************");
                                    if(parser.tablaSimbolos.get(id) == null){
                                        parser.tablaSimbolos.put(id, 
                                                                 new InfoKey("Identificador", 
                                                                              RS_TIPO.getToken(), 
                                                                              valor));
                                        parser.tablaSimbolos.get(id).setDireccion(valor);
                                        System.out.println("DATOS TABLA SIMBOLOS");
                                        System.out.println(id);
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(id)).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(id)).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(id)).getCategoria());    
                                    }else{
                                        if(parser.tablaSimbolos.get(id).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(id).sumarDeclarado();
                                            parser.report_error(" identificador '" + id + "' ya ha sido declarado 1.", sleft,sright); 
                                        }
                                    }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // programa_c ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programa_c ::= declaration_part id_fun_declaration decision_operacion NT$1 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                    System.out.println("*************************************");
                                    
                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();

                                    System.out.println("DATOS DE LA FUNCIÓN-------------------");
                                    System.out.println(RS_ID.getToken());
                                    if(parser.tablaSimbolos.get(RS_ID.getToken()) == null ){                                    
                                        parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                                 new InfoKey("Función", 
                                                                              RS_TIPO.getToken(),RS_ID.getToken())); 
                                        
                                        System.out.println("DATOS TABLA SIMBOLOS FUNCION INT");
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());
                                    }else{
                                        if(parser.tablaSimbolos.get(RS_ID.getToken()).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(RS_ID.getToken()).sumarDeclarado();
                                            parser.report_error(" identificador '" + RS_ID.getToken() + "' ya ha sido declarado.", sleft,sright); 
                                        }
                                    }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa_c ::= function_declaration_part id_fun_declaration decision_operacion NT$0 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    System.out.println("DATOS DE LA FUNCIÓN-------------------");
                                    System.out.println(RS_ID.getToken());
                                    if(parser.tablaSimbolos.get(RS_ID.getToken()) == null){                                    
                                        parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                                 new InfoKey("Función", 
                                                                              RS_TIPO.getToken())); 
                                        parser.assemblyFile += "\tret\n";
                                        System.out.println("DATOS TABLA SIMBOLOS FUNCION");
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());
                                    }else{
                                        if(parser.tablaSimbolos.get(RS_ID.getToken()).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(RS_ID.getToken()).sumarDeclarado();
                                            parser.report_error(" identificador '" + RS_ID.getToken() + "' ya ha sido declarado.", sleft,sright); 
                                        }
                                    }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa_c ::= variable programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

