
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 22 15:35:41 CST 2015
//----------------------------------------------------

package parser.data;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 22 15:35:41 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\003\007\000\002\003\002\000\002\052\003" +
    "\000\002\052\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\004\006\000\002\005\006\000\002" +
    "\006\005\000\002\006\003\000\002\006\002\000\002\007" +
    "\004\000\002\013\003\000\002\014\005\000\002\014\004" +
    "\000\002\015\004\000\002\015\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\006\000\002\016\004\000\002\016" +
    "\004\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\003\000\002\017\004\000\002\017\003\000" +
    "\002\020\005\000\002\022\003\000\002\022\003\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\003\000\002\023\006\000\002\023\005\000\002\023\003" +
    "\000\002\023\003\000\002\024\005\000\002\024\003\000" +
    "\002\067\003\000\002\067\002\000\002\035\005\000\002" +
    "\035\005\000\002\035\003\000\002\035\003\000\002\066" +
    "\003\000\002\010\007\000\002\010\006\000\002\011\007" +
    "\000\002\012\005\000\002\012\003\000\002\025\010\000" +
    "\002\025\007\000\002\031\004\000\002\026\007\000\002" +
    "\027\011\000\002\030\007\000\002\055\007\000\002\057" +
    "\003\000\002\057\002\000\002\060\005\000\002\060\002" +
    "\000\002\061\004\000\002\061\005\000\002\061\007\000" +
    "\002\061\002\000\002\037\011\000\002\040\003\000\002" +
    "\040\004\000\002\041\003\000\002\041\004\000\002\041" +
    "\004\000\002\042\006\000\002\042\010\000\002\043\005" +
    "\000\002\043\007\000\002\032\004\000\002\033\004\000" +
    "\002\034\005\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\050\004\000\002\051" +
    "\004\000\002\051\006\000\002\051\003\000\002\045\003" +
    "\000\002\045\004\000\002\046\005\000\002\046\004\000" +
    "\002\047\003\000\002\047\002\000\002\054\004\000\002" +
    "\054\002\000\002\065\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\062\003\000\002" +
    "\062\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\020\002\ufffd\054\005\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\004\001\002\000\012\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\001\002\000\004\067\333\001\002\000" +
    "\004\002\001\001\002\000\012\057\020\060\017\061\014" +
    "\062\013\001\002\000\004\002\011\001\002\000\004\002" +
    "\000\001\002\000\004\067\uffa6\001\002\000\006\057\332" +
    "\067\uffa1\001\002\000\010\057\330\061\327\067\uff9c\001" +
    "\002\000\004\067\021\001\002\000\004\067\uffa7\001\002" +
    "\000\004\067\uffa8\001\002\000\004\067\uffa9\001\002\000" +
    "\014\013\026\021\031\025\uff9a\027\uff9a\067\032\001\002" +
    "\000\020\002\ufffd\054\005\057\uffd0\060\uffd0\061\uffd0\062" +
    "\uffd0\063\004\001\002\000\006\025\uffa2\027\uffa2\001\002" +
    "\000\020\002\ufff9\054\ufff9\057\ufff9\060\ufff9\061\ufff9\062" +
    "\ufff9\063\ufff9\001\002\000\020\002\ufff8\054\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\062\ufff8\063\ufff8\001\002\000\022\005" +
    "\063\021\046\043\067\055\077\056\053\064\044\065\066" +
    "\067\117\001\002\000\006\025\321\027\320\001\002\000" +
    "\020\002\ufffa\054\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\001\002\000\016\022\ufff3\027\ufff3\057\020\060" +
    "\017\061\014\062\013\001\002\000\010\013\026\025\uff9a" +
    "\027\uff9a\001\002\000\006\025\uffa4\027\uffa4\001\002\000" +
    "\006\022\ufff4\027\ufff4\001\002\000\004\067\317\001\002" +
    "\000\006\022\040\027\037\001\002\000\012\057\020\060" +
    "\017\061\014\062\013\001\002\000\006\023\041\025\042" +
    "\001\002\000\056\005\063\021\046\024\102\030\064\032" +
    "\101\033\106\034\052\035\075\043\067\051\070\052\047" +
    "\053\073\055\077\056\053\057\uffd0\060\uffd0\061\uffd0\062" +
    "\uffd0\063\004\064\044\065\066\067\056\001\002\000\020" +
    "\002\ufff7\054\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063" +
    "\ufff7\001\002\000\020\002\ufff6\054\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\001\002\000\044\004\uff86\005" +
    "\uff86\006\uff86\007\uff86\010\uff86\022\uff86\025\uff86\026\uff86" +
    "\027\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\044" +
    "\uff86\045\uff86\046\uff86\001\002\000\064\005\uffe3\021\uffe3" +
    "\022\uffe3\024\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\043\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\064\uffe3\065\uffe3\067\uffe3\001\002\000\022\005\063" +
    "\021\046\043\067\055\077\056\053\064\044\065\066\067" +
    "\117\001\002\000\004\025\314\001\002\000\064\005\uffea" +
    "\021\uffea\022\uffea\024\uffea\030\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\043\uffea\047\uffea\050\uffea\051\uffea\052\uffea" +
    "\053\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062" +
    "\uffea\063\uffea\064\uffea\065\uffea\067\uffea\001\002\000\014" +
    "\022\uffd4\025\uffd4\027\uffd4\045\uffd4\046\uffd4\001\002\000" +
    "\004\021\264\001\002\000\004\021\255\001\002\000\064" +
    "\005\uffe4\021\uffe4\022\uffe4\024\uffe4\030\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\043\uffe4\047\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\067\uffe4\001\002" +
    "\000\064\005\uffe8\021\uffe8\022\uffe8\024\uffe8\030\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\043\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\055\uffe8\056\uffe8\057\uffe8\060" +
    "\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\067\uffe8" +
    "\001\002\000\052\004\uff87\005\uff87\006\uff87\007\uff87\010" +
    "\uff87\013\251\014\246\015\247\016\250\017\244\020\253" +
    "\021\120\022\uff87\025\uff87\036\uff87\037\uff87\040\uff87\041" +
    "\uff87\042\uff87\044\uff87\001\002\000\064\005\uffec\021\uffec" +
    "\022\uffec\024\uffec\030\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\043\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063" +
    "\uffec\064\uffec\065\uffec\067\uffec\001\002\000\014\022\uffd5" +
    "\025\uffd5\027\uffd5\045\uffd5\046\uffd5\001\002\000\064\005" +
    "\uffe2\021\uffe2\022\uffe2\024\uffe2\030\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\043\uffe2\047\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2" +
    "\062\uffe2\063\uffe2\064\uffe2\065\uffe2\067\uffe2\001\002\000" +
    "\056\005\063\021\046\024\243\030\064\032\101\033\106" +
    "\034\052\035\075\043\067\051\070\052\047\053\073\055" +
    "\077\056\053\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\004" +
    "\064\044\065\066\067\056\001\002\000\004\064\242\001" +
    "\002\000\004\021\233\001\002\000\012\057\020\060\017" +
    "\061\014\062\013\001\002\000\044\004\uff85\005\uff85\006" +
    "\uff85\007\uff85\010\uff85\022\uff85\025\uff85\026\uff85\027\uff85" +
    "\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\044\uff85\045" +
    "\uff85\046\uff85\001\002\000\014\005\063\021\046\064\044" +
    "\065\066\067\151\001\002\000\022\005\063\021\046\043" +
    "\067\055\077\056\053\064\044\065\066\067\117\001\002" +
    "\000\004\025\175\001\002\000\042\004\214\005\207\006" +
    "\222\007\220\010\206\022\uffd8\025\uffd8\027\uffd8\036\212" +
    "\037\211\040\221\041\213\042\215\044\210\045\uffd8\046" +
    "\uffd8\001\002\000\004\025\205\001\002\000\064\005\uffe9" +
    "\021\uffe9\022\uffe9\024\uffe9\030\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\043\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\053\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\065\uffe9\067\uffe9\001\002\000\004" +
    "\021\150\001\002\000\014\022\uffdf\025\uffdf\027\uffdf\045" +
    "\uffdf\046\uffdf\001\002\000\004\021\142\001\002\000\064" +
    "\005\uffeb\021\uffeb\022\uffeb\024\uffeb\030\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\043\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\067\uffeb\001\002" +
    "\000\004\021\136\001\002\000\072\002\uffef\005\uffef\021" +
    "\uffef\022\uffef\024\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\043\uffef\047\uffef\050\uffef\051\uffef\052" +
    "\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef" +
    "\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\067\uffef\001" +
    "\002\000\060\005\uffed\021\uffed\022\uffed\024\uffed\030\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\043\uffed\051\uffed\052" +
    "\uffed\053\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\063\uffed\064\uffed\065\uffed\067\uffed\001\002\000" +
    "\004\025\135\001\002\000\014\022\uffe1\025\uffe1\027\uffe1" +
    "\045\uffe1\046\uffe1\001\002\000\004\023\041\001\002\000" +
    "\004\032\111\001\002\000\066\005\ufff1\021\ufff1\022\ufff1" +
    "\024\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\043\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063" +
    "\ufff1\064\ufff1\065\ufff1\067\ufff1\001\002\000\004\021\112" +
    "\001\002\000\024\003\116\005\063\021\046\043\067\055" +
    "\077\056\053\064\044\065\066\067\117\001\002\000\010" +
    "\022\uffcd\045\132\046\131\001\002\000\010\022\uffcb\045" +
    "\uffcb\046\uffcb\001\002\000\004\022\127\001\002\000\004" +
    "\022\uffcc\001\002\000\044\004\uff87\005\uff87\006\uff87\007" +
    "\uff87\010\uff87\021\120\022\uff87\025\uff87\027\uff87\036\uff87" +
    "\037\uff87\040\uff87\041\uff87\042\uff87\044\uff87\045\uff87\046" +
    "\uff87\001\002\000\024\005\063\021\046\022\122\043\067" +
    "\055\077\056\053\064\044\065\066\067\117\001\002\000" +
    "\006\022\uffd2\027\uffd2\001\002\000\014\022\uffd6\025\uffd6" +
    "\027\uffd6\045\uffd6\046\uffd6\001\002\000\006\022\125\027" +
    "\124\001\002\000\022\005\063\021\046\043\067\055\077" +
    "\056\053\064\044\065\066\067\117\001\002\000\014\022" +
    "\uffd7\025\uffd7\027\uffd7\045\uffd7\046\uffd7\001\002\000\006" +
    "\022\uffd3\027\uffd3\001\002\000\004\025\130\001\002\000" +
    "\064\005\uffc1\021\uffc1\022\uffc1\024\uffc1\030\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\043\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\067\uffc1\001" +
    "\002\000\024\003\116\005\063\021\046\043\067\055\077" +
    "\056\053\064\044\065\066\067\117\001\002\000\024\003" +
    "\116\005\063\021\046\043\067\055\077\056\053\064\044" +
    "\065\066\067\117\001\002\000\004\022\uffce\001\002\000" +
    "\004\022\uffcf\001\002\000\064\005\uffe5\021\uffe5\022\uffe5" +
    "\024\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\043" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\067\uffe5\001\002\000\024\003\116\005\063" +
    "\021\046\043\067\055\077\056\053\064\044\065\066\067" +
    "\117\001\002\000\004\022\140\001\002\000\004\023\041" +
    "\001\002\000\064\005\uffc2\021\uffc2\022\uffc2\024\uffc2\030" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\043\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2" +
    "\067\uffc2\001\002\000\006\022\143\067\144\001\002\000" +
    "\004\025\147\001\002\000\004\022\145\001\002\000\004" +
    "\025\146\001\002\000\014\022\uffca\025\uffca\027\uffca\045" +
    "\uffca\046\uffca\001\002\000\014\022\uffc9\025\uffc9\027\uffc9" +
    "\045\uffc9\046\uffc9\001\002\000\012\005\063\064\044\065" +
    "\066\067\151\001\002\000\044\004\uff87\005\uff87\006\uff87" +
    "\007\uff87\010\uff87\022\uff87\025\uff87\026\uff87\027\uff87\036" +
    "\uff87\037\uff87\040\uff87\041\uff87\042\uff87\044\uff87\045\uff87" +
    "\046\uff87\001\002\000\004\022\153\001\002\000\004\023" +
    "\154\001\002\000\004\047\156\001\002\000\012\024\uffb3" +
    "\047\uffb3\050\uffb3\053\073\001\002\000\012\005\063\064" +
    "\044\065\066\067\151\001\002\000\010\024\uffb5\047\156" +
    "\050\162\001\002\000\004\024\161\001\002\000\064\005" +
    "\uffb6\021\uffb6\022\uffb6\024\uffb6\030\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\043\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\064\uffb6\065\uffb6\067\uffb6\001\002\000" +
    "\004\026\165\001\002\000\004\024\uffb4\001\002\000\010" +
    "\024\uffb1\047\uffb1\050\uffb1\001\002\000\054\005\063\021" +
    "\166\030\064\032\101\033\106\034\052\035\075\043\067" +
    "\051\070\052\047\053\073\055\077\056\053\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\004\064\044\065\066\067\056" +
    "\001\002\000\054\005\063\021\046\030\064\032\101\033" +
    "\106\034\052\035\075\043\067\051\070\052\047\053\073" +
    "\055\077\056\053\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
    "\004\064\044\065\066\067\056\001\002\000\004\024\uffae" +
    "\001\002\000\006\022\174\025\175\001\002\000\056\005" +
    "\063\021\046\022\172\030\064\032\101\033\106\034\052" +
    "\035\075\043\067\051\070\052\047\053\073\055\077\056" +
    "\053\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\004\064\044" +
    "\065\066\067\056\001\002\000\004\024\uffad\001\002\000" +
    "\060\005\uffee\021\uffee\022\uffee\024\uffee\030\uffee\032\uffee" +
    "\033\uffee\034\uffee\035\uffee\043\uffee\051\uffee\052\uffee\053" +
    "\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee" +
    "\063\uffee\064\uffee\065\uffee\067\uffee\001\002\000\014\022" +
    "\uffd9\025\uffd9\027\uffd9\045\uffd9\046\uffd9\001\002\000\064" +
    "\005\uffe6\021\uffe6\022\uffe6\024\uffe6\030\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\043\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061" +
    "\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\067\uffe6\001\002" +
    "\000\004\026\177\001\002\000\054\005\063\021\200\030" +
    "\064\032\101\033\106\034\052\035\075\043\067\051\070" +
    "\052\047\053\073\055\077\056\053\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\004\064\044\065\066\067\056\001\002" +
    "\000\054\005\063\021\046\030\064\032\101\033\106\034" +
    "\052\035\075\043\067\051\070\052\047\053\073\055\077" +
    "\056\053\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\004\064" +
    "\044\065\066\067\056\001\002\000\012\024\uffb0\047\uffb0" +
    "\050\uffb0\053\uffb0\001\002\000\056\005\063\021\046\022" +
    "\203\030\064\032\101\033\106\034\052\035\075\043\067" +
    "\051\070\052\047\053\073\055\077\056\053\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\004\064\044\065\066\067\056" +
    "\001\002\000\012\024\uffaf\047\uffaf\050\uffaf\053\uffaf\001" +
    "\002\000\010\024\uffb2\047\uffb2\050\uffb2\001\002\000\064" +
    "\005\uffac\021\uffac\022\uffac\024\uffac\030\uffac\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\043\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061" +
    "\uffac\062\uffac\063\uffac\064\uffac\065\uffac\067\uffac\001\002" +
    "\000\022\005\uff8f\021\uff8f\043\uff8f\055\uff8f\056\uff8f\064" +
    "\uff8f\065\uff8f\067\uff8f\001\002\000\022\005\uff92\021\uff92" +
    "\043\uff92\055\uff92\056\uff92\064\uff92\065\uff92\067\uff92\001" +
    "\002\000\022\005\uff98\021\uff98\043\uff98\055\uff98\056\uff98" +
    "\064\uff98\065\uff98\067\uff98\001\002\000\022\005\uff95\021" +
    "\uff95\043\uff95\055\uff95\056\uff95\064\uff95\065\uff95\067\uff95" +
    "\001\002\000\022\005\uff99\021\uff99\043\uff99\055\uff99\056" +
    "\uff99\064\uff99\065\uff99\067\uff99\001\002\000\022\005\uff94" +
    "\021\uff94\043\uff94\055\uff94\056\uff94\064\uff94\065\uff94\067" +
    "\uff94\001\002\000\022\005\uff93\021\uff93\043\uff93\055\uff93" +
    "\056\uff93\064\uff93\065\uff93\067\uff93\001\002\000\022\005" +
    "\uff96\021\uff96\043\uff96\055\uff96\056\uff96\064\uff96\065\uff96" +
    "\067\uff96\001\002\000\022\005\063\021\046\043\067\055" +
    "\077\056\053\064\044\065\066\067\117\001\002\000\022" +
    "\005\063\021\046\043\067\055\077\056\053\064\044\065" +
    "\066\067\117\001\002\000\022\005\uff90\021\uff90\043\uff90" +
    "\055\uff90\056\uff90\064\uff90\065\uff90\067\uff90\001\002\000" +
    "\022\005\uff97\021\uff97\043\uff97\055\uff97\056\uff97\064\uff97" +
    "\065\uff97\067\uff97\001\002\000\022\005\uff91\021\uff91\043" +
    "\uff91\055\uff91\056\uff91\064\uff91\065\uff91\067\uff91\001\002" +
    "\000\014\022\uffdb\025\uffdb\027\uffdb\045\uffdb\046\uffdb\001" +
    "\002\000\014\022\uffda\025\uffda\027\uffda\045\uffda\046\uffda" +
    "\001\002\000\004\025\226\001\002\000\064\005\uffaa\021" +
    "\uffaa\022\uffaa\024\uffaa\030\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\043\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\063\uffaa\064\uffaa\065\uffaa\067\uffaa\001\002\000\014\022" +
    "\uffe0\025\uffe0\027\uffe0\045\uffe0\046\uffe0\001\002\000\004" +
    "\067\231\001\002\000\012\013\026\025\uff9a\027\uff9a\067" +
    "\032\001\002\000\064\005\uffe7\021\uffe7\022\uffe7\024\uffe7" +
    "\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\043\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\055\uffe7\056\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065" +
    "\uffe7\067\uffe7\001\002\000\024\003\116\005\063\021\046" +
    "\043\067\055\077\056\053\064\044\065\066\067\117\001" +
    "\002\000\004\022\235\001\002\000\004\023\041\001\002" +
    "\000\066\005\uffc4\021\uffc4\022\uffc4\024\uffc4\030\uffc4\031" +
    "\237\032\uffc4\033\uffc4\034\uffc4\035\uffc4\043\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4\056\uffc4\057" +
    "\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4" +
    "\067\uffc4\001\002\000\004\023\041\001\002\000\064\005" +
    "\uffc5\021\uffc5\022\uffc5\024\uffc5\030\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\043\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\064\uffc5\065\uffc5\067\uffc5\001\002\000" +
    "\064\005\uffc3\021\uffc3\022\uffc3\024\uffc3\030\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\043\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\067\uffc3\001" +
    "\002\000\044\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84" +
    "\022\uff84\025\uff84\026\uff84\027\uff84\036\uff84\037\uff84\040" +
    "\uff84\041\uff84\042\uff84\044\uff84\045\uff84\046\uff84\001\002" +
    "\000\072\002\ufff0\005\ufff0\021\ufff0\022\ufff0\024\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\043\ufff0" +
    "\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0" +
    "\064\ufff0\065\ufff0\067\ufff0\001\002\000\014\005\uff89\021" +
    "\uff89\064\uff89\065\uff89\067\uff89\001\002\000\014\005\uffdc" +
    "\021\uffdc\064\uffdc\065\uffdc\067\uffdc\001\002\000\014\005" +
    "\uff8a\021\uff8a\064\uff8a\065\uff8a\067\uff8a\001\002\000\014" +
    "\005\uff8c\021\uff8c\064\uff8c\065\uff8c\067\uff8c\001\002\000" +
    "\014\005\uff8b\021\uff8b\064\uff8b\065\uff8b\067\uff8b\001\002" +
    "\000\014\005\uffdd\021\uffdd\064\uffdd\065\uffdd\067\uffdd\001" +
    "\002\000\014\005\063\021\046\064\044\065\066\067\151" +
    "\001\002\000\014\005\uff88\021\uff88\064\uff88\065\uff88\067" +
    "\uff88\001\002\000\004\025\uffde\001\002\000\022\005\063" +
    "\021\046\043\067\055\077\056\053\064\044\065\066\067" +
    "\117\001\002\000\006\022\uffc6\027\uffc6\001\002\000\006" +
    "\022\261\027\260\001\002\000\022\005\063\021\046\043" +
    "\067\055\077\056\053\064\044\065\066\067\117\001\002" +
    "\000\004\025\262\001\002\000\014\022\uffc8\025\uffc8\027" +
    "\uffc8\045\uffc8\046\uffc8\001\002\000\006\022\uffc7\027\uffc7" +
    "\001\002\000\006\025\uffbd\067\265\001\002\000\016\013" +
    "\251\014\246\015\247\016\250\017\244\020\253\001\002" +
    "\000\004\022\312\001\002\000\004\025\271\001\002\000" +
    "\004\025\uffbe\001\002\000\006\025\uffbb\067\272\001\002" +
    "\000\016\036\212\037\211\040\221\041\213\042\215\044" +
    "\210\001\002\000\004\025\274\001\002\000\006\022\uffb7" +
    "\067\275\001\002\000\022\011\277\012\303\013\302\014" +
    "\246\015\247\016\250\017\244\020\253\001\002\000\004" +
    "\022\uffbf\001\002\000\004\022\uff8e\001\002\000\012\005" +
    "\063\064\044\065\066\067\151\001\002\000\004\022\uffba" +
    "\001\002\000\004\067\304\001\002\000\004\022\uff8d\001" +
    "\002\000\014\004\214\005\207\006\222\007\220\010\206" +
    "\001\002\000\012\005\063\064\044\065\066\067\151\001" +
    "\002\000\004\022\uffb8\001\002\000\004\022\uffb9\001\002" +
    "\000\012\005\063\064\044\065\066\067\151\001\002\000" +
    "\004\025\uffbc\001\002\000\002\001\002\000\064\005\uffc0" +
    "\021\uffc0\022\uffc0\024\uffc0\030\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\043\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\065\uffc0\067\uffc0\001\002\000\064" +
    "\005\uffab\021\uffab\022\uffab\024\uffab\030\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\043\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\063\uffab\064\uffab\065\uffab\067\uffab\001\002" +
    "\000\004\022\174\001\002\000\006\022\ufff5\027\ufff5\001" +
    "\002\000\006\022\ufff2\027\ufff2\001\002\000\004\067\322" +
    "\001\002\000\070\002\uffa5\005\uffa5\021\uffa5\022\uffa5\024" +
    "\uffa5\030\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\043\uffa5" +
    "\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055" +
    "\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\065\uffa5\067\uffa5\001\002\000\010\013\026\025" +
    "\uff9a\027\uff9a\001\002\000\006\025\uffa3\027\uffa3\001\002" +
    "\000\006\025\uff9b\027\uff9b\001\002\000\004\002\ufffe\001" +
    "\002\000\004\067\uff9e\001\002\000\006\057\330\067\uff9c" +
    "\001\002\000\004\067\uff9d\001\002\000\004\067\uff9f\001" +
    "\002\000\004\067\uffa0\001\002\000\004\021\031\001\002" +
    "\000\020\002\ufffd\054\005\057\uffd0\060\uffd0\061\uffd0\062" +
    "\uffd0\063\004\001\002\000\020\002\ufffb\054\ufffb\057\ufffb" +
    "\060\ufffb\061\ufffb\062\ufffb\063\ufffb\001\002\000\020\002" +
    "\ufffc\054\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\010\002\007\003\005\067\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\044\014\045\015\046\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\027\005\023" +
    "\050\024\051\026\053\021\054\022\001\001\000\006\003" +
    "\324\067\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\057\011\050\017\323\021" +
    "\104\023\075\036\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\035\007\033\044\034\045\015\046" +
    "\011\001\001\000\004\054\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\315\044\034\045\015\046\011\001\001\000\004" +
    "\014\042\001\001\000\046\010\057\011\050\015\061\016" +
    "\102\017\070\020\103\021\104\023\075\025\056\026\077" +
    "\027\047\030\054\032\053\033\044\034\060\036\071\037" +
    "\073\067\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\057\011" +
    "\050\017\314\021\104\023\075\036\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\251\063\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\010\057\011\050" +
    "\016\172\017\070\020\103\021\104\023\075\025\056\026" +
    "\077\027\047\030\054\032\053\033\044\034\060\036\071" +
    "\037\073\067\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\044\227\045\015\046\011\001\001\000\002" +
    "\001\001\000\006\021\226\036\071\001\001\000\016\010" +
    "\057\011\050\017\224\021\104\023\075\036\071\001\001" +
    "\000\002\001\001\000\006\064\216\065\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\106\014\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\010\057\011\050\017\113\021\104\023\075\035\114\036" +
    "\071\066\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\057\011\050\017\120\021\104\023\075\024\122" +
    "\036\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\057\011\050\017\125\021\104" +
    "\023\075\036\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\057" +
    "\011\050\017\113\021\104\023\075\035\133\036\071\066" +
    "\112\001\001\000\022\010\057\011\050\017\113\021\104" +
    "\023\075\035\132\036\071\066\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\057" +
    "\011\050\017\113\021\104\023\075\035\136\036\071\066" +
    "\112\001\001\000\002\001\001\000\006\013\140\014\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\040\157" +
    "\041\156\042\154\001\001\000\004\032\203\001\001\000" +
    "\004\036\175\001\001\000\006\042\163\043\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\010\057\011\050" +
    "\016\166\017\070\020\103\021\104\023\075\025\056\026" +
    "\077\027\047\030\054\032\053\033\044\034\060\036\071" +
    "\037\073\067\064\001\001\000\046\010\057\011\050\015" +
    "\170\016\102\017\167\020\103\021\104\023\075\025\056" +
    "\026\077\027\047\030\054\032\053\033\044\034\060\036" +
    "\071\037\073\067\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\010\057\011\050\016\172\017\070\020" +
    "\103\021\104\023\075\025\056\026\077\027\047\030\054" +
    "\032\053\033\044\034\060\036\071\037\073\067\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\010\057\011" +
    "\050\016\200\017\070\020\103\021\104\023\075\025\056" +
    "\026\077\027\047\030\054\032\053\033\044\034\060\036" +
    "\071\037\073\067\064\001\001\000\046\010\057\011\050" +
    "\015\201\016\102\017\167\020\103\021\104\023\075\025" +
    "\056\026\077\027\047\030\054\032\053\033\044\034\060" +
    "\036\071\037\073\067\064\001\001\000\002\001\001\000" +
    "\044\010\057\011\050\016\172\017\070\020\103\021\104" +
    "\023\075\025\056\026\077\027\047\030\054\032\053\033" +
    "\044\034\060\036\071\037\073\067\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\057\011\050\017\223\021\104" +
    "\023\075\036\071\001\001\000\016\010\057\011\050\017" +
    "\222\021\104\023\075\036\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\050\231\051\026\054" +
    "\022\001\001\000\002\001\001\000\022\010\057\011\050" +
    "\017\113\021\104\023\075\035\233\036\071\066\112\001" +
    "\001\000\002\001\001\000\006\013\235\014\107\001\001" +
    "\000\004\031\237\001\001\000\006\013\240\014\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\253\036\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\057\011\050\012\256" +
    "\017\255\021\104\023\075\036\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\057\011\050\017\262" +
    "\021\104\023\075\036\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\267\055\265" +
    "\057\266\001\001\000\006\022\251\063\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\272\001\001\000\004\065\307\001\001\000\002\001" +
    "\001\000\004\061\275\001\001\000\006\062\300\063\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\304\001\001\000\004\036\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\310" +
    "\001\001\000\002\001\001\000\004\056\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\335\005\334\052\333\001\001\000" +
    "\006\003\336\067\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : " + message);
        System.out.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            Parser p = new Parser(
                    new Lexer( new FileReader(args[0])));
            Object result = p.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valor ::= SUBSTRACT LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valor ::= LITERAL_CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valor ::= LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operacion_bin_2 ::= MODEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operacion_bin_2 ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operacion_bin_2 ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operacion_bin_2 ::= TIMESEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operacion_bin_2 ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operacion_bin_1 ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operacion_bin_1 ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operador ::= MODULUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operador ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operador ::= SUBSTRACT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operador ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // comparador ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // comparador ::= MAYOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // comparador ::= MENOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // comparador ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // comparador ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // validar_expr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // validar_expr ::= ASSIGN expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // long_stmt_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_aux",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // long_stmt_aux ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_aux",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // long_stmt ::= LONG long_stmt_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // long_stmt ::= LONG LONG long_stmt_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // short_stmt ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // short_stmt ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lista_ids ::= validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lista_ids ::= lista_ids COMMA IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lista_ids ::= IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaracion_var ::= lista_ids SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipo_dato ::= long_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipo_dato ::= short_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // continue_stmt ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // break_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // default_stmt ::= DEFAULT COLON LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // default_stmt ::= DEFAULT COLON sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // case_stmt ::= CASE valor COLON LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // case_stmt ::= CASE valor COLON sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lista_case ::= lista_case case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lista_case ::= case_stmt break_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lista_case ::= case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // case_body ::= lista_case default_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // case_body ::= lista_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // switch_stmt ::= SWITCH LPAREN valor RPAREN LBRACE case_body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // fin_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // fin_for ::= IDENTIFICADOR ASSIGN IDENTIFICADOR operador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // fin_for ::= IDENTIFICADOR operacion_bin_2 valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fin_for ::= IDENTIFICADOR operacion_bin_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // medio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // medio_for ::= IDENTIFICADOR comparador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // inicio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // inicio_for ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicion_for ::= inicio_for SEMICOLON medio_for SEMICOLON fin_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_for",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // for_statement ::= FOR LPAREN condicion_for RPAREN tipo_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dowhile_statement ::= DO bloque_global WHILE LPAREN condicion RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhile_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while_statement ::= WHILE LPAREN condicion RPAREN bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // else_statement ::= ELSE bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_statement ::= IF LPAREN condicion RPAREN bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_statement ::= IF LPAREN condicion RPAREN bloque_global else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // write_f_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // write_f_aux ::= write_f_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // write_f ::= WRITE LPAREN write_f_aux RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // read_f ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // read_f ::= READ LPAREN IDENTIFICADOR RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicion_2 ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condicion ::= condicion_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicion ::= condicion_2 OR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion ::= condicion_2 AND condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // is_constante ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_constante",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // is_constante ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_constante",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // call_function_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function_aux",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // call_function_aux ::= call_function_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function_aux",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // call_function ::= write_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // call_function ::= read_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // call_function ::= IDENTIFICADOR LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // call_function ::= IDENTIFICADOR LPAREN call_function_aux RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= LPAREN expresion RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= valor comparador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= valor operador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op_asignaciones ::= operacion_bin_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_asignaciones ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion ::= IDENTIFICADOR op_asignaciones exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= call_function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= EXCLAMACION exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= return_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= continue_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= break_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= asignacion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= is_constante tipo_dato IDENTIFICADOR declaracion_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= for_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= dowhile_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque ::= LBRACE lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bloque_global ::= bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_parametros ::= lista_parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcion ::= LPAREN lista_parametros RPAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_funcion ::= LPAREN lista_parametros RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_funcion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decision_operacion ::= declaracion_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decision_operacion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decision_operacion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decision_funcion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decision_funcion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa_c ::= 
            {
              Object RESULT =null;
		 /* Code for EOF here */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa_c ::= is_constante tipo_dato IDENTIFICADOR decision_operacion programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa_c ::= VOID IDENTIFICADOR decision_funcion programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

