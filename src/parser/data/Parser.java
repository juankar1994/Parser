
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 20 15:38:50 CST 2015
//----------------------------------------------------

package parser.data;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 20 15:38:50 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\003\007\000\002\003\004\000\002\003\002" +
    "\000\002\060\003\000\002\060\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\056\005\000\002" +
    "\057\003\000\002\057\003\000\002\004\006\000\002\005" +
    "\006\000\002\006\005\000\002\006\003\000\002\006\002" +
    "\000\002\007\004\000\002\014\003\000\002\015\005\000" +
    "\002\015\004\000\002\016\004\000\002\016\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\006\000\002\017\003" +
    "\000\002\017\003\000\002\017\004\000\002\017\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\020\003\000\002\020\003\000\002\021\005\000\002\023" +
    "\003\000\002\023\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\003\000\002\024\003\000" +
    "\002\025\006\000\002\026\005\000\002\026\003\000\002" +
    "\026\002\000\002\037\006\000\002\037\004\000\002\037" +
    "\003\000\002\075\004\000\002\075\004\000\002\075\002" +
    "\000\002\010\007\000\002\012\003\000\002\012\002\000" +
    "\002\011\007\000\002\013\005\000\002\013\003\000\002" +
    "\027\010\000\002\027\005\000\002\033\004\000\002\030" +
    "\007\000\002\031\011\000\002\032\007\000\002\063\007" +
    "\000\002\065\005\000\002\065\002\000\002\066\005\000" +
    "\002\066\002\000\002\067\004\000\002\067\005\000\002" +
    "\067\007\000\002\067\002\000\002\041\011\000\002\042" +
    "\003\000\002\042\004\000\002\043\003\000\002\043\004" +
    "\000\002\043\004\000\002\044\006\000\002\044\010\000" +
    "\002\045\005\000\002\045\007\000\002\034\004\000\002" +
    "\035\004\000\002\036\005\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\052\005" +
    "\000\002\076\003\000\002\076\002\000\002\053\004\000" +
    "\002\053\006\000\002\053\003\000\002\047\003\000\002" +
    "\047\004\000\002\050\005\000\002\050\004\000\002\051" +
    "\003\000\002\051\002\000\002\062\004\000\002\062\002" +
    "\000\002\070\003\000\002\070\003\000\002\074\003\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\071\003\000\002\071\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\022\002\ufffc\057\007\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\066\004\073\006\001\002\000\022\013\uffa0" +
    "\027\uffa0\031\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\072" +
    "\uffa0\001\002\000\022\002\ufffc\057\007\062\uff9f\063\uff9f" +
    "\064\uff9f\065\uff9f\066\004\073\006\001\002\000\004\074" +
    "\351\001\002\000\004\072\344\001\002\000\004\002\001" +
    "\001\002\000\012\062\022\063\021\064\016\065\015\001" +
    "\002\000\004\002\013\001\002\000\004\002\000\001\002" +
    "\000\004\072\uffa2\001\002\000\006\062\343\072\uff9b\001" +
    "\002\000\010\062\341\064\340\072\uff96\001\002\000\004" +
    "\072\023\001\002\000\004\072\uffa3\001\002\000\004\072" +
    "\uffa4\001\002\000\004\072\uffa5\001\002\000\016\013\uff9f" +
    "\021\026\027\uff9f\031\uff9f\066\004\072\uff9f\001\002\000" +
    "\022\002\ufffc\057\007\062\uff9f\063\uff9f\064\uff9f\065\uff9f" +
    "\066\004\073\006\001\002\000\022\002\ufff8\057\ufff8\062" +
    "\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\073\ufff8\001\002" +
    "\000\016\022\uffef\031\uffef\062\022\063\021\064\016\065" +
    "\015\001\002\000\022\002\ufff7\057\ufff7\062\ufff7\063\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\073\ufff7\001\002\000\012\013" +
    "\034\027\uff94\031\uff94\072\032\001\002\000\022\002\ufff9" +
    "\057\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\073" +
    "\ufff9\001\002\000\010\013\034\027\uff94\031\uff94\001\002" +
    "\000\006\027\042\031\041\001\002\000\006\067\040\070" +
    "\036\001\002\000\006\027\uff9c\031\uff9c\001\002\000\006" +
    "\027\uff92\031\uff92\001\002\000\006\027\uff95\031\uff95\001" +
    "\002\000\006\027\uff93\031\uff93\001\002\000\004\072\043" +
    "\001\002\000\070\002\uffa1\005\uffa1\021\uffa1\022\uffa1\024" +
    "\uffa1\033\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\052\uffa1" +
    "\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1" +
    "\070\uffa1\072\uffa1\073\uffa1\001\002\000\010\013\034\027" +
    "\uff94\031\uff94\001\002\000\006\027\uff9d\031\uff9d\001\002" +
    "\000\006\027\uff9e\031\uff9e\001\002\000\006\022\ufff0\031" +
    "\ufff0\001\002\000\004\072\335\001\002\000\006\022\052" +
    "\031\051\001\002\000\012\062\022\063\021\064\016\065" +
    "\015\001\002\000\006\023\053\027\054\001\002\000\054" +
    "\005\075\021\060\024\113\033\076\035\112\036\120\037" +
    "\064\040\106\054\101\055\061\056\104\060\110\061\065" +
    "\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\004\067\056\070" +
    "\100\072\070\001\002\000\022\002\ufff3\057\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\073\ufff3\001\002\000" +
    "\022\002\ufff2\057\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\073\ufff2\001\002\000\054\004\uff7e\005\uff7e\006" +
    "\uff7e\007\uff7e\010\uff7e\022\uff7e\023\uff7e\027\uff7e\030\uff7e" +
    "\031\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\047" +
    "\uff7e\050\uff7e\051\uff7e\067\uff7e\070\uff7e\072\uff7e\001\002" +
    "\000\062\005\uffdd\021\uffdd\022\uffdd\024\uffdd\033\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\072\uffdd\001\002" +
    "\000\014\005\075\021\060\067\056\070\100\072\162\001" +
    "\002\000\004\027\332\001\002\000\062\005\uffe6\021\uffe6" +
    "\022\uffe6\024\uffe6\033\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067" +
    "\uffe6\070\uffe6\072\uffe6\001\002\000\062\005\uffe1\021\uffe1" +
    "\022\uffe1\024\uffe1\033\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067" +
    "\uffe1\070\uffe1\072\uffe1\001\002\000\004\021\300\001\002" +
    "\000\004\021\271\001\002\000\062\005\uffde\021\uffde\022" +
    "\uffde\024\uffde\033\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\060\uffde\061" +
    "\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde" +
    "\070\uffde\072\uffde\001\002\000\062\005\uffe4\021\uffe4\022" +
    "\uffe4\024\uffe4\033\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\060\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4" +
    "\070\uffe4\072\uffe4\001\002\000\052\004\uff7f\005\uff7f\006" +
    "\uff7f\007\uff7f\010\uff7f\013\264\014\262\015\263\016\265" +
    "\017\260\020\267\021\163\022\uff7f\027\uff7f\041\uff7f\042" +
    "\uff7f\043\uff7f\044\uff7f\045\uff7f\047\uff7f\001\002\000\062" +
    "\005\uffe8\021\uffe8\022\uffe8\024\uffe8\033\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\072\uffe8\001\002\000\062" +
    "\005\uffe2\021\uffe2\022\uffe2\024\uffe2\033\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\072\uffe2\001\002\000\062" +
    "\005\uffdc\021\uffdc\022\uffdc\024\uffdc\033\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\070\uffdc\072\uffdc\001\002\000\054" +
    "\005\075\021\060\024\257\033\076\035\112\036\120\037" +
    "\064\040\106\054\101\055\061\056\104\060\110\061\065" +
    "\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\004\067\056\070" +
    "\100\072\070\001\002\000\004\067\256\001\002\000\016" +
    "\003\125\005\075\021\246\067\056\070\100\072\126\001" +
    "\002\000\012\062\022\063\021\064\016\065\015\001\002" +
    "\000\054\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\022" +
    "\uff7d\023\uff7d\027\uff7d\030\uff7d\031\uff7d\041\uff7d\042\uff7d" +
    "\043\uff7d\044\uff7d\045\uff7d\047\uff7d\050\uff7d\051\uff7d\067" +
    "\uff7d\070\uff7d\072\uff7d\001\002\000\014\005\075\021\060" +
    "\067\056\070\100\072\162\001\002\000\004\027\223\001" +
    "\002\000\044\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\022\uffd2\027\uffd2\031\uffd2\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\047\uffd2\067\uffd2\070\uffd2\072\uffd2\001\002" +
    "\000\004\027\237\001\002\000\062\005\uffe5\021\uffe5\022" +
    "\uffe5\024\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5" +
    "\070\uffe5\072\uffe5\001\002\000\004\021\203\001\002\000" +
    "\020\005\uffda\022\uffda\027\uffda\031\uffda\067\uffda\070\uffda" +
    "\072\uffda\001\002\000\004\021\176\001\002\000\062\005" +
    "\uffe7\021\uffe7\022\uffe7\024\uffe7\033\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\070\uffe7\072\uffe7\001\002\000\004\021" +
    "\172\001\002\000\072\002\uffeb\005\uffeb\021\uffeb\022\uffeb" +
    "\024\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\070\uffeb\072\uffeb\073\uffeb\001\002\000\056" +
    "\005\uffe9\021\uffe9\022\uffe9\024\uffe9\033\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\054\uffe9\055\uffe9\056\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\070\uffe9\072\uffe9\001\002\000\044\004\154\005\153" +
    "\006\160\007\157\010\152\022\uffd3\027\uffd3\031\uffd3\041" +
    "\137\042\136\043\143\044\140\045\141\047\135\067\uffd3" +
    "\070\uffd3\072\uffd3\001\002\000\004\027\151\001\002\000" +
    "\020\005\uffdb\022\uffdb\027\uffdb\031\uffdb\067\uffdb\070\uffdb" +
    "\072\uffdb\001\002\000\004\023\053\001\002\000\004\035" +
    "\123\001\002\000\064\005\uffed\021\uffed\022\uffed\024\uffed" +
    "\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\052" +
    "\uffed\053\uffed\054\uffed\055\uffed\056\uffed\060\uffed\061\uffed" +
    "\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070" +
    "\uffed\072\uffed\001\002\000\004\021\124\001\002\000\014" +
    "\003\125\005\075\067\056\070\100\072\126\001\002\000" +
    "\006\022\uffcb\023\uffcb\001\002\000\052\004\uff7f\005\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\022\uff7f\023\uff7f\027\uff7f\030" +
    "\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\047\uff7f" +
    "\050\uff7f\051\uff7f\067\uff7f\070\uff7f\072\uff7f\001\002\000" +
    "\026\022\uffc8\023\uffc8\041\137\042\136\043\143\044\140" +
    "\045\141\047\135\050\144\051\133\001\002\000\004\022" +
    "\131\001\002\000\004\027\132\001\002\000\062\005\uffbd" +
    "\021\uffbd\022\uffbd\024\uffbd\033\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\067\uffbd\070\uffbd\072\uffbd\001\002\000\014\003\125" +
    "\005\075\067\056\070\100\072\126\001\002\000\006\022" +
    "\uffcc\023\uffcc\001\002\000\014\005\uff90\021\uff90\067\uff90" +
    "\070\uff90\072\uff90\001\002\000\014\005\uff8d\021\uff8d\067" +
    "\uff8d\070\uff8d\072\uff8d\001\002\000\014\005\uff91\021\uff91" +
    "\067\uff91\070\uff91\072\uff91\001\002\000\014\005\uff8c\021" +
    "\uff8c\067\uff8c\070\uff8c\072\uff8c\001\002\000\014\005\uff8e" +
    "\021\uff8e\067\uff8e\070\uff8e\072\uff8e\001\002\000\012\005" +
    "\075\067\056\070\100\072\126\001\002\000\014\005\uff8f" +
    "\021\uff8f\067\uff8f\070\uff8f\072\uff8f\001\002\000\014\003" +
    "\125\005\075\067\056\070\100\072\126\001\002\000\006" +
    "\022\uffc9\023\uffc9\001\002\000\012\022\uffc8\023\uffc8\050" +
    "\144\051\133\001\002\000\006\022\uffcd\023\uffcd\001\002" +
    "\000\006\022\uffca\023\uffca\001\002\000\062\005\uffdf\021" +
    "\uffdf\022\uffdf\024\uffdf\033\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\060" +
    "\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf" +
    "\067\uffdf\070\uffdf\072\uffdf\001\002\000\014\005\uff87\021" +
    "\uff87\067\uff87\070\uff87\072\uff87\001\002\000\014\005\uff8a" +
    "\021\uff8a\067\uff8a\070\uff8a\072\uff8a\001\002\000\014\005" +
    "\uff8b\021\uff8b\067\uff8b\070\uff8b\072\uff8b\001\002\000\014" +
    "\005\075\021\060\067\056\070\100\072\162\001\002\000" +
    "\014\005\075\021\060\067\056\070\100\072\162\001\002" +
    "\000\014\005\uff88\021\uff88\067\uff88\070\uff88\072\uff88\001" +
    "\002\000\014\005\uff89\021\uff89\067\uff89\070\uff89\072\uff89" +
    "\001\002\000\020\005\uffd6\022\uffd6\027\uffd6\031\uffd6\067" +
    "\uffd6\070\uffd6\072\uffd6\001\002\000\046\004\uff7f\005\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\021\163\022\uff7f\027\uff7f\031" +
    "\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\047\uff7f" +
    "\067\uff7f\070\uff7f\072\uff7f\001\002\000\020\005\075\021" +
    "\060\022\uffce\031\uffce\067\056\070\100\072\162\001\002" +
    "\000\006\022\uffcf\031\uffcf\001\002\000\006\022\167\031" +
    "\166\001\002\000\014\005\075\021\060\067\056\070\100" +
    "\072\162\001\002\000\020\005\uffd1\022\uffd1\027\uffd1\031" +
    "\uffd1\067\uffd1\070\uffd1\072\uffd1\001\002\000\006\022\uffd0" +
    "\031\uffd0\001\002\000\020\005\uffd5\022\uffd5\027\uffd5\031" +
    "\uffd5\067\uffd5\070\uffd5\072\uffd5\001\002\000\014\003\125" +
    "\005\075\067\056\070\100\072\126\001\002\000\004\022" +
    "\174\001\002\000\004\023\053\001\002\000\062\005\uffbe" +
    "\021\uffbe\022\uffbe\024\uffbe\033\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe" +
    "\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066" +
    "\uffbe\067\uffbe\070\uffbe\072\uffbe\001\002\000\006\022\uffc5" +
    "\072\177\001\002\000\004\022\uffc6\001\002\000\004\022" +
    "\201\001\002\000\004\027\202\001\002\000\062\005\uffc7" +
    "\021\uffc7\022\uffc7\024\uffc7\033\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\067\uffc7\070\uffc7\072\uffc7\001\002\000\012\005\075" +
    "\067\056\070\100\072\126\001\002\000\004\022\205\001" +
    "\002\000\004\023\206\001\002\000\004\052\210\001\002" +
    "\000\012\024\uffaf\052\uffaf\053\uffaf\056\104\001\002\000" +
    "\012\005\075\067\056\070\100\072\126\001\002\000\004" +
    "\024\227\001\002\000\010\024\uffb1\052\210\053\213\001" +
    "\002\000\004\030\216\001\002\000\004\024\uffb0\001\002" +
    "\000\010\024\uffad\052\uffad\053\uffad\001\002\000\052\005" +
    "\075\021\217\033\076\035\112\036\120\037\064\040\106" +
    "\054\101\055\061\056\104\060\110\061\065\062\uff9f\063" +
    "\uff9f\064\uff9f\065\uff9f\066\004\067\056\070\100\072\070" +
    "\001\002\000\052\005\075\021\060\033\076\035\112\036" +
    "\120\037\064\040\106\054\101\055\061\056\104\060\110" +
    "\061\065\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\004\067" +
    "\056\070\100\072\070\001\002\000\004\024\uffaa\001\002" +
    "\000\054\005\075\021\060\022\225\033\076\035\112\036" +
    "\120\037\064\040\106\054\101\055\061\056\104\060\110" +
    "\061\065\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\004\067" +
    "\056\070\100\072\070\001\002\000\006\022\224\027\223" +
    "\001\002\000\062\005\uffe0\021\uffe0\022\uffe0\024\uffe0\033" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\060\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\072\uffe0" +
    "\001\002\000\020\005\uffd4\022\uffd4\027\uffd4\031\uffd4\067" +
    "\uffd4\070\uffd4\072\uffd4\001\002\000\004\024\uffa9\001\002" +
    "\000\056\005\uffea\021\uffea\022\uffea\024\uffea\033\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\054\uffea\055\uffea\056\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066" +
    "\uffea\067\uffea\070\uffea\072\uffea\001\002\000\062\005\uffb2" +
    "\021\uffb2\022\uffb2\024\uffb2\033\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\067\uffb2\070\uffb2\072\uffb2\001\002\000\004\030\231" +
    "\001\002\000\052\005\075\021\232\033\076\035\112\036" +
    "\120\037\064\040\106\054\101\055\061\056\104\060\110" +
    "\061\065\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\004\067" +
    "\056\070\100\072\070\001\002\000\052\005\075\021\060" +
    "\033\076\035\112\036\120\037\064\040\106\054\101\055" +
    "\061\056\104\060\110\061\065\062\uff9f\063\uff9f\064\uff9f" +
    "\065\uff9f\066\004\067\056\070\100\072\070\001\002\000" +
    "\012\024\uffac\052\uffac\053\uffac\056\uffac\001\002\000\054" +
    "\005\075\021\060\022\235\033\076\035\112\036\120\037" +
    "\064\040\106\054\101\055\061\056\104\060\110\061\065" +
    "\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\004\067\056\070" +
    "\100\072\070\001\002\000\012\024\uffab\052\uffab\053\uffab" +
    "\056\uffab\001\002\000\010\024\uffae\052\uffae\053\uffae\001" +
    "\002\000\062\005\uffa8\021\uffa8\022\uffa8\024\uffa8\033\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\052\uffa8\053\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\072\uffa8\001" +
    "\002\000\004\027\241\001\002\000\062\005\uffa6\021\uffa6" +
    "\022\uffa6\024\uffa6\033\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\060\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067" +
    "\uffa6\070\uffa6\072\uffa6\001\002\000\004\072\243\001\002" +
    "\000\014\013\uff9f\027\uff9f\031\uff9f\066\004\072\uff9f\001" +
    "\002\000\062\005\uffe3\021\uffe3\022\uffe3\024\uffe3\033\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\072\uffe3\001" +
    "\002\000\004\023\053\001\002\000\014\003\125\005\075" +
    "\067\056\070\100\072\126\001\002\000\004\022\250\001" +
    "\002\000\004\023\053\001\002\000\004\034\252\001\002" +
    "\000\004\023\053\001\002\000\062\005\uffc1\021\uffc1\022" +
    "\uffc1\024\uffc1\033\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\070\uffc1\072\uffc1\001\002\000\062\005\uffbf\021\uffbf\022" +
    "\uffbf\024\uffbf\033\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf" +
    "\070\uffbf\072\uffbf\001\002\000\062\005\uffc0\021\uffc0\022" +
    "\uffc0\024\uffc0\033\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\070\uffc0\072\uffc0\001\002\000\054\004\uff7c\005\uff7c\006" +
    "\uff7c\007\uff7c\010\uff7c\022\uff7c\023\uff7c\027\uff7c\030\uff7c" +
    "\031\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\047" +
    "\uff7c\050\uff7c\051\uff7c\067\uff7c\070\uff7c\072\uff7c\001\002" +
    "\000\072\002\uffec\005\uffec\021\uffec\022\uffec\024\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\052\uffec" +
    "\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061" +
    "\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec" +
    "\070\uffec\072\uffec\073\uffec\001\002\000\014\005\uff81\021" +
    "\uff81\067\uff81\070\uff81\072\uff81\001\002\000\014\005\uffd7" +
    "\021\uffd7\067\uffd7\070\uffd7\072\uffd7\001\002\000\014\005" +
    "\uff82\021\uff82\067\uff82\070\uff82\072\uff82\001\002\000\014" +
    "\005\uff84\021\uff84\067\uff84\070\uff84\072\uff84\001\002\000" +
    "\014\005\uffd8\021\uffd8\067\uffd8\070\uffd8\072\uffd8\001\002" +
    "\000\014\005\uff83\021\uff83\067\uff83\070\uff83\072\uff83\001" +
    "\002\000\014\005\075\021\060\067\056\070\100\072\126" +
    "\001\002\000\014\005\uff80\021\uff80\067\uff80\070\uff80\072" +
    "\uff80\001\002\000\014\005\uffd9\027\uffd9\067\uffd9\070\uffd9" +
    "\072\uffd9\001\002\000\014\005\075\021\060\067\056\070" +
    "\100\072\162\001\002\000\006\022\uffc2\031\uffc2\001\002" +
    "\000\006\022\275\031\274\001\002\000\014\005\075\021" +
    "\060\067\056\070\100\072\162\001\002\000\004\027\276" +
    "\001\002\000\062\005\uffc4\021\uffc4\022\uffc4\024\uffc4\033" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\060\uffc4\061\uffc4\062\uffc4\063" +
    "\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\072\uffc4" +
    "\001\002\000\006\022\uffc3\031\uffc3\001\002\000\006\027" +
    "\uffb9\072\301\001\002\000\004\072\327\001\002\000\004" +
    "\022\325\001\002\000\004\027\304\001\002\000\006\027" +
    "\uffb7\072\305\001\002\000\016\041\137\042\136\043\143" +
    "\044\140\045\141\047\135\001\002\000\004\027\307\001" +
    "\002\000\006\022\uffb3\072\310\001\002\000\022\011\312" +
    "\012\316\013\315\014\262\015\263\016\265\017\260\020" +
    "\267\001\002\000\004\022\uffbb\001\002\000\004\022\uff86" +
    "\001\002\000\012\005\075\067\056\070\100\072\126\001" +
    "\002\000\004\022\uffb6\001\002\000\004\072\317\001\002" +
    "\000\004\022\uff85\001\002\000\014\004\154\005\153\006" +
    "\160\007\157\010\152\001\002\000\012\005\075\067\056" +
    "\070\100\072\126\001\002\000\004\022\uffb4\001\002\000" +
    "\004\022\uffb5\001\002\000\012\005\075\067\056\070\100" +
    "\072\126\001\002\000\004\027\uffb8\001\002\000\002\001" +
    "\002\000\062\005\uffbc\021\uffbc\022\uffbc\024\uffbc\033\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\052\uffbc\053\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\072\uffbc\001" +
    "\002\000\016\013\264\014\262\015\263\016\265\017\260" +
    "\020\267\001\002\000\012\005\075\067\056\070\100\072" +
    "\126\001\002\000\004\027\uffba\001\002\000\062\005\uffa7" +
    "\021\uffa7\022\uffa7\024\uffa7\033\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7" +
    "\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066" +
    "\uffa7\067\uffa7\070\uffa7\072\uffa7\001\002\000\004\022\224" +
    "\001\002\000\006\022\ufff1\031\ufff1\001\002\000\006\022" +
    "\uffee\031\uffee\001\002\000\004\002\ufffe\001\002\000\004" +
    "\072\uff98\001\002\000\006\062\341\072\uff96\001\002\000" +
    "\004\072\uff97\001\002\000\004\072\uff99\001\002\000\004" +
    "\072\uff9a\001\002\000\004\021\026\001\002\000\022\002" +
    "\ufffc\057\007\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\004" +
    "\073\006\001\002\000\022\002\ufffa\057\ufffa\062\ufffa\063" +
    "\ufffa\064\ufffa\065\ufffa\066\ufffa\073\ufffa\001\002\000\022" +
    "\002\ufffb\057\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066" +
    "\ufffb\073\ufffb\001\002\000\004\002\uffff\001\002\000\006" +
    "\071\354\075\353\001\002\000\022\002\ufff6\057\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\073\ufff6\001\002" +
    "\000\022\002\ufff4\057\ufff4\062\ufff4\063\ufff4\064\ufff4\065" +
    "\ufff4\066\ufff4\073\ufff4\001\002\000\022\002\ufff5\057\ufff5" +
    "\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\073\ufff5\001" +
    "\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\012\002\011\003\007\056\004\076\010\001" +
    "\001\000\002\001\001\000\010\003\354\056\004\076\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\046\016\047\017\050\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\336\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\030\005\024\052\026\061\023\076\027\001\001\000\010" +
    "\003\335\056\004\076\010\001\001\000\002\001\001\000" +
    "\014\006\047\007\045\046\046\047\017\050\013\001\001" +
    "\000\002\001\001\000\006\053\032\062\034\001\001\000" +
    "\002\001\001\000\004\062\044\001\001\000\002\001\001" +
    "\000\004\070\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\333\046\046\047\017\050" +
    "\013\001\001\000\004\015\054\001\001\000\050\010\071" +
    "\011\062\016\073\017\113\020\101\021\115\022\116\024" +
    "\114\025\106\027\070\030\110\031\061\032\066\034\065" +
    "\035\056\036\072\040\102\041\104\076\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\332\022\116\024\114\025\106\040" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\265\072\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\010\071\011\062\017\225\020\101\021\115\022\116" +
    "\024\114\025\106\027\070\030\110\031\061\032\066\034" +
    "\065\035\056\036\072\040\102\041\104\076\076\001\001" +
    "\000\002\001\001\000\006\037\244\040\126\001\001\000" +
    "\010\046\241\047\017\050\013\001\001\000\002\001\001" +
    "\000\014\020\237\022\116\024\114\025\106\040\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\073\155\074\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\120" +
    "\015\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\127\040\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\074\141\075\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\037\147\040\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\145\001\001\000" +
    "\002\001\001\000\006\037\144\040\126\001\001\000\002" +
    "\001\001\000\004\075\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\170\022\116\024" +
    "\114\025\106\040\102\001\001\000\014\020\160\022\116" +
    "\024\114\025\106\040\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\163\022\116\024\114\025\106\026\164\040\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\167" +
    "\022\116\024\114\025\106\040\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\172" +
    "\040\126\001\001\000\002\001\001\000\006\014\174\015" +
    "\121\001\001\000\002\001\001\000\004\012\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\042\210\043\211\044\206\001" +
    "\001\000\004\034\235\001\001\000\004\040\227\001\001" +
    "\000\002\001\001\000\006\044\214\045\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\010\071\011\062\017\217\020\101\021\115\022\116\024" +
    "\114\025\106\027\070\030\110\031\061\032\066\034\065" +
    "\035\056\036\072\040\102\041\104\076\076\001\001\000" +
    "\050\010\071\011\062\016\220\017\113\020\221\021\115" +
    "\022\116\024\114\025\106\027\070\030\110\031\061\032" +
    "\066\034\065\035\056\036\072\040\102\041\104\076\076" +
    "\001\001\000\002\001\001\000\046\010\071\011\062\017" +
    "\225\020\101\021\115\022\116\024\114\025\106\027\070" +
    "\030\110\031\061\032\066\034\065\035\056\036\072\040" +
    "\102\041\104\076\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\010\071" +
    "\011\062\017\232\020\101\021\115\022\116\024\114\025" +
    "\106\027\070\030\110\031\061\032\066\034\065\035\056" +
    "\036\072\040\102\041\104\076\076\001\001\000\050\010" +
    "\071\011\062\016\233\017\113\020\221\021\115\022\116" +
    "\024\114\025\106\027\070\030\110\031\061\032\066\034" +
    "\065\035\056\036\072\040\102\041\104\076\076\001\001" +
    "\000\002\001\001\000\046\010\071\011\062\017\225\020" +
    "\101\021\115\022\116\024\114\025\106\027\070\030\110" +
    "\031\061\032\066\034\065\035\056\036\072\040\102\041" +
    "\104\076\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\052\243\076\027\001\001\000\002" +
    "\001\001\000\006\014\254\015\121\001\001\000\006\037" +
    "\246\040\126\001\001\000\002\001\001\000\006\014\250" +
    "\015\121\001\001\000\004\033\252\001\001\000\006\014" +
    "\253\015\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\267\024\114\040\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\272\020\271\022\116\024\114\025" +
    "\106\040\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\276\022\116\024\114\025\106\040\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\063\301\065\302\001\001\000\004\021\327\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\305" +
    "\001\001\000\004\074\322\001\001\000\002\001\001\000" +
    "\004\067\310\001\001\000\006\071\313\072\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\073\317\001\001\000\004\040\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\323\001\001" +
    "\000\002\001\001\000\004\064\325\001\001\000\002\001" +
    "\001\000\006\023\265\072\260\001\001\000\004\040\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\346" +
    "\005\345\060\344\001\001\000\010\003\347\056\004\076" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : " + message);
        System.out.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            Parser p = new Parser(
                    new Lexer( new FileReader(args[0])));
            Object result = p.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // valor ::= SUBSTRACT LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // valor ::= LITERAL_CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // valor ::= LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operacion_bin_2 ::= MODEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operacion_bin_2 ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operacion_bin_2 ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operacion_bin_2 ::= TIMESEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operacion_bin_2 ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operacion_bin_1 ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operacion_bin_1 ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operador ::= MODULUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operador ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operador ::= SUBSTRACT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operador ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // comparador ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // comparador ::= MAYOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // comparador ::= MENOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comparador ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // comparador ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // validar_expr_2 ::= LITERAL_CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr_2",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // validar_expr_2 ::= LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr_2",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // validar_expr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // validar_expr ::= ASSIGN validar_expr_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // long_stmt_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_aux",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // long_stmt_aux ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_aux",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // long_stmt ::= LONG long_stmt_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // long_stmt ::= LONG LONG long_stmt_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // short_stmt ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // short_stmt ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_ids ::= validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lista_ids ::= lista_ids COMMA IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_ids ::= IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // is_constante ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_constante",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // is_constante ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_constante",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaracion_var ::= is_constante lista_ids SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipo_dato ::= long_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipo_dato ::= short_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // continue_stmt ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // break_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // default_stmt ::= DEFAULT COL LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // default_stmt ::= DEFAULT COL sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // case_stmt ::= CASE valor COL LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // case_stmt ::= CASE valor COL sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_case ::= lista_case case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lista_case ::= case_stmt break_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lista_case ::= case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // case_body ::= lista_case default_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // case_body ::= lista_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // switch_stmt ::= SWITCH LPAREN valor RPAREN LBRACE case_body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // fin_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // fin_for ::= IDENTIFICADOR ASSIGN IDENTIFICADOR operador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // fin_for ::= IDENTIFICADOR operacion_bin_2 valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // fin_for ::= IDENTIFICADOR operacion_bin_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // medio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // medio_for ::= IDENTIFICADOR comparador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // inicio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // inicio_for ::= IDENTIFICADOR asignacion valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicion_for ::= inicio_for SEMICOLON medio_for SEMICOLON fin_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // for_statement ::= FOR LPAREN condicion_for RPAREN tipo_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dowhile_statement ::= DO bloque_global WHILE LPAREN condicion RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhile_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // while_statement ::= WHILE LPAREN condicion RPAREN bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // else_statement ::= ELSE bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_statement ::= IF condicion bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_statement ::= IF LPAREN condicion RPAREN bloque_global else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // write_f_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // write_f_aux ::= write_f_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // write_f ::= WRITE LPAREN write_f_aux RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // read_f_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // read_f_aux ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // read_f ::= READ LPAREN read_f_aux RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicion_2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicion_2 ::= OR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicion_2 ::= AND condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicion ::= valor condicion_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condicion ::= valor comparador valor condicion_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // call_function_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function_aux",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // call_function_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function_aux",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // call_function_aux ::= call_function_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function_aux",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // call_function ::= IDENTIFICADOR LPAREN call_function_aux RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp_aux ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_aux",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= LPAREN expresion RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp_aux comparador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp_aux operador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op_asignaciones ::= operacion_bin_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op_asignaciones ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion ::= IDENTIFICADOR op_asignaciones exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= call_function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= return_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= continue_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= break_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= asignacion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= write_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= read_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= is_constante tipo_dato IDENTIFICADOR declaracion_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= for_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= dowhile_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque ::= LBRACE lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_global ::= bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametro ::= tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_parametros ::= lista_parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcion ::= LPAREN lista_parametros RPAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def_funcion ::= LPAREN lista_parametros RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_funcion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenido_directiva ::= TEXTO_DIRECTIVA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_directiva",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenido_directiva ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_directiva",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // directiva ::= SIMBOLO_NUMERO INCLUDE contenido_directiva 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("directiva",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decision_operacion ::= declaracion_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decision_operacion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decision_operacion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decision_funcion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decision_funcion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa_c ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa_c ::= directiva programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa_c ::= is_constante tipo_dato IDENTIFICADOR decision_operacion programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa_c ::= VOID IDENTIFICADOR decision_funcion programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

