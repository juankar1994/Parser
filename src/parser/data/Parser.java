
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 24 01:13:25 CST 2015
//----------------------------------------------------

package parser.data;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 24 01:13:25 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\006\000\002\003\003\000\002\052\006" +
    "\000\002\052\006\000\002\074\002\000\002\052\007\000" +
    "\002\053\003\000\002\053\003\000\002\004\006\000\002" +
    "\005\006\000\002\075\002\000\002\005\007\000\002\006" +
    "\005\000\002\006\003\000\002\006\002\000\002\007\004" +
    "\000\002\013\006\000\002\013\004\000\002\076\002\000" +
    "\002\013\005\000\002\014\005\000\002\014\004\000\002" +
    "\055\006\000\002\055\002\000\002\015\004\000\002\015" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\004\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\077\002\000\002\016\005\000\002\017\003\000\002\017" +
    "\004\000\002\017\003\000\002\017\003\000\002\020\005" +
    "\000\002\022\003\000\002\022\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\003\000\002" +
    "\023\006\000\002\023\005\000\002\023\003\000\002\023" +
    "\003\000\002\024\005\000\002\024\003\000\002\070\003" +
    "\000\002\070\002\000\002\035\005\000\002\035\005\000" +
    "\002\035\003\000\002\067\003\000\002\010\006\000\002" +
    "\010\005\000\002\011\006\000\002\012\005\000\002\012" +
    "\003\000\002\025\010\000\002\100\002\000\002\025\011" +
    "\000\002\031\004\000\002\031\002\000\002\026\007\000" +
    "\002\101\002\000\002\026\010\000\002\027\011\000\002" +
    "\102\002\000\002\027\012\000\002\030\007\000\002\103" +
    "\002\000\002\030\010\000\002\057\003\000\002\057\003" +
    "\000\002\056\007\000\002\060\003\000\002\060\002\000" +
    "\002\061\005\000\002\061\002\000\002\062\004\000\002" +
    "\062\005\000\002\062\007\000\002\062\002\000\002\037" +
    "\011\000\002\104\002\000\002\037\012\000\002\040\003" +
    "\000\002\040\004\000\002\040\002\000\002\041\003\000" +
    "\002\041\004\000\002\041\004\000\002\042\006\000\002" +
    "\042\010\000\002\043\005\000\002\043\007\000\002\032" +
    "\004\000\002\033\004\000\002\034\005\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\050\004\000\002\051\004\000\002\051\006\000\002" +
    "\051\005\000\002\105\002\000\002\051\005\000\002\045" +
    "\003\000\002\045\004\000\002\046\005\000\002\046\004" +
    "\000\002\047\003\000\002\047\002\000\002\054\004\000" +
    "\002\106\002\000\002\054\006\000\002\054\002\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\063\003\000\002\063\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\016\054\010\057\004\060\016\061\005\062" +
    "\017\063\015\001\002\000\006\003\uff94\067\uff94\001\002" +
    "\000\012\003\uff85\057\u010f\061\u010d\067\uff85\001\002\000" +
    "\006\003\uff91\067\uff91\001\002\000\004\002\000\001\002" +
    "\000\006\003\u0106\067\u0107\001\002\000\004\002\u0105\001" +
    "\002\000\024\002\ufffd\025\ufffd\027\ufffd\054\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\067\ufffd\001\002\000\006\003" +
    "\uff92\067\uff92\001\002\000\006\003\022\067\141\001\002" +
    "\000\012\057\004\060\016\061\005\062\017\001\002\000" +
    "\006\003\uff93\067\uff93\001\002\000\010\003\uff8a\057\020" +
    "\067\uff8a\001\002\000\006\003\uff89\067\uff89\001\002\000" +
    "\006\003\022\067\023\001\002\000\016\054\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\062\uff8c\063\uff8c\001\002\000\012\013" +
    "\033\025\uff81\027\uff81\067\uff81\001\002\000\010\025\030" +
    "\027\027\067\031\001\002\000\016\054\010\057\004\060" +
    "\016\061\005\062\017\063\015\001\002\000\024\002\ufffe" +
    "\025\ufffe\027\ufffe\054\ufffe\057\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\067\ufffe\001\002\000\004\067\134\001\002\000\060" +
    "\003\uff90\005\uff90\021\uff90\030\uff90\032\uff90\033\uff90\034" +
    "\uff90\035\uff90\043\uff90\051\uff90\052\uff90\053\uff90\054\uff90" +
    "\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063" +
    "\uff90\064\uff90\065\uff90\067\uff90\001\002\000\012\013\033" +
    "\025\uff81\027\uff81\067\uff81\001\002\000\010\025\uff8d\027" +
    "\uff8d\067\uff8d\001\002\000\024\003\051\005\041\021\052" +
    "\043\037\055\034\056\050\064\047\065\035\067\053\001" +
    "\002\000\004\021\130\001\002\000\046\004\uff6c\005\uff6c" +
    "\006\uff6c\007\uff6c\010\uff6c\022\uff6c\025\uff6c\026\uff6c\027" +
    "\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\044\uff6c" +
    "\045\uff6c\046\uff6c\067\uff6c\001\002\000\016\022\uffcc\025" +
    "\uffcc\027\uffcc\045\uffcc\046\uffcc\067\uffcc\001\002\000\014" +
    "\005\041\021\052\064\047\065\035\067\073\001\002\000" +
    "\016\022\uffd7\025\uffd7\027\uffd7\045\uffd7\046\uffd7\067\uffd7" +
    "\001\002\000\004\064\126\001\002\000\016\022\uffd9\025" +
    "\uffd9\027\uffd9\045\uffd9\046\uffd9\067\uffd9\001\002\000\044" +
    "\004\115\005\111\006\123\007\121\010\107\022\uffcf\025" +
    "\uffcf\027\uffcf\036\113\037\112\040\122\041\114\042\117" +
    "\044\110\045\uffcf\046\uffcf\067\uffcf\001\002\000\016\022" +
    "\uffd6\025\uffd6\027\uffd6\045\uffd6\046\uffd6\067\uffd6\001\002" +
    "\000\016\022\uffcb\025\uffcb\027\uffcb\045\uffcb\046\uffcb\067" +
    "\uffcb\001\002\000\010\025\uff84\027\uff84\067\uff84\001\002" +
    "\000\046\004\uff6d\005\uff6d\006\uff6d\007\uff6d\010\uff6d\022" +
    "\uff6d\025\uff6d\026\uff6d\027\uff6d\036\uff6d\037\uff6d\040\uff6d" +
    "\041\uff6d\042\uff6d\044\uff6d\045\uff6d\046\uff6d\067\uff6d\001" +
    "\002\000\004\021\101\001\002\000\016\054\uff83\057\uff83" +
    "\060\uff83\061\uff83\062\uff83\063\uff83\001\002\000\022\005" +
    "\041\021\052\043\037\055\034\056\050\064\047\065\035" +
    "\067\053\001\002\000\062\004\uff6e\005\uff6e\006\uff6e\007" +
    "\uff6e\010\uff6e\013\060\014\056\015\057\016\061\017\054" +
    "\020\064\021\063\022\uff6e\025\uff6e\027\uff6e\036\uff6e\037" +
    "\uff6e\040\uff6e\041\uff6e\042\uff6e\044\uff6e\045\uff6e\046\uff6e" +
    "\067\uff6e\001\002\000\014\005\uff70\021\uff70\064\uff70\065" +
    "\uff70\067\uff70\001\002\000\014\005\uffd3\021\uffd3\064\uffd3" +
    "\065\uffd3\067\uffd3\001\002\000\014\005\uff71\021\uff71\064" +
    "\uff71\065\uff71\067\uff71\001\002\000\014\005\uff73\021\uff73" +
    "\064\uff73\065\uff73\067\uff73\001\002\000\014\005\uffd4\021" +
    "\uffd4\064\uffd4\065\uffd4\067\uffd4\001\002\000\014\005\uff72" +
    "\021\uff72\064\uff72\065\uff72\067\uff72\001\002\000\014\005" +
    "\041\021\052\064\047\065\035\067\073\001\002\000\024" +
    "\005\041\021\052\022\066\043\037\055\034\056\050\064" +
    "\047\065\035\067\053\001\002\000\014\005\uff6f\021\uff6f" +
    "\064\uff6f\065\uff6f\067\uff6f\001\002\000\006\022\uffc9\027" +
    "\uffc9\001\002\000\016\022\uffcd\025\uffcd\027\uffcd\045\uffcd" +
    "\046\uffcd\067\uffcd\001\002\000\006\022\071\027\070\001" +
    "\002\000\022\005\041\021\052\043\037\055\034\056\050" +
    "\064\047\065\035\067\053\001\002\000\016\022\uffce\025" +
    "\uffce\027\uffce\045\uffce\046\uffce\067\uffce\001\002\000\006" +
    "\022\uffca\027\uffca\001\002\000\046\004\uff6e\005\uff6e\006" +
    "\uff6e\007\uff6e\010\uff6e\022\uff6e\025\uff6e\026\uff6e\027\uff6e" +
    "\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\044\uff6e\045" +
    "\uff6e\046\uff6e\067\uff6e\001\002\000\016\022\uffd5\025\uffd5" +
    "\027\uffd5\045\uffd5\046\uffd5\067\uffd5\001\002\000\004\022" +
    "\076\001\002\000\016\022\uffd0\025\uffd0\027\uffd0\045\uffd0" +
    "\046\uffd0\067\uffd0\001\002\000\016\054\010\057\004\060" +
    "\016\061\005\062\017\063\015\001\002\000\010\025\uff82" +
    "\027\uff82\067\uff82\001\002\000\022\005\041\021\052\043" +
    "\037\055\034\056\050\064\047\065\035\067\053\001\002" +
    "\000\006\022\uffbe\027\uffbe\001\002\000\006\022\105\027" +
    "\104\001\002\000\022\005\041\021\052\043\037\055\034" +
    "\056\050\064\047\065\035\067\053\001\002\000\016\022" +
    "\uffc0\025\uffc0\027\uffc0\045\uffc0\046\uffc0\067\uffc0\001\002" +
    "\000\006\022\uffbf\027\uffbf\001\002\000\022\005\uff76\021" +
    "\uff76\043\uff76\055\uff76\056\uff76\064\uff76\065\uff76\067\uff76" +
    "\001\002\000\022\005\uff7f\021\uff7f\043\uff7f\055\uff7f\056" +
    "\uff7f\064\uff7f\065\uff7f\067\uff7f\001\002\000\022\005\uff79" +
    "\021\uff79\043\uff79\055\uff79\056\uff79\064\uff79\065\uff79\067" +
    "\uff79\001\002\000\022\005\uff7c\021\uff7c\043\uff7c\055\uff7c" +
    "\056\uff7c\064\uff7c\065\uff7c\067\uff7c\001\002\000\022\005" +
    "\uff80\021\uff80\043\uff80\055\uff80\056\uff80\064\uff80\065\uff80" +
    "\067\uff80\001\002\000\022\005\uff7b\021\uff7b\043\uff7b\055" +
    "\uff7b\056\uff7b\064\uff7b\065\uff7b\067\uff7b\001\002\000\022" +
    "\005\uff7a\021\uff7a\043\uff7a\055\uff7a\056\uff7a\064\uff7a\065" +
    "\uff7a\067\uff7a\001\002\000\022\005\041\021\052\043\037" +
    "\055\034\056\050\064\047\065\035\067\053\001\002\000" +
    "\022\005\uff7d\021\uff7d\043\uff7d\055\uff7d\056\uff7d\064\uff7d" +
    "\065\uff7d\067\uff7d\001\002\000\022\005\041\021\052\043" +
    "\037\055\034\056\050\064\047\065\035\067\053\001\002" +
    "\000\022\005\uff77\021\uff77\043\uff77\055\uff77\056\uff77\064" +
    "\uff77\065\uff77\067\uff77\001\002\000\022\005\uff7e\021\uff7e" +
    "\043\uff7e\055\uff7e\056\uff7e\064\uff7e\065\uff7e\067\uff7e\001" +
    "\002\000\022\005\uff78\021\uff78\043\uff78\055\uff78\056\uff78" +
    "\064\uff78\065\uff78\067\uff78\001\002\000\016\022\uffd2\025" +
    "\uffd2\027\uffd2\045\uffd2\046\uffd2\067\uffd2\001\002\000\016" +
    "\022\uffd1\025\uffd1\027\uffd1\045\uffd1\046\uffd1\067\uffd1\001" +
    "\002\000\046\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b" +
    "\022\uff6b\025\uff6b\026\uff6b\027\uff6b\036\uff6b\037\uff6b\040" +
    "\uff6b\041\uff6b\042\uff6b\044\uff6b\045\uff6b\046\uff6b\067\uff6b" +
    "\001\002\000\016\022\uffd8\025\uffd8\027\uffd8\045\uffd8\046" +
    "\uffd8\067\uffd8\001\002\000\006\022\131\067\132\001\002" +
    "\000\016\022\uffc1\025\uffc1\027\uffc1\045\uffc1\046\uffc1\067" +
    "\uffc1\001\002\000\004\022\133\001\002\000\016\022\uffc2" +
    "\025\uffc2\027\uffc2\045\uffc2\046\uffc2\067\uffc2\001\002\000" +
    "\012\013\033\025\uff81\027\uff81\067\uff81\001\002\000\010" +
    "\025\uff8e\027\uff8e\067\uff8e\001\002\000\010\025\uff8f\027" +
    "\uff8f\067\uff8f\001\002\000\016\054\010\057\004\060\016" +
    "\061\005\062\017\063\015\001\002\000\010\025\uff8b\027" +
    "\uff8b\067\uff8b\001\002\000\014\013\033\021\146\025\uff81" +
    "\027\uff81\067\uff81\001\002\000\016\054\010\057\004\060" +
    "\016\061\005\062\017\063\015\001\002\000\024\002\uffff" +
    "\025\uffff\027\uffff\054\uffff\057\uffff\060\uffff\061\uffff\062" +
    "\uffff\067\uffff\001\002\000\014\054\010\057\004\060\016" +
    "\061\005\062\017\001\002\000\014\054\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\001\002\000\020\003\151\022\ufff0" +
    "\027\ufff0\057\004\060\016\061\005\062\017\001\002\000" +
    "\014\054\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\001\002" +
    "\000\006\022\ufff1\027\ufff1\001\002\000\004\022\ufff4\001" +
    "\002\000\004\067\376\001\002\000\006\022\155\027\154" +
    "\001\002\000\012\057\004\060\016\061\005\062\017\001" +
    "\002\000\010\003\160\023\156\025\157\001\002\000\060" +
    "\003\uffe7\005\uffe7\021\uffe7\024\165\030\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\043\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\055\uffe7\056\uffe7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063" +
    "\164\064\uffe7\065\uffe7\067\uffe7\001\002\000\014\054\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\062\ufff6\001\002\000\016\054" +
    "\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\001\002" +
    "\000\014\054\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\001" +
    "\002\000\016\054\010\057\004\060\016\061\005\062\017" +
    "\063\015\001\002\000\014\054\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\001\002\000\012\057\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\001\002\000\014\054\uffed\057\uffed\060\uffed\061" +
    "\uffed\062\uffed\001\002\000\044\003\213\005\041\021\052" +
    "\030\204\032\175\033\205\034\215\035\202\043\037\051" +
    "\201\052\173\053\212\055\034\056\050\064\047\065\035" +
    "\067\053\001\002\000\012\057\004\060\016\061\005\062" +
    "\017\001\002\000\006\003\022\067\023\001\002\000\056" +
    "\003\uffe7\005\uffe7\021\uffe7\030\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\043\uffe7\051\uffe7\052\uffe7\053\uffe7\055\uffe7" +
    "\056\uffe7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\164\064" +
    "\uffe7\065\uffe7\067\uffe7\001\002\000\044\003\uffe8\005\uffe8" +
    "\021\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\043" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\056\uffe8\064\uffe8" +
    "\065\uffe8\067\uffe8\001\002\000\004\025\374\001\002\000" +
    "\054\003\uffe4\005\uffe4\021\uffe4\022\uffe4\024\uffe4\030\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\043\uffe4\047\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\055\uffe4\056\uffe4\064\uffe4" +
    "\065\uffe4\067\uffe4\001\002\000\004\021\364\001\002\000" +
    "\004\025\343\001\002\000\046\003\213\005\041\021\052" +
    "\024\363\030\204\032\175\033\205\034\215\035\202\043" +
    "\037\051\201\052\173\053\212\055\034\056\050\064\047" +
    "\065\035\067\053\001\002\000\054\003\uffe3\005\uffe3\021" +
    "\uffe3\022\uffe3\024\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\043\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\055\uffe3\056\uffe3\064\uffe3\065\uffe3\067\uffe3\001\002" +
    "\000\022\005\041\021\052\043\037\055\034\056\050\064" +
    "\047\065\035\067\053\001\002\000\004\021\321\001\002" +
    "\000\054\003\uffe2\005\uffe2\021\uffe2\022\uffe2\024\uffe2\030" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\043\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2\064" +
    "\uffe2\065\uffe2\067\uffe2\001\002\000\004\021\305\001\002" +
    "\000\004\023\247\001\002\000\054\003\uffe0\005\uffe0\021" +
    "\uffe0\022\uffe0\024\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\043\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\055\uffe0\056\uffe0\064\uffe0\065\uffe0\067\uffe0\001\002" +
    "\000\050\003\uffe5\005\uffe5\021\uffe5\022\uffe5\024\uffe5\030" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\043\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\055\uffe5\056\uffe5\064\uffe5\065\uffe5\067" +
    "\uffe5\001\002\000\054\003\uffe1\005\uffe1\021\uffe1\022\uffe1" +
    "\024\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\043" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\055\uffe1" +
    "\056\uffe1\064\uffe1\065\uffe1\067\uffe1\001\002\000\054\003" +
    "\uffdc\005\uffdc\021\uffdc\022\uffdc\024\uffdc\030\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\043\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc\064\uffdc\065\uffdc" +
    "\067\uffdc\001\002\000\004\025\264\001\002\000\004\025" +
    "\uffdb\001\002\000\054\003\uffde\005\uffde\021\uffde\022\uffde" +
    "\024\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde\043" +
    "\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\055\uffde" +
    "\056\uffde\064\uffde\065\uffde\067\uffde\001\002\000\004\021" +
    "\217\001\002\000\054\003\uffdd\005\uffdd\021\uffdd\022\uffdd" +
    "\024\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\043" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd" +
    "\056\uffdd\064\uffdd\065\uffdd\067\uffdd\001\002\000\010\003" +
    "\220\025\uffab\067\221\001\002\000\004\022\uffb1\001\002" +
    "\000\016\013\060\014\056\015\057\016\061\017\054\020" +
    "\064\001\002\000\004\022\246\001\002\000\004\025\225" +
    "\001\002\000\004\025\uffac\001\002\000\006\025\uffa9\067" +
    "\226\001\002\000\016\036\113\037\112\040\122\041\114" +
    "\042\117\044\110\001\002\000\004\025\230\001\002\000" +
    "\006\022\uffa5\067\231\001\002\000\022\011\233\012\237" +
    "\013\236\014\056\015\057\016\061\017\054\020\064\001" +
    "\002\000\004\022\uffad\001\002\000\004\022\uff75\001\002" +
    "\000\012\005\041\064\047\065\035\067\073\001\002\000" +
    "\004\022\uffa8\001\002\000\004\067\240\001\002\000\004" +
    "\022\uff74\001\002\000\014\004\115\005\111\006\123\007" +
    "\121\010\107\001\002\000\012\005\041\064\047\065\035" +
    "\067\073\001\002\000\004\022\uffa6\001\002\000\004\022" +
    "\uffa7\001\002\000\012\005\041\064\047\065\035\067\073" +
    "\001\002\000\004\025\uffaa\001\002\000\006\023\247\025" +
    "\250\001\002\000\046\003\213\005\041\021\052\024\253" +
    "\030\204\032\175\033\205\034\215\035\202\043\037\051" +
    "\201\052\173\053\212\055\034\056\050\064\047\065\035" +
    "\067\053\001\002\000\054\003\uffae\005\uffae\021\uffae\022" +
    "\uffae\024\uffae\030\uffae\032\uffae\033\uffae\034\uffae\035\uffae" +
    "\043\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\055" +
    "\uffae\056\uffae\064\uffae\065\uffae\067\uffae\001\002\000\054" +
    "\003\uffb2\005\uffb2\021\uffb2\022\uffb2\024\uffb2\030\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\043\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\055\uffb2\056\uffb2\064\uffb2\065" +
    "\uffb2\067\uffb2\001\002\000\054\003\uffaf\005\uffaf\021\uffaf" +
    "\022\uffaf\024\uffaf\030\uffaf\032\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\043\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\055\uffaf\056\uffaf\064\uffaf\065\uffaf\067\uffaf\001\002\000" +
    "\056\003\uffe9\005\uffe9\021\uffe9\022\uffe9\024\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\043\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\055\uffe9\056\uffe9" +
    "\064\uffe9\065\uffe9\067\uffe9\001\002\000\046\003\213\005" +
    "\041\021\052\024\255\030\204\032\175\033\205\034\215" +
    "\035\202\043\037\051\201\052\173\053\212\055\034\056" +
    "\050\064\047\065\035\067\053\001\002\000\056\003\uffea" +
    "\005\uffea\021\uffea\022\uffea\024\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\043\uffea\047\uffea\050\uffea" +
    "\051\uffea\052\uffea\053\uffea\055\uffea\056\uffea\064\uffea\065" +
    "\uffea\067\uffea\001\002\000\050\003\uffe6\005\uffe6\021\uffe6" +
    "\022\uffe6\024\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\043\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6\056\uffe6" +
    "\064\uffe6\065\uffe6\067\uffe6\001\002\000\004\022\260\001" +
    "\002\000\006\023\247\025\250\001\002\000\054\003\uffb0" +
    "\005\uffb0\021\uffb0\022\uffb0\024\uffb0\030\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\043\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\055\uffb0\056\uffb0\064\uffb0\065\uffb0\067" +
    "\uffb0\001\002\000\004\025\263\001\002\000\054\003\uffda" +
    "\005\uffda\021\uffda\022\uffda\024\uffda\030\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\043\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\055\uffda\056\uffda\064\uffda\065\uffda\067" +
    "\uffda\001\002\000\054\003\uff97\005\uff97\021\uff97\022\uff97" +
    "\024\uff97\030\uff97\032\uff97\033\uff97\034\uff97\035\uff97\043" +
    "\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\055\uff97" +
    "\056\uff97\064\uff97\065\uff97\067\uff97\001\002\000\004\032" +
    "\266\001\002\000\004\021\267\001\002\000\024\003\273" +
    "\005\041\021\052\043\037\055\034\056\050\064\047\065" +
    "\035\067\053\001\002\000\010\022\uffc4\045\302\046\301" +
    "\001\002\000\004\022\277\001\002\000\010\022\uffc3\045" +
    "\uffc3\046\uffc3\001\002\000\004\022\uffb4\001\002\000\004" +
    "\022\275\001\002\000\004\025\276\001\002\000\054\003" +
    "\uffb3\005\uffb3\021\uffb3\022\uffb3\024\uffb3\030\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\043\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\055\uffb3\056\uffb3\064\uffb3\065\uffb3" +
    "\067\uffb3\001\002\000\004\025\300\001\002\000\054\003" +
    "\uffb5\005\uffb5\021\uffb5\022\uffb5\024\uffb5\030\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\043\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\055\uffb5\056\uffb5\064\uffb5\065\uffb5" +
    "\067\uffb5\001\002\000\022\005\041\021\052\043\037\055" +
    "\034\056\050\064\047\065\035\067\053\001\002\000\022" +
    "\005\041\021\052\043\037\055\034\056\050\064\047\065" +
    "\035\067\053\001\002\000\004\022\uffc5\001\002\000\004" +
    "\022\uffc6\001\002\000\024\003\307\005\041\021\052\043" +
    "\037\055\034\056\050\064\047\065\035\067\053\001\002" +
    "\000\004\022\316\001\002\000\004\022\uffbc\001\002\000" +
    "\004\022\311\001\002\000\004\023\247\001\002\000\056" +
    "\003\uffb9\005\uffb9\021\uffb9\022\uffb9\024\uffb9\030\uffb9\031" +
    "\313\032\uffb9\033\uffb9\034\uffb9\035\uffb9\043\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\064" +
    "\uffb9\065\uffb9\067\uffb9\001\002\000\004\023\247\001\002" +
    "\000\054\003\uffbb\005\uffbb\021\uffbb\022\uffbb\024\uffbb\030" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\043\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb\064" +
    "\uffbb\065\uffbb\067\uffbb\001\002\000\054\003\uffba\005\uffba" +
    "\021\uffba\022\uffba\024\uffba\030\uffba\032\uffba\033\uffba\034" +
    "\uffba\035\uffba\043\uffba\047\uffba\050\uffba\051\uffba\052\uffba" +
    "\053\uffba\055\uffba\056\uffba\064\uffba\065\uffba\067\uffba\001" +
    "\002\000\004\023\247\001\002\000\056\003\uffb9\005\uffb9" +
    "\021\uffb9\022\uffb9\024\uffb9\030\uffb9\031\313\032\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\043\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\055\uffb9\056\uffb9\064\uffb9\065\uffb9\067" +
    "\uffb9\001\002\000\054\003\uffbd\005\uffbd\021\uffbd\022\uffbd" +
    "\024\uffbd\030\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\043" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\055\uffbd" +
    "\056\uffbd\064\uffbd\065\uffbd\067\uffbd\001\002\000\014\003" +
    "\322\005\041\064\047\065\035\067\073\001\002\000\004" +
    "\022\uffa3\001\002\000\004\022\324\001\002\000\004\023" +
    "\325\001\002\000\006\024\uff9f\047\327\001\002\000\012" +
    "\024\uff9e\047\uff9e\050\uff9e\053\212\001\002\000\012\005" +
    "\041\064\047\065\035\067\073\001\002\000\004\024\344" +
    "\001\002\000\010\024\uffa1\047\327\050\332\001\002\000" +
    "\004\026\335\001\002\000\004\024\uffa0\001\002\000\010" +
    "\024\uff9c\047\uff9c\050\uff9c\001\002\000\044\003\213\005" +
    "\041\021\336\030\204\032\175\033\205\034\215\035\202" +
    "\043\037\051\201\052\173\053\212\055\034\056\050\064" +
    "\047\065\035\067\053\001\002\000\044\003\213\005\041" +
    "\021\052\030\204\032\175\033\205\034\215\035\202\043" +
    "\037\051\201\052\173\053\212\055\034\056\050\064\047" +
    "\065\035\067\053\001\002\000\004\024\uff99\001\002\000" +
    "\006\022\076\025\343\001\002\000\046\003\213\005\041" +
    "\021\052\022\342\030\204\032\175\033\205\034\215\035" +
    "\202\043\037\051\201\052\173\053\212\055\034\056\050" +
    "\064\047\065\035\067\053\001\002\000\004\024\uff98\001" +
    "\002\000\054\003\uffdf\005\uffdf\021\uffdf\022\uffdf\024\uffdf" +
    "\030\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\043\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf\056\uffdf" +
    "\064\uffdf\065\uffdf\067\uffdf\001\002\000\054\003\uffa4\005" +
    "\uffa4\021\uffa4\022\uffa4\024\uffa4\030\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\043\uffa4\047\uffa4\050\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\055\uffa4\056\uffa4\064\uffa4\065\uffa4\067\uffa4" +
    "\001\002\000\004\026\346\001\002\000\044\003\213\005" +
    "\041\021\347\030\204\032\175\033\205\034\215\035\202" +
    "\043\037\051\201\052\173\053\212\055\034\056\050\064" +
    "\047\065\035\067\053\001\002\000\044\003\213\005\041" +
    "\021\052\030\204\032\175\033\205\034\215\035\202\043" +
    "\037\051\201\052\173\053\212\055\034\056\050\064\047" +
    "\065\035\067\053\001\002\000\012\024\uff9b\047\uff9b\050" +
    "\uff9b\053\uff9b\001\002\000\046\003\213\005\041\021\052" +
    "\022\352\030\204\032\175\033\205\034\215\035\202\043" +
    "\037\051\201\052\173\053\212\055\034\056\050\064\047" +
    "\065\035\067\053\001\002\000\012\024\uff9a\047\uff9a\050" +
    "\uff9a\053\uff9a\001\002\000\010\024\uff9d\047\uff9d\050\uff9d" +
    "\001\002\000\004\022\355\001\002\000\004\023\356\001" +
    "\002\000\006\024\uff9f\047\327\001\002\000\004\024\360" +
    "\001\002\000\054\003\uffa2\005\uffa2\021\uffa2\022\uffa2\024" +
    "\uffa2\030\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\043\uffa2" +
    "\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\055\uffa2\056" +
    "\uffa2\064\uffa2\065\uffa2\067\uffa2\001\002\000\004\025\362" +
    "\001\002\000\054\003\uff95\005\uff95\021\uff95\022\uff95\024" +
    "\uff95\030\uff95\032\uff95\033\uff95\034\uff95\035\uff95\043\uff95" +
    "\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\055\uff95\056" +
    "\uff95\064\uff95\065\uff95\067\uff95\001\002\000\014\054\uffee" +
    "\057\uffee\060\uffee\061\uffee\062\uffee\001\002\000\024\003" +
    "\366\005\041\021\052\043\037\055\034\056\050\064\047" +
    "\065\035\067\053\001\002\000\004\022\372\001\002\000" +
    "\004\022\uffb7\001\002\000\004\022\370\001\002\000\004" +
    "\023\247\001\002\000\054\003\uffb6\005\uffb6\021\uffb6\022" +
    "\uffb6\024\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\043\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\055" +
    "\uffb6\056\uffb6\064\uffb6\065\uffb6\067\uffb6\001\002\000\004" +
    "\023\247\001\002\000\054\003\uffb8\005\uffb8\021\uffb8\022" +
    "\uffb8\024\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\043\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\055" +
    "\uffb8\056\uffb8\064\uffb8\065\uffb8\067\uffb8\001\002\000\054" +
    "\003\uff96\005\uff96\021\uff96\022\uff96\024\uff96\030\uff96\032" +
    "\uff96\033\uff96\034\uff96\035\uff96\043\uff96\047\uff96\050\uff96" +
    "\051\uff96\052\uff96\053\uff96\055\uff96\056\uff96\064\uff96\065" +
    "\uff96\067\uff96\001\002\000\006\022\ufff2\027\ufff2\001\002" +
    "\000\006\022\uffef\027\uffef\001\002\000\004\022\u0100\001" +
    "\002\000\006\003\160\023\156\001\002\000\014\054\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\062\ufff3\001\002\000\024\002" +
    "\ufffc\025\ufffc\027\ufffc\054\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\067\ufffc\001\002\000\004\067\u0104\001\002\000" +
    "\004\021\146\001\002\000\004\002\001\001\002\000\004" +
    "\021\ufffa\001\002\000\004\021\146\001\002\000\014\054" +
    "\010\057\004\060\016\061\005\062\017\001\002\000\024" +
    "\002\ufffb\025\ufffb\027\ufffb\054\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\067\ufffb\001\002\000\004\021\146\001\002" +
    "\000\014\054\010\057\004\060\016\061\005\062\017\001" +
    "\002\000\024\002\ufff9\025\ufff9\027\ufff9\054\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\062\ufff9\067\ufff9\001\002\000\010\003" +
    "\uff85\057\u010f\067\uff85\001\002\000\006\003\uff87\067\uff87" +
    "\001\002\000\006\003\uff86\067\uff86\001\002\000\006\003" +
    "\uff88\067\uff88\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\016\002\010\003\006\044\013\045\012\046" +
    "\005\052\011\001\001\000\002\001\001\000\004\047\u010d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\141\051\023\001\001\000\010\044\020\045" +
    "\012\046\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\024\051\023\001\001\000" +
    "\004\105\136\001\001\000\004\054\135\001\001\000\002" +
    "\001\001\000\014\003\025\044\013\045\012\046\005\052" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\031\001\001\000\002\001\001\000" +
    "\020\010\035\011\044\017\045\020\043\021\041\023\037" +
    "\036\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\126\036\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\065" +
    "\117\066\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\076\001\001\000\020\010\035\011\044\017\074" +
    "\020\043\021\041\023\037\036\042\001\001\000\006\022" +
    "\061\064\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\073\036\042\001\001\000\022" +
    "\010\035\011\044\017\064\020\043\021\041\023\037\024" +
    "\066\036\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\035\011" +
    "\044\017\071\020\043\021\041\023\037\036\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\077\044\013\045\012\046\005\052\011\001\001\000" +
    "\002\001\001\000\022\010\035\011\044\012\102\017\101" +
    "\020\043\021\041\023\037\036\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\035\011\044\017\105" +
    "\020\043\021\041\023\037\036\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\035\011\044" +
    "\017\124\020\043\021\041\023\037\036\042\001\001\000" +
    "\002\001\001\000\020\010\035\011\044\017\123\020\043" +
    "\021\041\023\037\036\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\137\044\013\045\012\046\005\052\011" +
    "\001\001\000\002\001\001\000\012\004\146\005\144\053" +
    "\143\054\135\001\001\000\014\003\142\044\013\045\012" +
    "\046\005\052\011\001\001\000\002\001\001\000\012\044" +
    "\u0102\045\012\046\005\052\u0101\001\001\000\002\001\001" +
    "\000\014\006\152\007\147\044\151\045\012\046\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\374\044\151\045\012\046\005\001\001\000\004\013\160" +
    "\001\001\000\006\055\165\070\166\001\001\000\002\001" +
    "\001\000\004\076\161\001\001\000\002\001\001\000\014" +
    "\003\162\044\013\045\012\046\005\052\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\010\035\011\044\015\176\016\206\017\175\020\043\021" +
    "\041\023\037\025\173\026\177\027\202\030\205\032\213" +
    "\033\215\034\210\036\042\037\207\001\001\000\010\044" +
    "\167\045\012\046\005\001\001\000\006\050\170\051\023" +
    "\001\001\000\006\055\171\070\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\010\035\011\044\016\255\017" +
    "\175\020\043\021\041\023\037\025\173\026\177\027\202" +
    "\030\205\032\213\033\215\034\210\036\042\037\207\001" +
    "\001\000\002\001\001\000\020\010\035\011\044\017\360" +
    "\020\043\021\041\023\037\036\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\223\056\221\060\222\001\001\000\004" +
    "\103\256\001\001\000\006\022\061\064\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\226\001\001\000\004\066\243\001\001\000\002\001" +
    "\001\000\004\062\231\001\001\000\006\063\234\064\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\240\001\001\000\004\036\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\244" +
    "\001\001\000\002\001\001\000\006\014\251\057\250\001" +
    "\001\000\044\010\035\011\044\015\253\016\206\017\175" +
    "\020\043\021\041\023\037\025\173\026\177\027\202\030" +
    "\205\032\213\033\215\034\210\036\042\037\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\010\035\011\044\016\255\017\175" +
    "\020\043\021\041\023\037\025\173\026\177\027\202\030" +
    "\205\032\213\033\215\034\210\036\042\037\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\251\057\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\035\011\044\017\271" +
    "\020\043\021\041\023\037\035\270\036\042\067\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\035\011\044\017\271\020\043\021\041\023" +
    "\037\035\303\036\042\067\267\001\001\000\024\010\035" +
    "\011\044\017\271\020\043\021\041\023\037\035\302\036" +
    "\042\067\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\035\011\044\017\271\020\043\021\041\023" +
    "\037\035\305\036\042\067\267\001\001\000\002\001\001" +
    "\000\004\100\307\001\001\000\002\001\001\000\004\014" +
    "\311\001\001\000\004\031\313\001\001\000\004\014\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\316\001\001\000\004\031\317\001\001\000\002\001\001" +
    "\000\004\036\322\001\001\000\004\104\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\327\041\330" +
    "\042\325\001\001\000\004\032\352\001\001\000\004\036" +
    "\344\001\001\000\002\001\001\000\006\042\333\043\332" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\010\035\011\044\016\336\017\175\020\043" +
    "\021\041\023\037\025\173\026\177\027\202\030\205\032" +
    "\213\033\215\034\210\036\042\037\207\001\001\000\044" +
    "\010\035\011\044\015\340\016\206\017\337\020\043\021" +
    "\041\023\037\025\173\026\177\027\202\030\205\032\213" +
    "\033\215\034\210\036\042\037\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\010\035\011\044\016\255" +
    "\017\175\020\043\021\041\023\037\025\173\026\177\027" +
    "\202\030\205\032\213\033\215\034\210\036\042\037\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\010\035\011\044\016\347" +
    "\017\175\020\043\021\041\023\037\025\173\026\177\027" +
    "\202\030\205\032\213\033\215\034\210\036\042\037\207" +
    "\001\001\000\044\010\035\011\044\015\350\016\206\017" +
    "\337\020\043\021\041\023\037\025\173\026\177\027\202" +
    "\030\205\032\213\033\215\034\210\036\042\037\207\001" +
    "\001\000\002\001\001\000\042\010\035\011\044\016\255" +
    "\017\175\020\043\021\041\023\037\025\173\026\177\027" +
    "\202\030\205\032\213\033\215\034\210\036\042\037\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\040\356\041\330\042\325" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\035" +
    "\011\044\017\271\020\043\021\041\023\037\035\364\036" +
    "\042\067\267\001\001\000\002\001\001\000\004\101\366" +
    "\001\001\000\002\001\001\000\004\014\370\001\001\000" +
    "\002\001\001\000\004\014\372\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\146\005" +
    "\144\053\143\001\001\000\002\001\001\000\004\074\u0109" +
    "\001\001\000\010\004\146\005\144\053\u0107\001\001\000" +
    "\012\044\u0102\045\012\046\005\052\u0108\001\001\000\002" +
    "\001\001\000\010\004\146\005\144\053\u010a\001\001\000" +
    "\012\044\u0102\045\012\046\005\052\u010b\001\001\000\002" +
    "\001\001\000\004\047\u010f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static Lexer s;
    public static int errors = 0;
    public static ErrorData errorData = ErrorData.getInstance();
    ErrorData detectedError;
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        if (info instanceof String){
            errors++;
            String mensaje = ", se esperaba: " + message;
            try{
                detectedError.setId(errors);
            }catch(Exception e){
                detectedError = new ErrorData(errors, info.toString(), mensaje);
            }
            detectedError.setMessage(detectedError.getMessage() + mensaje);
            errorData.insertarError(detectedError);
        }
        else {
            StringBuilder m = new StringBuilder("Error");
            if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                if (s.left >= 0) {                
                    m.append(" en la línea "+(s.left+1));
                    if (s.right >= 0)
                        m.append(", columna "+(s.right+1));
                }
            }
            m.append(" : " + message);
            detectedError = new ErrorData(errors, info.toString(), m.toString());
            errorData.insertarError(detectedError);
        }
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        System.out.println("----------FUI YO------------");
        report_error(message, info);
        //System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            s = new Lexer(new FileReader(args[0]));
            Parser p = new Parser(s);
            p.parse();
            System.out.println("\n*** Fin del parseo ***");
            System.out.println("Total de errores = " + errors + ".");
            errors = 0;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // valor ::= SUBSTRACT LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // valor ::= LITERAL_CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // valor ::= LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // operacion_bin_2 ::= MODEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // operacion_bin_2 ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // operacion_bin_2 ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // operacion_bin_2 ::= TIMESEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // operacion_bin_2 ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // operacion_bin_1 ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // operacion_bin_1 ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // operador ::= MODULUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operador ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operador ::= SUBSTRACT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // operador ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // comparador ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // comparador ::= MAYOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // comparador ::= MENOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // comparador ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // comparador ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // validar_expr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // validar_expr ::= ASSIGN error NT$10 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$10 ::= 
            {
              Object RESULT =null;
 System.out.println("-------------------1---------------"); parser.report_error(" una expresión.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // validar_expr ::= ASSIGN expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // long_stmt_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_aux",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // long_stmt_aux ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_aux",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // long_stmt ::= LONG long_stmt_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // long_stmt ::= LONG LONG long_stmt_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // short_stmt ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // short_stmt ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // lista_ids ::= error NT$9 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$9 ::= 
            {
              Object RESULT =null;
System.out.println("-------------------3---------------"); parser.report_error(" un ; al final de la expresión.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lista_ids ::= lista_ids IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lista_ids ::= lista_ids COMMA IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // lista_ids ::= IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // declaracion_var ::= lista_ids SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipo_dato ::= long_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipo_dato ::= short_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // continue_stmt ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // break_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // default_stmt ::= DEFAULT COLON LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // default_stmt ::= DEFAULT COLON sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // case_stmt ::= CASE valor COLON LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // case_stmt ::= CASE valor COLON sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_case ::= lista_case case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lista_case ::= case_stmt break_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_case ::= case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // case_body ::= lista_case default_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // case_body ::= lista_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // switch_stmt ::= SWITCH LPAREN error NT$8 RPAREN LBRACE case_body RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$8 ::= 
            {
              Object RESULT =null;
 parser.report_error("una condición numérica para el SWITCH.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // switch_stmt ::= SWITCH LPAREN valor RPAREN LBRACE case_body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // fin_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // fin_for ::= IDENTIFICADOR ASSIGN IDENTIFICADOR operador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // fin_for ::= IDENTIFICADOR operacion_bin_2 valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // fin_for ::= IDENTIFICADOR operacion_bin_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // medio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // medio_for ::= IDENTIFICADOR comparador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // inicio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // inicio_for ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicion_for ::= inicio_for SEMICOLON medio_for SEMICOLON fin_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_for",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo_for ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_for",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo_for ::= bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_for",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for_statement ::= FOR LPAREN error NT$7 RPAREN tipo_for 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$7 ::= 
            {
              Object RESULT =null;
 parser.report_error("una condición valida para el FOR.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for_statement ::= FOR LPAREN condicion_for RPAREN tipo_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dowhile_statement ::= DO bloque WHILE LPAREN error NT$6 RPAREN SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhile_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$6 ::= 
            {
              Object RESULT =null;
 parser.report_error("una condición valida para el DOWHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dowhile_statement ::= DO bloque WHILE LPAREN condicion RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhile_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // while_statement ::= WHILE LPAREN error NT$5 RPAREN bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.report_error("una condición valida para el WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // while_statement ::= WHILE LPAREN condicion RPAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // else_statement ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_statement ::= IF LPAREN error NT$4 RPAREN bloque else_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.report_error("una condición valida para el IF.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if_statement ::= IF LPAREN condicion RPAREN bloque else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // write_f_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // write_f_aux ::= write_f_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // write_f ::= WRITE LPAREN write_f_aux RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // read_f ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // read_f ::= READ LPAREN IDENTIFICADOR RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicion_2 ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicion ::= condicion_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicion ::= condicion_2 OR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicion ::= condicion_2 AND condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // is_constante ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_constante",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // is_constante ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_constante",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // call_function_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function_aux",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // call_function_aux ::= call_function_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function_aux",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // call_function ::= write_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // call_function ::= read_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // call_function ::= IDENTIFICADOR LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // call_function ::= IDENTIFICADOR LPAREN call_function_aux RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= LPAREN expresion RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= valor comparador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= valor operador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op_asignaciones ::= operacion_bin_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op_asignaciones ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion ::= IDENTIFICADOR op_asignaciones exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= call_function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= EXCLAMACION exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= error NT$3 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.report_error(" no se reconoce la expresión.", "");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= return_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= continue_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= break_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= for_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= dowhile_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_var_interna ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var_interna",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_var_interna ::= is_constante tipo_dato declaracion_var declaracion_var_interna 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var_interna",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque ::= LBRACE lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque_global ::= error NT$2 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.report_error(" no se encuentra el LBRACE .","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_global ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_global ::= LBRACE declaracion_var_interna lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametro ::= tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_parametros ::= lista_parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcion ::= LPAREN error NT$1 RPAREN bloque_global 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetro incorrecto.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcion ::= LPAREN lista_parametros RPAREN bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // def_funcion ::= LPAREN lista_parametros RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_funcion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decision_operacion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decision_operacion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decision_funcion ::= VOID error NT$0 decision_operacion decision_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.report_error(" no se encuentra el ID de la función.","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decision_funcion ::= VOID IDENTIFICADOR decision_operacion decision_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decision_funcion ::= tipo_dato IDENTIFICADOR decision_operacion decision_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa_c ::= decision_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa_c ::= CONST tipo_dato declaracion_var programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa_c ::= tipo_dato declaracion_var programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

