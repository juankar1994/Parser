
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 22 11:31:47 CST 2015
//----------------------------------------------------

package parser.data;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.Hashtable;
import java.util.Stack;
import parser.controller.DatosArchivoController;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 22 11:31:47 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\053\002\000\002\003\007\000\002\054\002" +
    "\000\002\003\007\000\002\003\002\000\002\052\006\000" +
    "\002\042\003\000\002\043\003\000\002\044\003\000\002" +
    "\045\003\000\002\031\003\000\002\031\003\000\002\004" +
    "\005\000\002\005\005\000\002\055\002\000\002\005\007" +
    "\000\002\011\005\000\002\011\004\000\002\011\003\000" +
    "\002\012\005\000\002\012\004\000\002\056\002\000\002" +
    "\012\005\000\002\013\004\000\002\013\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\004" +
    "\000\002\014\003\000\002\015\003\000\002\015\004\000" +
    "\002\015\003\000\002\015\003\000\002\016\005\000\002" +
    "\020\003\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\004\000\002\017\003\000\002\021\005" +
    "\000\002\021\003\000\002\021\003\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\037\003\000\002" +
    "\006\006\000\002\006\005\000\002\057\002\000\002\006" +
    "\007\000\002\007\006\000\002\060\002\000\002\007\007" +
    "\000\002\010\005\000\002\010\003\000\002\022\010\000" +
    "\002\061\002\000\002\022\011\000\002\062\002\000\002" +
    "\022\007\000\002\063\002\000\002\022\010\000\002\050" +
    "\003\000\002\046\003\000\002\047\003\000\002\024\004" +
    "\000\002\024\002\000\002\051\003\000\002\023\007\000" +
    "\002\064\002\000\002\023\010\000\002\065\002\000\002" +
    "\023\007\000\002\066\002\000\002\023\007\000\002\067" +
    "\002\000\002\025\006\000\002\032\004\000\002\032\004" +
    "\000\002\032\002\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\035\003\000\002\035\003\000\002\034" +
    "\003\000\002\034\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\010\002\ufffa\045\007\050\011\001\002\000" +
    "\004\053\015\001\002\000\010\002\ufffa\045\007\050\011" +
    "\001\002\000\004\053\015\001\002\000\004\053\ufff7\001" +
    "\002\000\004\002\013\001\002\000\004\053\ufff8\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002\000" +
    "\010\013\024\021\020\025\uffad\001\002\000\010\013\ufff6" +
    "\021\ufff6\025\ufff6\001\002\000\010\002\ufffc\045\ufffc\050" +
    "\ufffc\001\002\000\010\002\ufff3\045\ufff3\050\ufff3\001\002" +
    "\000\006\003\117\022\116\001\002\000\004\025\ufff5\001" +
    "\002\000\010\002\ufff4\045\ufff4\050\ufff4\001\002\000\004" +
    "\025\115\001\002\000\022\003\040\005\032\021\042\040" +
    "\027\046\025\047\041\051\037\053\043\001\002\000\004" +
    "\021\106\001\002\000\014\022\uffd4\025\uffd4\027\uffd4\042" +
    "\uffd4\043\uffd4\001\002\000\012\005\032\021\042\051\037" +
    "\053\104\001\002\000\014\022\uffde\025\uffde\027\uffde\042" +
    "\uffde\043\uffde\001\002\000\014\022\uffe0\025\uffe0\027\uffe0" +
    "\042\uffe0\043\uffe0\001\002\000\004\051\103\001\002\000" +
    "\040\004\073\005\065\011\064\012\100\022\uffd6\025\uffd6" +
    "\027\uffd6\033\071\034\070\035\077\036\072\037\075\041" +
    "\066\042\uffd6\043\uffd6\001\002\000\014\022\uffdd\025\uffdd" +
    "\027\uffdd\042\uffdd\043\uffdd\001\002\000\014\022\uffd3\025" +
    "\uffd3\027\uffd3\042\uffd3\043\uffd3\001\002\000\004\025\uffaf" +
    "\001\002\000\040\004\uffa1\005\uffa1\011\uffa1\012\uffa1\022" +
    "\uffa1\025\uffa1\027\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\041\uffa1\042\uffa1\043\uffa1\001\002\000\004\025" +
    "\uffae\001\002\000\004\021\053\001\002\000\020\005\032" +
    "\021\042\040\027\046\025\047\041\051\037\053\043\001" +
    "\002\000\044\004\uffa2\005\uffa2\011\uffa2\012\uffa2\013\046" +
    "\021\045\022\uffa2\025\uffa2\027\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\041\uffa2\042\uffa2\043\uffa2\001\002" +
    "\000\020\005\032\021\042\040\027\046\025\047\041\051" +
    "\037\053\043\001\002\000\004\022\047\001\002\000\020" +
    "\005\uffdb\021\uffdb\040\uffdb\046\uffdb\047\uffdb\051\uffdb\053" +
    "\uffdb\001\002\000\014\022\uffd5\025\uffd5\027\uffd5\042\uffd5" +
    "\043\uffd5\001\002\000\014\022\uffdc\025\uffdc\027\uffdc\042" +
    "\uffdc\043\uffdc\001\002\000\004\022\052\001\002\000\014" +
    "\022\uffd8\025\uffd8\027\uffd8\042\uffd8\043\uffd8\001\002\000" +
    "\022\003\056\005\032\021\042\040\027\046\025\047\041" +
    "\051\037\053\043\001\002\000\006\022\uffc6\027\uffc6\001" +
    "\002\000\006\022\062\027\061\001\002\000\004\022\uffc9" +
    "\001\002\000\004\022\060\001\002\000\014\022\uffc8\025" +
    "\uffc8\027\uffc8\042\uffc8\043\uffc8\001\002\000\020\005\032" +
    "\021\042\040\027\046\025\047\041\051\037\053\043\001" +
    "\002\000\014\022\uffca\025\uffca\027\uffca\042\uffca\043\uffca" +
    "\001\002\000\006\022\uffc7\027\uffc7\001\002\000\014\022" +
    "\uffa4\025\uffa4\027\uffa4\042\uffa4\043\uffa4\001\002\000\020" +
    "\005\uffa5\021\uffa5\040\uffa5\046\uffa5\047\uffa5\051\uffa5\053" +
    "\uffa5\001\002\000\020\005\uffab\021\uffab\040\uffab\046\uffab" +
    "\047\uffab\051\uffab\053\uffab\001\002\000\014\022\uffd7\025" +
    "\uffd7\027\uffd7\042\uffd7\043\uffd7\001\002\000\020\005\uffa8" +
    "\021\uffa8\040\uffa8\046\uffa8\047\uffa8\051\uffa8\053\uffa8\001" +
    "\002\000\020\005\uffac\021\uffac\040\uffac\046\uffac\047\uffac" +
    "\051\uffac\053\uffac\001\002\000\020\005\uffa7\021\uffa7\040" +
    "\uffa7\046\uffa7\047\uffa7\051\uffa7\053\uffa7\001\002\000\020" +
    "\005\uffa6\021\uffa6\040\uffa6\046\uffa6\047\uffa6\051\uffa6\053" +
    "\uffa6\001\002\000\020\005\032\021\042\040\027\046\025" +
    "\047\041\051\037\053\043\001\002\000\020\005\uffa9\021" +
    "\uffa9\040\uffa9\046\uffa9\047\uffa9\051\uffa9\053\uffa9\001\002" +
    "\000\020\005\032\021\042\040\027\046\025\047\041\051" +
    "\037\053\043\001\002\000\020\005\uffaa\021\uffaa\040\uffaa" +
    "\046\uffaa\047\uffaa\051\uffaa\053\uffaa\001\002\000\014\022" +
    "\uffa3\025\uffa3\027\uffa3\042\uffa3\043\uffa3\001\002\000\014" +
    "\022\uffda\025\uffda\027\uffda\042\uffda\043\uffda\001\002\000" +
    "\014\022\uffd9\025\uffd9\027\uffd9\042\uffd9\043\uffd9\001\002" +
    "\000\040\004\uffa0\005\uffa0\011\uffa0\012\uffa0\022\uffa0\025" +
    "\uffa0\027\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\001\002\000\040\004\uffa2\005" +
    "\uffa2\011\uffa2\012\uffa2\022\uffa2\025\uffa2\027\uffa2\033\uffa2" +
    "\034\uffa2\035\uffa2\036\uffa2\037\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\001\002\000\014\022\uffdf\025\uffdf\027\uffdf\042\uffdf" +
    "\043\uffdf\001\002\000\010\003\110\022\107\053\111\001" +
    "\002\000\014\022\uffcd\025\uffcd\027\uffcd\042\uffcd\043\uffcd" +
    "\001\002\000\004\022\uffcc\001\002\000\004\022\112\001" +
    "\002\000\014\022\uffce\025\uffce\027\uffce\042\uffce\043\uffce" +
    "\001\002\000\004\022\114\001\002\000\014\022\uffcb\025" +
    "\uffcb\027\uffcb\042\uffcb\043\uffcb\001\002\000\036\002\ufff9" +
    "\005\ufff9\021\ufff9\024\ufff9\030\ufff9\032\ufff9\040\ufff9\044" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9" +
    "\001\002\000\010\003\123\023\122\025\232\001\002\000" +
    "\004\022\ufff0\001\002\000\004\022\121\001\002\000\006" +
    "\003\123\023\122\001\002\000\032\005\032\021\042\024" +
    "\125\030\134\032\127\040\027\044\133\046\025\047\041" +
    "\050\011\051\037\053\043\001\002\000\010\002\uffec\045" +
    "\uffec\050\uffec\001\002\000\010\002\uffef\045\uffef\050\uffef" +
    "\001\002\000\010\002\uffed\045\uffed\050\uffed\001\002\000" +
    "\032\005\uffe5\021\uffe5\024\uffe5\030\uffe5\032\uffe5\040\uffe5" +
    "\044\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\053\uffe5\001" +
    "\002\000\006\003\214\021\215\001\002\000\004\025\213" +
    "\001\002\000\032\005\032\021\042\024\212\030\134\032" +
    "\127\040\027\044\133\046\025\047\041\050\011\051\037" +
    "\053\043\001\002\000\032\005\uffe3\021\uffe3\024\uffe3\030" +
    "\uffe3\032\uffe3\040\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\053\uffe3\001\002\000\020\005\032\021\042\040" +
    "\027\046\025\047\041\051\037\053\043\001\002\000\006" +
    "\003\uffbe\021\uffbe\001\002\000\004\053\015\001\002\000" +
    "\032\005\uffe6\021\uffe6\024\uffe6\030\uffe6\032\uffe6\040\uffe6" +
    "\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\053\uffe6\001" +
    "\002\000\006\003\142\021\143\001\002\000\032\005\uffe1" +
    "\021\uffe1\024\uffe1\030\uffe1\032\uffe1\040\uffe1\044\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\053\uffe1\001\002\000\032" +
    "\005\uffe4\021\uffe4\024\uffe4\030\uffe4\032\uffe4\040\uffe4\044" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4\001\002" +
    "\000\004\022\uffc0\001\002\000\022\003\150\005\032\021" +
    "\042\040\027\046\025\047\041\051\037\053\043\001\002" +
    "\000\010\022\uffd0\042\177\043\176\001\002\000\004\022" +
    "\uffbd\001\002\000\010\022\uffcf\042\uffcf\043\uffcf\001\002" +
    "\000\004\022\173\001\002\000\010\003\uffc2\022\uffc4\023" +
    "\uffc2\001\002\000\006\003\155\023\154\001\002\000\004" +
    "\022\153\001\002\000\006\003\155\023\154\001\002\000" +
    "\032\005\032\021\042\024\165\030\134\032\127\040\027" +
    "\044\133\046\025\047\041\050\011\051\037\053\043\001" +
    "\002\000\002\001\002\000\034\005\uffba\021\uffba\024\uffba" +
    "\030\uffba\031\160\032\uffba\040\uffba\044\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\053\uffba\001\002\000\006\003\155" +
    "\023\154\001\002\000\006\003\uffb9\023\uffb9\001\002\000" +
    "\032\005\uffc3\021\uffc3\024\uffc3\030\uffc3\032\uffc3\040\uffc3" +
    "\044\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\053\uffc3\001" +
    "\002\000\032\005\uffbb\021\uffbb\024\uffbb\030\uffbb\032\uffbb" +
    "\040\uffbb\044\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\053" +
    "\uffbb\001\002\000\002\001\002\000\034\005\uffe8\021\uffe8" +
    "\024\uffe8\030\uffe8\031\uffe8\032\uffe8\040\uffe8\044\uffe8\046" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\053\uffe8\001\002\000\034" +
    "\005\uffea\021\uffea\024\uffea\030\uffea\031\uffea\032\uffea\040" +
    "\uffea\044\uffea\046\uffea\047\uffea\050\uffea\051\uffea\053\uffea" +
    "\001\002\000\032\005\032\021\042\024\167\030\134\032" +
    "\127\040\027\044\133\046\025\047\041\050\011\051\037" +
    "\053\043\001\002\000\034\005\uffeb\021\uffeb\024\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\040\uffeb\044\uffeb\046\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\053\uffeb\001\002\000\032\005\uffe7\021" +
    "\uffe7\024\uffe7\030\uffe7\032\uffe7\040\uffe7\044\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\053\uffe7\001\002\000\032\005" +
    "\uffc1\021\uffc1\024\uffc1\030\uffc1\032\uffc1\040\uffc1\044\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\053\uffc1\001\002\000" +
    "\006\003\155\023\154\001\002\000\006\003\uffbc\023\uffbc" +
    "\001\002\000\034\005\uffba\021\uffba\024\uffba\030\uffba\031" +
    "\160\032\uffba\040\uffba\044\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\053\uffba\001\002\000\032\005\uffc5\021\uffc5\024" +
    "\uffc5\030\uffc5\032\uffc5\040\uffc5\044\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\053\uffc5\001\002\000\020\005\032\021" +
    "\042\040\027\046\025\047\041\051\037\053\043\001\002" +
    "\000\020\005\032\021\042\040\027\046\025\047\041\051" +
    "\037\053\043\001\002\000\004\022\uffd1\001\002\000\004" +
    "\022\uffd2\001\002\000\004\022\203\001\002\000\006\003" +
    "\155\023\154\001\002\000\034\005\uffba\021\uffba\024\uffba" +
    "\030\uffba\031\160\032\uffba\040\uffba\044\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\053\uffba\001\002\000\032\005\uffbf" +
    "\021\uffbf\024\uffbf\030\uffbf\032\uffbf\040\uffbf\044\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\053\uffbf\001\002\000\006" +
    "\013\024\025\uffad\001\002\000\004\025\uffb1\001\002\000" +
    "\004\025\211\001\002\000\032\005\uffb0\021\uffb0\024\uffb0" +
    "\030\uffb0\032\uffb0\040\uffb0\044\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\053\uffb0\001\002\000\010\002\uffee\045\uffee" +
    "\050\uffee\001\002\000\032\005\uffe2\021\uffe2\024\uffe2\030" +
    "\uffe2\032\uffe2\040\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\053\uffe2\001\002\000\004\022\uffb3\001\002\000" +
    "\022\003\217\005\032\021\042\040\027\046\025\047\041" +
    "\051\037\053\043\001\002\000\004\022\225\001\002\000" +
    "\010\003\uffb5\022\uffb7\023\uffb5\001\002\000\006\003\155" +
    "\023\154\001\002\000\004\022\222\001\002\000\006\003" +
    "\155\023\154\001\002\000\032\005\uffb6\021\uffb6\024\uffb6" +
    "\030\uffb6\032\uffb6\040\uffb6\044\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\053\uffb6\001\002\000\032\005\uffb4\021\uffb4" +
    "\024\uffb4\030\uffb4\032\uffb4\040\uffb4\044\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\053\uffb4\001\002\000\006\003\155" +
    "\023\154\001\002\000\032\005\uffb8\021\uffb8\024\uffb8\030" +
    "\uffb8\032\uffb8\040\uffb8\044\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\053\uffb8\001\002\000\004\022\230\001\002\000" +
    "\006\003\155\023\154\001\002\000\032\005\uffb2\021\uffb2" +
    "\024\uffb2\030\uffb2\032\uffb2\040\uffb2\044\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\053\uffb2\001\002\000\010\002\ufff2" +
    "\045\ufff2\050\ufff2\001\002\000\010\002\ufff1\045\ufff1\050" +
    "\ufff1\001\002\000\010\002\ufffa\045\007\050\011\001\002" +
    "\000\004\002\ufffb\001\002\000\004\002\uffff\001\002\000" +
    "\004\021\020\001\002\000\010\002\ufffe\045\ufffe\050\ufffe" +
    "\001\002\000\010\002\ufffa\045\007\050\011\001\002\000" +
    "\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\014\002\007\003\011\042\005\043\003\052" +
    "\004\001\001\000\004\044\236\001\001\000\012\003\235" +
    "\042\005\043\003\052\004\001\001\000\004\044\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\021\005" +
    "\016\031\015\032\020\045\022\001\001\000\002\001\001" +
    "\000\004\054\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\025\007\034\015\035\016\033\017\030\021" +
    "\027\027\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\104\027\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\066\035\075" +
    "\036\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\025\007\034\015\050\016\033\017" +
    "\030\021\027\027\032\001\001\000\004\020\043\001\001" +
    "\000\020\006\025\007\034\015\047\016\033\017\030\021" +
    "\027\027\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\025\007\034\010\054\015\053" +
    "\016\033\017\030\021\027\027\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\025\007\034\015" +
    "\062\016\033\017\030\021\027\027\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\025\007\034\015\101\016\033\017\030\021\027" +
    "\027\032\001\001\000\002\001\001\000\020\006\025\007" +
    "\034\015\100\016\033\017\030\021\027\027\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\232\001\001\000\004\055\117\001\001\000\002\001\001" +
    "\000\004\011\123\001\001\000\040\006\025\007\034\013" +
    "\130\014\135\015\127\016\033\017\030\021\027\022\125" +
    "\023\131\025\137\027\032\042\134\050\136\052\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\006\025\007\034\014\167\015\127\016\033\017\030" +
    "\021\027\022\125\023\131\025\137\027\032\042\134\050" +
    "\136\052\140\001\001\000\002\001\001\000\020\006\025" +
    "\007\034\015\206\016\033\017\030\021\027\027\032\001" +
    "\001\000\002\001\001\000\004\044\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\201\001\001\000\026\006\025\007\034" +
    "\015\145\016\033\017\030\021\027\026\144\027\032\037" +
    "\143\046\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\171\001\001\000\006\061" +
    "\151\062\150\001\001\000\004\012\170\001\001\000\002" +
    "\001\001\000\004\012\155\001\001\000\040\006\025\007" +
    "\034\013\165\014\135\015\127\016\033\017\030\021\027" +
    "\022\125\023\131\025\137\027\032\042\134\050\136\052" +
    "\140\001\001\000\004\056\162\001\001\000\006\024\160" +
    "\051\156\001\001\000\004\012\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\025\007\034\014\167\015\127\016\033\017\030\021\027" +
    "\022\125\023\131\025\137\027\032\042\134\050\136\052" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\173\001\001\000\002\001\001\000" +
    "\006\024\174\051\156\001\001\000\002\001\001\000\024" +
    "\006\025\007\034\015\145\016\033\017\030\021\027\026" +
    "\200\027\032\037\143\001\001\000\024\006\025\007\034" +
    "\015\145\016\033\017\030\021\027\026\177\027\032\037" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\203\001\001\000\006\024\204\051" +
    "\156\001\001\000\002\001\001\000\006\032\020\045\022" +
    "\001\001\000\004\067\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\226\001\001\000\024\006\025\007\034\015\145\016" +
    "\033\017\030\021\027\026\215\027\032\037\143\001\001" +
    "\000\002\001\001\000\006\064\220\065\217\001\001\000" +
    "\004\012\223\001\001\000\002\001\001\000\004\012\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\234\042\005\043\003\052\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\021\005\016\031\237\001\001\000\004\053\240\001\001" +
    "\000\012\003\241\042\005\043\003\052\004\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static Lexer s;
    public static int errors = 0;
    public static ErrorData errorData = ErrorData.getInstance();
    public DatosArchivoController archivoController = DatosArchivoController.getInstance();
    ErrorData detectedError;
    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public PilaSemantica pilaSemantica = new PilaSemantica();
    String assemblyFile = "";
    
    /* Reporte de error encontrado. */

    public void report_error(String message,int line, int column) {
        StringBuilder m = new StringBuilder("Error");
        m.append(" en la línea "+(line+1));
        m.append(", columna "+(column+1));
        m.append(" : " + message);
        archivoController.mostrarErroresSemanticos(m.toString());
    }
    public void report_error(String message, Object info) {
        if (info instanceof String){
            errors++;
            String mensaje = ", se esperaba: " + message;
            try{
                detectedError.setId(errors);
            }catch(Exception e){
                detectedError = new ErrorData(errors, info.toString(), mensaje);
            }
            detectedError.setMessage(detectedError.getMessage() + mensaje);
            errorData.insertarError(detectedError);
        }
        else {
            StringBuilder m = new StringBuilder("Error");
            if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                if (s.left >= 0) {                
                    m.append(" en la línea "+(s.left+1));
                    if (s.right >= 0)
                        m.append(", columna "+(s.right+1));
                }
            }
            m.append(" : " + message);
            detectedError = new ErrorData(errors, info.toString(), m.toString());
        }
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        System.out.println("----------FUI YO------------");
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            s = new Lexer(new FileReader(args[0]));
            Parser p = new Parser(s);
            p.parse();
            System.out.println("\n*** Fin del parseo ***");
            System.out.println(p.assemblyFile);
            System.out.println("Total de errores = " + errors + ".");
            errors = 0;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor ::= SUBSTRACT LITERAL_ENTERO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer lit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor ::= LITERAL_ENTERO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer lit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  System.out.println("---------------CREADO-LIT---------------");
                                RegistroSemanticoVar RS_DO = new RegistroSemanticoVar("RS_DO_C",lit.toString());
                                parser.pilaSemantica.push(RS_DO);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RegistroSemanticoVar RS_DO = new RegistroSemanticoVar("RS_DO_D",i.toString());
                                System.out.println("---------------CREADO-"+i.toString()+"---------------");
                                if( parser.tablaSimbolos.get(RS_DO.getToken()) ==null){
                                    parser.report_error(" Variable '" + RS_DO.getToken() + "' no ha sido declarado.", ileft,iright); 
                                }
                                RS_DO.setValor(parser.tablaSimbolos.get(RS_DO.getToken()).getDireccion());
                                RS_DO.setDireccion(parser.tablaSimbolos.get(RS_DO.getToken()).getDireccion());
                                parser.pilaSemantica.push(RS_DO);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operacion_bin_1 ::= MINUSMINUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(p.toString(),"MenosMenos");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operacion_bin_1 ::= PLUSPLUS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"MasMas");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operador ::= SUBSTRACT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(s.toString(),"Resta");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operador ::= ADD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(a.toString(),"Suma");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"Mayor");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // comparador ::= MENORQUE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"Menor");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // comparador ::= MAYOREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"MayorIgual");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comparador ::= MENOREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"MenorIgual");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comparador ::= NOTEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"NoIgual");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comparador ::= EQUAL 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"Igual");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // validar_expr ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // validar_expr ::= ASSIGN error 
            {
              Object RESULT =null;
		 parser.report_error(" una expresión o falta ; al final.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // validar_expr ::= ASSIGN expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // return_stmt ::= RETURN expresion NT$12 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$12 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // while_statement ::= WHILE error NT$11 RPAREN bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$11 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un LPAREN al final de la condición del WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // while_statement ::= WHILE LPAREN error NT$10 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$10 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un RPAREN al final de la condición del WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // while_statement ::= WHILE LPAREN error NT$9 RPAREN bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$9 ::= 
            {
              Object RESULT =null;
 parser.report_error("una condición valida para el WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // while_statement ::= WHILE LPAREN condicion RPAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // else_stmt ::= ELSE 
            {
              Object RESULT =null;
		
                                     parser.assemblyFile += "\tJMP "+((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_IF")).getExit_label()+" \n";
                                     parser.assemblyFile += ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_IF")).getStmt_label()+": \n";
                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // else_statement ::= else_stmt bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // test_if ::= RPAREN 
            {
              Object RESULT =null;
		
                                    RegistroSemanticoVar RS_DO = (RegistroSemanticoVar)parser.pilaSemantica.pop();
                                    parser.assemblyFile+= "\tmov eax,"+RS_DO.getDireccion()+" \n"; 
                                    parser.assemblyFile+= "\tcmp eax, 0 \n"; 
                                    parser.assemblyFile+= "\tJNZ "+ ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_IF")).getStmt_label() +  "\n" ;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_if",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicion_stmt ::= condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // start_if ::= IF 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RegistroSemanticoSTMT RS_IF = new RegistroSemanticoSTMT(tipo.toString(), "RS_IF");//Crear RS_IF
                                    RS_IF.setStmt_label(parser.tablaSimbolos.getLabelName());
                                    RS_IF.setExit_label(parser.tablaSimbolos.getLabelName());
                                    parser.pilaSemantica.push(RS_IF);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("start_if",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if_statement ::= start_if error NT$8 RPAREN bloque else_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$8 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un LPAREN al final de la condición del IF.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_statement ::= start_if LPAREN error NT$7 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$7 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un RPAREN al final de la condición del IF.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_statement ::= start_if LPAREN error NT$6 RPAREN bloque else_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$6 ::= 
            {
              Object RESULT =null;
 parser.report_error(" una condición válida para el IF.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_statement ::= start_if LPAREN condicion_stmt test_if bloque else_statement 
            {
              Object RESULT =null;
		 
                                        parser.assemblyFile += ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_IF")).getExit_label()+": \n";
                                        parser.pilaSemantica.pop();
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // write_f_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // write_f_aux ::= write_f_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // write_f ::= WRITE LPAREN error NT$5 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetros incorrectos en el WRITE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // write_f ::= WRITE LPAREN write_f_aux RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // read_f ::= READ LPAREN error NT$4 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetros incorrectos en el READ.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // read_f ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // read_f ::= READ LPAREN IDENTIFICADOR RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion_2 ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion ::= condicion_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= condicion_2 OR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion ::= condicion_2 AND condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // call_function ::= write_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // call_function ::= read_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // call_function ::= IDENTIFICADOR LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= valor operacion_bin_1 
            {
              Object RESULT =null;
		 RegistroSemantico RS_OP= parser.pilaSemantica.pop();
                               RegistroSemantico RS_DO1= parser.pilaSemantica.pop();
                               String var = parser.tablaSimbolos.getVarName();
                               IOperacion op = (IOperacion)new OperacionFactory(RS_OP.getTipo()).getOp();
                               op.setOperandor(RS_DO1);
                               op.setVarReturn(var);
                               String code = op.generarCodigo();
                               parser.assemblyFile += code;
                               RegistroSemanticoVar RS_RESULT = new RegistroSemanticoVar(RS_DO1.getTipo(),var);
                               parser.pilaSemantica.push(RS_RESULT);
                               parser.tablaSimbolos.get(RS_DO1.getToken()).setDireccion(var);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= LPAREN expresion RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= valor comparador expresion 
            {
              Object RESULT =null;
		 RegistroSemantico RS_DO1= parser.pilaSemantica.pop();
                               RegistroSemantico RS_OP= parser.pilaSemantica.pop();
                               RegistroSemantico RS_DO2= parser.pilaSemantica.pop();
                               IOperacion op = (IOperacion)new OperacionFactory(RS_OP.getTipo()).getOp();
                               op.setOperandos(RS_DO1,RS_DO2);
                               op.generarCodigo();
                               //Se crea una variable donde guardar Resultado
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= valor operador expresion 
            {
              Object RESULT =null;
		 RegistroSemantico RS_DO1= parser.pilaSemantica.pop();
                               RegistroSemantico RS_OP= parser.pilaSemantica.pop();
                               RegistroSemantico RS_DO2= parser.pilaSemantica.pop();
                               System.out.println(RS_DO1.getValor());
                               String var = parser.tablaSimbolos.getVarName();
                               IOperacion op = (IOperacion)new OperacionFactory(RS_OP.getTipo()).getOp();
                               op.setOperandos(RS_DO1,RS_DO2);
                               op.setVarReturn(var);
                               String code = op.generarCodigo();
                               parser.assemblyFile += code;
                               RegistroSemanticoVar RS_RESULT = new RegistroSemanticoVar(RS_DO1.getTipo(),var);
                               parser.pilaSemantica.push(RS_RESULT);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op_asignaciones ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignacion ::= IDENTIFICADOR op_asignaciones expresion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                RegistroSemanticoVar RS_DO = (RegistroSemanticoVar) parser.pilaSemantica.pop();
                                System.out.println("---------------------"+RS_DO.getDireccion()+"------------------");
                                parser.tablaSimbolos.get(i.toString()).setDireccion(RS_DO.getDireccion());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= call_function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= EXCLAMACION exp 
            {
              Object RESULT =null;
		
                                RegistroSemanticoVar RS_DO = (RegistroSemanticoVar) parser.pilaSemantica.pop();
                                String var = parser.tablaSimbolos.getVarName();
                                IOperacion op = (IOperacion)new OperacionFactory("Not").getOp();
                                op.setOperandor(RS_DO);
                                op.setVarReturn(var);
                                String code = op.generarCodigo();
                                parser.assemblyFile += code;
                                RegistroSemanticoVar RS_RESULT = new RegistroSemanticoVar(RS_DO.getTipo(),var);
                                parser.pilaSemantica.push(RS_RESULT);

                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= return_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque ::= error NT$3 decision_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.report_error(" no se encuentra el LBRACE o expresión inválida.","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque ::= LBRACE lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque_global ::= error 
            {
              Object RESULT =null;
		 parser.report_error(" no se encuentra el LBRACE ACA .","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_global ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_global ::= LBRACE lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion ::= LPAREN error NT$2 RPAREN bloque_global 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetro incorrecto.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcion ::= LPAREN RPAREN bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_funcion ::= LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_funcion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decision_operacion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decision_operacion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // verification_part ::= validar_expr 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("verification_part",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // id_declaration ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        parser.pilaSemantica.push(new RegistroSemantico(id.toString(), "RS_ID"));//Crear RS_Tipo
                                        RESULT = id;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_declaration",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_declaration_part ::= VOID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        parser.pilaSemantica.push(new RegistroSemantico(tipo.toString(), "RS_TIPO"));//Crear RS_Tipo
                                        RESULT = tipo;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_part",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration_part ::= INT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        parser.pilaSemantica.push(new RegistroSemantico(tipo.toString(), "RS_TIPO"));//Crear RS_Tipo
                                        RESULT = tipo;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable ::= declaration_part id_declaration verification_part SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                                    System.out.println("*************************************");
                                    RegistroSemantico RS_DO = parser.pilaSemantica.pop();
                                    String id,valor;
                                    if(RS_DO.getTipo()!="RS_ID"){
                                        RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                        System.out.println("::::::::::"+RS_ID.getToken());
                                        id=RS_ID.getToken();
                                        valor= RS_DO.getValor();
                                    }else{
                                        id=RS_DO.getToken();
                                        valor="0";
                                    }
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    
                                    System.out.println("*************************************");
                                    if(parser.tablaSimbolos.get(id) == null){
                                        parser.tablaSimbolos.put(id, 
                                                                 new InfoKey("Identificador", 
                                                                              RS_TIPO.getToken(), 
                                                                              valor)); 
                                        System.out.println("DATOS TABLA SIMBOLOS");
                                        System.out.println(id);
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(id)).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(id)).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(id)).getCategoria());    
                                    }else{
                                        if(parser.tablaSimbolos.get(id).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(id).sumarDeclarado();
                                            parser.report_error(" identificador '" + id + "' ya ha sido declarado 1.", sleft,sright); 
                                        }
                                    }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // programa_c ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programa_c ::= declaration_part id_declaration decision_operacion NT$1 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                    System.out.println("*************************************");
                                    RegistroSemantico RS_DO = parser.pilaSemantica.pop(); //VALOR DE RETORNO FUNCION--VER DESPUES
                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    if(parser.tablaSimbolos.get(RS_ID.getToken()) == null ){                                    
                                        parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                                 new InfoKey("Función", 
                                                                              RS_TIPO.getToken(),RS_ID.getToken())); 
                                        System.out.println("DATOS TABLA SIMBOLOS FUNCION INT");
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());
                                    }else{
                                        if(parser.tablaSimbolos.get(RS_ID.getToken()).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(RS_ID.getToken()).sumarDeclarado();
                                            parser.report_error(" identificador '" + RS_ID.getToken() + "' ya ha sido declarado.", sleft,sright); 
                                        }
                                    }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa_c ::= function_declaration_part id_declaration decision_operacion NT$0 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    if(parser.tablaSimbolos.get(RS_ID.getToken()) == null){                                    
                                        parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                                 new InfoKey("Función", 
                                                                              RS_TIPO.getToken())); 
                                        System.out.println("DATOS TABLA SIMBOLOS FUNCION");
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());
                                    }else{
                                        if(parser.tablaSimbolos.get(RS_ID.getToken()).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(RS_ID.getToken()).sumarDeclarado();
                                            parser.report_error(" identificador '" + RS_ID.getToken() + "' ya ha sido declarado.", sleft,sright); 
                                        }
                                    }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa_c ::= variable programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

