
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 21 17:56:51 CST 2015
//----------------------------------------------------

package parser.data;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 21 17:56:51 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\003\007\000\002\003\004\000\002\003\002" +
    "\000\002\054\003\000\002\054\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\052\005\000\002" +
    "\053\003\000\002\053\003\000\002\004\006\000\002\005" +
    "\006\000\002\006\005\000\002\006\003\000\002\006\002" +
    "\000\002\007\004\000\002\013\003\000\002\014\005\000" +
    "\002\014\004\000\002\015\004\000\002\015\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\006\000\002\016\004" +
    "\000\002\016\004\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\003\000\002\017\004\000\002" +
    "\017\003\000\002\020\005\000\002\022\003\000\002\022" +
    "\003\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\003\000\002\023\006\000\002\023\005\000" +
    "\002\023\003\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\035\005\000\002\035\005\000\002\035" +
    "\003\000\002\035\003\000\002\070\003\000\002\010\007" +
    "\000\002\010\006\000\002\011\007\000\002\012\005\000" +
    "\002\012\003\000\002\025\010\000\002\025\007\000\002" +
    "\031\004\000\002\026\007\000\002\027\011\000\002\030" +
    "\007\000\002\057\007\000\002\061\003\000\002\061\002" +
    "\000\002\062\005\000\002\062\002\000\002\063\004\000" +
    "\002\063\005\000\002\063\007\000\002\063\002\000\002" +
    "\037\011\000\002\040\003\000\002\040\004\000\002\041" +
    "\003\000\002\041\004\000\002\041\004\000\002\042\006" +
    "\000\002\042\010\000\002\043\005\000\002\043\007\000" +
    "\002\032\004\000\002\033\004\000\002\034\005\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\050\005\000\002\050\004\000\002\051\004" +
    "\000\002\051\006\000\002\051\003\000\002\045\003\000" +
    "\002\045\004\000\002\046\005\000\002\046\004\000\002" +
    "\047\003\000\002\047\002\000\002\056\004\000\002\056" +
    "\002\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\064\003\000\002\064" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\010\002\ufffc\054\006\070\005\001\002\000" +
    "\010\002\ufffc\054\006\070\005\001\002\000\004\071\344" +
    "\001\002\000\004\067\337\001\002\000\004\002\001\001" +
    "\002\000\012\057\021\060\020\061\015\062\014\001\002" +
    "\000\004\002\012\001\002\000\004\002\000\001\002\000" +
    "\004\067\uffa4\001\002\000\006\057\336\067\uff9e\001\002" +
    "\000\010\057\334\061\333\067\uff99\001\002\000\004\067" +
    "\022\001\002\000\004\067\uffa5\001\002\000\004\067\uffa6" +
    "\001\002\000\004\067\uffa7\001\002\000\016\013\027\021" +
    "\032\025\uff97\027\uff97\063\034\067\033\001\002\000\010" +
    "\002\ufffc\054\006\070\005\001\002\000\006\025\uff9f\027" +
    "\uff9f\001\002\000\010\002\ufff8\054\ufff8\070\ufff8\001\002" +
    "\000\010\002\ufff7\054\ufff7\070\ufff7\001\002\000\022\005" +
    "\062\021\076\043\106\055\053\056\077\064\110\065\056" +
    "\067\177\001\002\000\006\025\327\027\036\001\002\000" +
    "\010\002\ufff9\054\ufff9\070\ufff9\001\002\000\016\022\uffef" +
    "\027\uffef\057\021\060\020\061\015\062\014\001\002\000" +
    "\010\013\027\025\uff97\027\uff97\001\002\000\012\013\027" +
    "\025\uff97\027\uff97\067\033\001\002\000\006\025\037\027" +
    "\036\001\002\000\004\067\040\001\002\000\060\002\uffa3" +
    "\005\uffa3\021\uffa3\022\uffa3\024\uffa3\030\uffa3\032\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\043\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\064\uffa3\065" +
    "\uffa3\067\uffa3\070\uffa3\001\002\000\010\013\027\025\uff97" +
    "\027\uff97\001\002\000\006\025\uffa0\027\uffa0\001\002\000" +
    "\006\025\uffa1\027\uffa1\001\002\000\006\022\ufff0\027\ufff0" +
    "\001\002\000\004\067\326\001\002\000\006\022\047\027" +
    "\046\001\002\000\012\057\021\060\020\061\015\062\014" +
    "\001\002\000\006\023\050\025\051\001\002\000\044\005" +
    "\062\021\076\024\055\030\074\032\063\033\101\034\113" +
    "\035\072\043\106\051\070\052\054\053\107\055\053\056" +
    "\077\064\110\065\056\067\111\001\002\000\010\002\ufff3" +
    "\054\ufff3\070\ufff3\001\002\000\010\002\ufff2\054\ufff2\070" +
    "\ufff2\001\002\000\004\021\317\001\002\000\004\025\316" +
    "\001\002\000\062\002\uffeb\005\uffeb\021\uffeb\022\uffeb\024" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\043\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\056\uffeb\064\uffeb\065\uffeb\067\uffeb\070\uffeb" +
    "\001\002\000\044\004\uff82\005\uff82\006\uff82\007\uff82\010" +
    "\uff82\022\uff82\025\uff82\026\uff82\027\uff82\036\uff82\037\uff82" +
    "\040\uff82\041\uff82\042\uff82\044\uff82\045\uff82\046\uff82\001" +
    "\002\000\052\005\uffe8\021\uffe8\022\uffe8\024\uffe8\030\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\043\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\056\uffe8\064\uffe8" +
    "\065\uffe8\067\uffe8\001\002\000\014\022\uffdb\025\uffdb\027" +
    "\uffdb\045\uffdb\046\uffdb\001\002\000\012\057\021\060\020" +
    "\061\015\062\014\001\002\000\004\064\312\001\002\000" +
    "\004\021\306\001\002\000\004\025\272\001\002\000\044" +
    "\005\062\021\076\024\305\030\074\032\063\033\101\034" +
    "\113\035\072\043\106\051\070\052\054\053\107\055\053" +
    "\056\077\064\110\065\056\067\111\001\002\000\052\005" +
    "\uffe7\021\uffe7\022\uffe7\024\uffe7\030\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\043\uffe7\047\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\055\uffe7\056\uffe7\064\uffe7\065\uffe7\067\uffe7" +
    "\001\002\000\014\022\uffd1\025\uffd1\027\uffd1\045\uffd1\046" +
    "\uffd1\001\002\000\022\005\062\021\076\043\106\055\053" +
    "\056\077\064\110\065\056\067\177\001\002\000\014\022" +
    "\uffdd\025\uffdd\027\uffdd\045\uffdd\046\uffdd\001\002\000\004" +
    "\021\250\001\002\000\052\005\uffe6\021\uffe6\022\uffe6\024" +
    "\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\043\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6\056" +
    "\uffe6\064\uffe6\065\uffe6\067\uffe6\001\002\000\004\021\241" +
    "\001\002\000\042\004\145\005\147\006\151\007\146\010" +
    "\150\022\uffd4\025\uffd4\027\uffd4\036\157\037\161\040\162" +
    "\041\156\042\155\044\160\045\uffd4\046\uffd4\001\002\000" +
    "\022\005\062\021\076\043\106\055\053\056\077\064\110" +
    "\065\056\067\177\001\002\000\004\021\224\001\002\000" +
    "\004\025\223\001\002\000\004\023\050\001\002\000\052" +
    "\005\uffe4\021\uffe4\022\uffe4\024\uffe4\030\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\043\uffe4\047\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\055\uffe4\056\uffe4\064\uffe4\065\uffe4\067" +
    "\uffe4\001\002\000\046\005\uffe9\021\uffe9\022\uffe9\024\uffe9" +
    "\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\043\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\055\uffe9\056\uffe9\064\uffe9\065\uffe9" +
    "\067\uffe9\001\002\000\052\005\uffde\021\uffde\022\uffde\024" +
    "\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde\043\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\055\uffde\056" +
    "\uffde\064\uffde\065\uffde\067\uffde\001\002\000\052\005\uffe5" +
    "\021\uffe5\022\uffe5\024\uffe5\030\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\043\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\053\uffe5\055\uffe5\056\uffe5\064\uffe5\065\uffe5\067\uffe5\001" +
    "\002\000\014\005\062\021\076\064\110\065\056\067\152" +
    "\001\002\000\004\025\203\001\002\000\044\004\uff83\005" +
    "\uff83\006\uff83\007\uff83\010\uff83\022\uff83\025\uff83\026\uff83" +
    "\027\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\044" +
    "\uff83\045\uff83\046\uff83\001\002\000\052\004\uff84\005\uff84" +
    "\006\uff84\007\uff84\010\uff84\013\170\014\134\015\136\016" +
    "\137\017\132\020\142\021\173\022\uff84\025\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\044\uff84\001\002\000" +
    "\052\005\uffe0\021\uffe0\022\uffe0\024\uffe0\030\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\043\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\055\uffe0\056\uffe0\064\uffe0\065\uffe0" +
    "\067\uffe0\001\002\000\004\021\116\001\002\000\014\022" +
    "\uffd0\025\uffd0\027\uffd0\045\uffd0\046\uffd0\001\002\000\052" +
    "\005\uffdf\021\uffdf\022\uffdf\024\uffdf\030\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\043\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\055\uffdf\056\uffdf\064\uffdf\065\uffdf\067" +
    "\uffdf\001\002\000\006\025\uffbb\067\117\001\002\000\016" +
    "\013\170\014\134\015\136\016\137\017\132\020\142\001" +
    "\002\000\004\022\165\001\002\000\004\025\123\001\002" +
    "\000\004\025\uffbc\001\002\000\006\025\uffb9\067\124\001" +
    "\002\000\016\036\157\037\161\040\162\041\156\042\155" +
    "\044\160\001\002\000\004\025\126\001\002\000\006\022" +
    "\uffb5\067\127\001\002\000\022\011\131\012\141\013\140" +
    "\014\134\015\136\016\137\017\132\020\142\001\002\000" +
    "\004\022\uffbd\001\002\000\004\022\uff8b\001\002\000\014" +
    "\005\uff86\021\uff86\064\uff86\065\uff86\067\uff86\001\002\000" +
    "\012\005\062\064\110\065\056\067\152\001\002\000\014" +
    "\005\uff87\021\uff87\064\uff87\065\uff87\067\uff87\001\002\000" +
    "\004\022\uffb8\001\002\000\014\005\uff89\021\uff89\064\uff89" +
    "\065\uff89\067\uff89\001\002\000\014\005\uff88\021\uff88\064" +
    "\uff88\065\uff88\067\uff88\001\002\000\004\067\143\001\002" +
    "\000\004\022\uff8a\001\002\000\014\005\uff85\021\uff85\064" +
    "\uff85\065\uff85\067\uff85\001\002\000\014\004\145\005\147" +
    "\006\151\007\146\010\150\001\002\000\012\005\062\064" +
    "\110\065\056\067\152\001\002\000\022\005\uff90\021\uff90" +
    "\043\uff90\055\uff90\056\uff90\064\uff90\065\uff90\067\uff90\001" +
    "\002\000\022\005\uff8d\021\uff8d\043\uff8d\055\uff8d\056\uff8d" +
    "\064\uff8d\065\uff8d\067\uff8d\001\002\000\022\005\uff8f\021" +
    "\uff8f\043\uff8f\055\uff8f\056\uff8f\064\uff8f\065\uff8f\067\uff8f" +
    "\001\002\000\022\005\uff8c\021\uff8c\043\uff8c\055\uff8c\056" +
    "\uff8c\064\uff8c\065\uff8c\067\uff8c\001\002\000\022\005\uff8e" +
    "\021\uff8e\043\uff8e\055\uff8e\056\uff8e\064\uff8e\065\uff8e\067" +
    "\uff8e\001\002\000\044\004\uff84\005\uff84\006\uff84\007\uff84" +
    "\010\uff84\022\uff84\025\uff84\026\uff84\027\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\042\uff84\044\uff84\045\uff84\046\uff84" +
    "\001\002\000\004\022\uffb6\001\002\000\004\022\uffb7\001" +
    "\002\000\022\005\uff93\021\uff93\043\uff93\055\uff93\056\uff93" +
    "\064\uff93\065\uff93\067\uff93\001\002\000\022\005\uff91\021" +
    "\uff91\043\uff91\055\uff91\056\uff91\064\uff91\065\uff91\067\uff91" +
    "\001\002\000\022\005\uff96\021\uff96\043\uff96\055\uff96\056" +
    "\uff96\064\uff96\065\uff96\067\uff96\001\002\000\022\005\uff95" +
    "\021\uff95\043\uff95\055\uff95\056\uff95\064\uff95\065\uff95\067" +
    "\uff95\001\002\000\022\005\uff92\021\uff92\043\uff92\055\uff92" +
    "\056\uff92\064\uff92\065\uff92\067\uff92\001\002\000\022\005" +
    "\uff94\021\uff94\043\uff94\055\uff94\056\uff94\064\uff94\065\uff94" +
    "\067\uff94\001\002\000\012\005\062\064\110\065\056\067" +
    "\152\001\002\000\004\025\uffba\001\002\000\002\001\002" +
    "\000\052\005\uffbe\021\uffbe\022\uffbe\024\uffbe\030\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\043\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\055\uffbe\056\uffbe\064\uffbe\065" +
    "\uffbe\067\uffbe\001\002\000\014\005\062\021\076\064\110" +
    "\065\056\067\152\001\002\000\014\005\uffd9\021\uffd9\064" +
    "\uffd9\065\uffd9\067\uffd9\001\002\000\014\005\uffd8\021\uffd8" +
    "\064\uffd8\065\uffd8\067\uffd8\001\002\000\004\025\uffda\001" +
    "\002\000\024\005\062\021\076\022\175\043\106\055\053" +
    "\056\077\064\110\065\056\067\177\001\002\000\006\022" +
    "\uffce\027\uffce\001\002\000\014\022\uffd2\025\uffd2\027\uffd2" +
    "\045\uffd2\046\uffd2\001\002\000\006\022\201\027\200\001" +
    "\002\000\044\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84" +
    "\021\173\022\uff84\025\uff84\027\uff84\036\uff84\037\uff84\040" +
    "\uff84\041\uff84\042\uff84\044\uff84\045\uff84\046\uff84\001\002" +
    "\000\022\005\062\021\076\043\106\055\053\056\077\064" +
    "\110\065\056\067\177\001\002\000\014\022\uffd3\025\uffd3" +
    "\027\uffd3\045\uffd3\046\uffd3\001\002\000\006\022\uffcf\027" +
    "\uffcf\001\002\000\052\005\uffaa\021\uffaa\022\uffaa\024\uffaa" +
    "\030\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\043\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\055\uffaa\056\uffaa" +
    "\064\uffaa\065\uffaa\067\uffaa\001\002\000\014\022\uffdc\025" +
    "\uffdc\027\uffdc\045\uffdc\046\uffdc\001\002\000\004\032\207" +
    "\001\002\000\054\005\uffed\021\uffed\022\uffed\024\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\043\uffed" +
    "\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\055\uffed\056" +
    "\uffed\064\uffed\065\uffed\067\uffed\001\002\000\004\021\210" +
    "\001\002\000\024\003\214\005\062\021\076\043\106\055" +
    "\053\056\077\064\110\065\056\067\177\001\002\000\010" +
    "\022\uffcb\045\220\046\217\001\002\000\010\022\uffc9\045" +
    "\uffc9\046\uffc9\001\002\000\004\022\215\001\002\000\004" +
    "\022\uffca\001\002\000\004\025\216\001\002\000\052\005" +
    "\uffbf\021\uffbf\022\uffbf\024\uffbf\030\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\043\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\055\uffbf\056\uffbf\064\uffbf\065\uffbf\067\uffbf" +
    "\001\002\000\024\003\214\005\062\021\076\043\106\055" +
    "\053\056\077\064\110\065\056\067\177\001\002\000\024" +
    "\003\214\005\062\021\076\043\106\055\053\056\077\064" +
    "\110\065\056\067\177\001\002\000\004\022\uffcc\001\002" +
    "\000\004\022\uffcd\001\002\000\052\005\uffe1\021\uffe1\022" +
    "\uffe1\024\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\043\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\055" +
    "\uffe1\056\uffe1\064\uffe1\065\uffe1\067\uffe1\001\002\000\022" +
    "\005\062\021\076\043\106\055\053\056\077\064\110\065" +
    "\056\067\177\001\002\000\006\022\uffc4\027\uffc4\001\002" +
    "\000\006\022\230\027\227\001\002\000\022\005\062\021" +
    "\076\043\106\055\053\056\077\064\110\065\056\067\177" +
    "\001\002\000\004\025\231\001\002\000\014\022\uffc6\025" +
    "\uffc6\027\uffc6\045\uffc6\046\uffc6\001\002\000\006\022\uffc5" +
    "\027\uffc5\001\002\000\004\022\234\001\002\000\014\022" +
    "\uffd5\025\uffd5\027\uffd5\045\uffd5\046\uffd5\001\002\000\022" +
    "\005\062\021\076\043\106\055\053\056\077\064\110\065" +
    "\056\067\177\001\002\000\022\005\062\021\076\043\106" +
    "\055\053\056\077\064\110\065\056\067\177\001\002\000" +
    "\014\022\uffd7\025\uffd7\027\uffd7\045\uffd7\046\uffd7\001\002" +
    "\000\014\022\uffd6\025\uffd6\027\uffd6\045\uffd6\046\uffd6\001" +
    "\002\000\024\003\214\005\062\021\076\043\106\055\053" +
    "\056\077\064\110\065\056\067\177\001\002\000\004\022" +
    "\243\001\002\000\004\023\050\001\002\000\054\005\uffc2" +
    "\021\uffc2\022\uffc2\024\uffc2\030\uffc2\031\245\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\043\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\055\uffc2\056\uffc2\064\uffc2\065\uffc2\067" +
    "\uffc2\001\002\000\004\023\050\001\002\000\052\005\uffc3" +
    "\021\uffc3\022\uffc3\024\uffc3\030\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\043\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\055\uffc3\056\uffc3\064\uffc3\065\uffc3\067\uffc3\001" +
    "\002\000\052\005\uffc1\021\uffc1\022\uffc1\024\uffc1\030\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\043\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1\064\uffc1" +
    "\065\uffc1\067\uffc1\001\002\000\012\005\062\064\110\065" +
    "\056\067\152\001\002\000\004\022\252\001\002\000\004" +
    "\023\253\001\002\000\004\047\255\001\002\000\012\024" +
    "\uffb1\047\uffb1\050\uffb1\053\107\001\002\000\012\005\062" +
    "\064\110\065\056\067\152\001\002\000\004\024\273\001" +
    "\002\000\010\024\uffb3\047\255\050\260\001\002\000\004" +
    "\026\263\001\002\000\004\024\uffb2\001\002\000\010\024" +
    "\uffaf\047\uffaf\050\uffaf\001\002\000\042\005\062\021\264" +
    "\030\074\032\063\033\101\034\113\035\072\043\106\051" +
    "\070\052\054\053\107\055\053\056\077\064\110\065\056" +
    "\067\111\001\002\000\042\005\062\021\076\030\074\032" +
    "\063\033\101\034\113\035\072\043\106\051\070\052\054" +
    "\053\107\055\053\056\077\064\110\065\056\067\111\001" +
    "\002\000\004\024\uffac\001\002\000\006\022\234\025\272" +
    "\001\002\000\044\005\062\021\076\022\270\030\074\032" +
    "\063\033\101\034\113\035\072\043\106\051\070\052\054" +
    "\053\107\055\053\056\077\064\110\065\056\067\111\001" +
    "\002\000\004\024\uffab\001\002\000\046\005\uffea\021\uffea" +
    "\022\uffea\024\uffea\030\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\043\uffea\051\uffea\052\uffea\053\uffea\055\uffea\056\uffea" +
    "\064\uffea\065\uffea\067\uffea\001\002\000\052\005\uffe2\021" +
    "\uffe2\022\uffe2\024\uffe2\030\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\043\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\055\uffe2\056\uffe2\064\uffe2\065\uffe2\067\uffe2\001\002" +
    "\000\052\005\uffb4\021\uffb4\022\uffb4\024\uffb4\030\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\043\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\055\uffb4\056\uffb4\064\uffb4\065" +
    "\uffb4\067\uffb4\001\002\000\004\026\275\001\002\000\042" +
    "\005\062\021\276\030\074\032\063\033\101\034\113\035" +
    "\072\043\106\051\070\052\054\053\107\055\053\056\077" +
    "\064\110\065\056\067\111\001\002\000\042\005\062\021" +
    "\076\030\074\032\063\033\101\034\113\035\072\043\106" +
    "\051\070\052\054\053\107\055\053\056\077\064\110\065" +
    "\056\067\111\001\002\000\012\024\uffae\047\uffae\050\uffae" +
    "\053\uffae\001\002\000\044\005\062\021\076\022\301\030" +
    "\074\032\063\033\101\034\113\035\072\043\106\051\070" +
    "\052\054\053\107\055\053\056\077\064\110\065\056\067" +
    "\111\001\002\000\012\024\uffad\047\uffad\050\uffad\053\uffad" +
    "\001\002\000\010\024\uffb0\047\uffb0\050\uffb0\001\002\000" +
    "\004\025\304\001\002\000\052\005\uffa8\021\uffa8\022\uffa8" +
    "\024\uffa8\030\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\043" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\055\uffa8" +
    "\056\uffa8\064\uffa8\065\uffa8\067\uffa8\001\002\000\062\002" +
    "\uffec\005\uffec\021\uffec\022\uffec\024\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\043\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\064\uffec\065\uffec\067\uffec\070\uffec\001\002\000\024\003" +
    "\214\005\062\021\076\043\106\055\053\056\077\064\110" +
    "\065\056\067\177\001\002\000\004\022\310\001\002\000" +
    "\004\023\050\001\002\000\052\005\uffc0\021\uffc0\022\uffc0" +
    "\024\uffc0\030\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\043" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0" +
    "\056\uffc0\064\uffc0\065\uffc0\067\uffc0\001\002\000\044\004" +
    "\uff81\005\uff81\006\uff81\007\uff81\010\uff81\022\uff81\025\uff81" +
    "\026\uff81\027\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042" +
    "\uff81\044\uff81\045\uff81\046\uff81\001\002\000\004\067\314" +
    "\001\002\000\014\013\027\025\uff97\027\uff97\063\034\067" +
    "\033\001\002\000\052\005\uffe3\021\uffe3\022\uffe3\024\uffe3" +
    "\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\043\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\055\uffe3\056\uffe3" +
    "\064\uffe3\065\uffe3\067\uffe3\001\002\000\052\005\uffa9\021" +
    "\uffa9\022\uffa9\024\uffa9\030\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\043\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\055\uffa9\056\uffa9\064\uffa9\065\uffa9\067\uffa9\001\002" +
    "\000\006\022\320\067\321\001\002\000\004\025\324\001" +
    "\002\000\004\022\322\001\002\000\004\025\323\001\002" +
    "\000\014\022\uffc8\025\uffc8\027\uffc8\045\uffc8\046\uffc8\001" +
    "\002\000\014\022\uffc7\025\uffc7\027\uffc7\045\uffc7\046\uffc7" +
    "\001\002\000\006\022\ufff1\027\ufff1\001\002\000\006\022" +
    "\uffee\027\uffee\001\002\000\060\002\uffa2\005\uffa2\021\uffa2" +
    "\022\uffa2\024\uffa2\030\uffa2\032\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\043\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\054\uffa2\055\uffa2\056\uffa2\064\uffa2\065\uffa2\067\uffa2\070" +
    "\uffa2\001\002\000\006\025\uff98\027\uff98\001\002\000\004" +
    "\002\ufffe\001\002\000\004\067\uff9b\001\002\000\006\057" +
    "\334\067\uff99\001\002\000\004\067\uff9a\001\002\000\004" +
    "\067\uff9c\001\002\000\004\067\uff9d\001\002\000\004\021" +
    "\032\001\002\000\010\002\ufffc\054\006\070\005\001\002" +
    "\000\010\002\ufffa\054\ufffa\070\ufffa\001\002\000\010\002" +
    "\ufffb\054\ufffb\070\ufffb\001\002\000\004\002\uffff\001\002" +
    "\000\006\066\347\072\346\001\002\000\010\002\ufff6\054" +
    "\ufff6\070\ufff6\001\002\000\010\002\ufff4\054\ufff4\070\ufff4" +
    "\001\002\000\010\002\ufff5\054\ufff5\070\ufff5\001\002\000" +
    "\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\012\002\010\003\006\052\003\071\007\001" +
    "\001\000\010\003\347\052\003\071\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\044" +
    "\015\045\016\046\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\030\005\024\050" +
    "\025\051\027\055\022\056\023\001\001\000\010\003\330" +
    "\052\003\071\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\066\011\113\017\327" +
    "\021\070\023\057\036\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\044\007\042\044\043\045\016" +
    "\046\012\001\001\000\004\056\041\001\001\000\006\051" +
    "\034\056\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\324\044\043\045\016\046" +
    "\012\001\001\000\004\014\051\001\001\000\046\010\066" +
    "\011\113\015\064\016\102\017\063\020\077\021\070\023" +
    "\057\025\056\026\065\027\072\030\101\032\111\033\114" +
    "\034\103\036\074\037\104\071\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\044\312\045\016\046\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\010\066\011\113\016\270\017\063\020\077\021\070" +
    "\023\057\025\056\026\065\027\072\030\101\032\111\033" +
    "\114\034\103\036\074\037\104\071\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\066\011\113\017" +
    "\302\021\070\023\057\036\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\066\235\067\234\001\001\000\016\010\066\011\113" +
    "\017\232\021\070\023\057\036\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\204\014\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\203\036\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\166\065\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\121\057\117\061\120\001" +
    "\001\000\006\022\166\065\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\124\001" +
    "\001\000\004\067\162\001\001\000\002\001\001\000\004" +
    "\063\127\001\001\000\006\064\134\065\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\143\001\001\000" +
    "\004\036\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\163" +
    "\001\001\000\002\001\001\000\004\060\165\001\001\000" +
    "\002\001\001\000\006\021\171\036\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\066\011\113\017\173\021\070\023\057\024\175\036\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\066\011\113\017\201" +
    "\021\070\023\057\036\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\010" +
    "\066\011\113\017\211\021\070\023\057\035\212\036\074" +
    "\070\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\066\011\113\017\211\021\070\023" +
    "\057\035\221\036\074\070\210\001\001\000\022\010\066" +
    "\011\113\017\211\021\070\023\057\035\220\036\074\070" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\066\011\113\012\225\017\224\021" +
    "\070\023\057\036\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\066\011\113\017\231\021\070\023" +
    "\057\036\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\066\011\113\017\237\021\070\023\057\036\074" +
    "\001\001\000\016\010\066\011\113\017\236\021\070\023" +
    "\057\036\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\010\066\011\113\017\211\021\070\023\057\035" +
    "\241\036\074\070\210\001\001\000\002\001\001\000\006" +
    "\013\243\014\205\001\001\000\004\031\245\001\001\000" +
    "\006\013\246\014\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\040\255\041\256\042\253\001\001" +
    "\000\004\032\301\001\001\000\004\036\273\001\001\000" +
    "\002\001\001\000\006\042\261\043\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\010" +
    "\066\011\113\016\264\017\063\020\077\021\070\023\057" +
    "\025\056\026\065\027\072\030\101\032\111\033\114\034" +
    "\103\036\074\037\104\071\060\001\001\000\046\010\066" +
    "\011\113\015\266\016\102\017\265\020\077\021\070\023" +
    "\057\025\056\026\065\027\072\030\101\032\111\033\114" +
    "\034\103\036\074\037\104\071\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\010\066\011\113\016\270" +
    "\017\063\020\077\021\070\023\057\025\056\026\065\027" +
    "\072\030\101\032\111\033\114\034\103\036\074\037\104" +
    "\071\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\010\066\011\113\016\276\017\063\020\077\021\070\023" +
    "\057\025\056\026\065\027\072\030\101\032\111\033\114" +
    "\034\103\036\074\037\104\071\060\001\001\000\046\010" +
    "\066\011\113\015\277\016\102\017\265\020\077\021\070" +
    "\023\057\025\056\026\065\027\072\030\101\032\111\033" +
    "\114\034\103\036\074\037\104\071\060\001\001\000\002" +
    "\001\001\000\044\010\066\011\113\016\270\017\063\020" +
    "\077\021\070\023\057\025\056\026\065\027\072\030\101" +
    "\032\111\033\114\034\103\036\074\037\104\071\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\066\011" +
    "\113\017\211\021\070\023\057\035\306\036\074\070\210" +
    "\001\001\000\002\001\001\000\006\013\310\014\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\050\314\051\027\056\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\341\005\340\054" +
    "\337\001\001\000\010\003\342\052\003\071\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\344\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : " + message);
        System.out.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            Parser p = new Parser(
                    new Lexer( new FileReader(args[0])));
            Object result = p.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // valor ::= SUBSTRACT LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valor ::= LITERAL_CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valor ::= LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operacion_bin_2 ::= MODEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operacion_bin_2 ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operacion_bin_2 ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operacion_bin_2 ::= TIMESEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operacion_bin_2 ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operacion_bin_1 ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operacion_bin_1 ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operador ::= MODULUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operador ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operador ::= SUBSTRACT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operador ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // comparador ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // comparador ::= MAYOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // comparador ::= MENOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // comparador ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // comparador ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // validar_expr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // validar_expr ::= ASSIGN expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // long_stmt_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_aux",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // long_stmt_aux ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_aux",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // long_stmt ::= LONG long_stmt_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // long_stmt ::= LONG LONG long_stmt_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // short_stmt ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // short_stmt ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lista_ids ::= validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lista_ids ::= lista_ids COMMA IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_ids ::= IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaracion_var ::= lista_ids SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declaracion_var ::= CONST lista_ids SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipo_dato ::= long_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipo_dato ::= short_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // continue_stmt ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // break_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // default_stmt ::= DEFAULT COLON LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // default_stmt ::= DEFAULT COLON sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // case_stmt ::= CASE valor COLON LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // case_stmt ::= CASE valor COLON sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lista_case ::= lista_case case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lista_case ::= case_stmt break_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lista_case ::= case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // case_body ::= lista_case default_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // case_body ::= lista_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // switch_stmt ::= SWITCH LPAREN valor RPAREN LBRACE case_body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // fin_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // fin_for ::= IDENTIFICADOR ASSIGN IDENTIFICADOR operador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // fin_for ::= IDENTIFICADOR operacion_bin_2 valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // fin_for ::= IDENTIFICADOR operacion_bin_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // medio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // medio_for ::= IDENTIFICADOR comparador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // inicio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // inicio_for ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicion_for ::= inicio_for SEMICOLON medio_for SEMICOLON fin_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_for",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // for_statement ::= FOR LPAREN condicion_for RPAREN tipo_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dowhile_statement ::= DO bloque_global WHILE LPAREN condicion RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhile_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // while_statement ::= WHILE LPAREN condicion RPAREN bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // else_statement ::= ELSE bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_statement ::= IF LPAREN condicion RPAREN bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_statement ::= IF LPAREN condicion RPAREN bloque_global else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // write_f_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // write_f_aux ::= write_f_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // write_f ::= WRITE LPAREN write_f_aux RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // read_f ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // read_f ::= READ LPAREN IDENTIFICADOR RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicion_2 ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicion ::= condicion_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicion ::= condicion_2 OR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condicion ::= condicion_2 AND condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // call_function_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function_aux",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // call_function_aux ::= call_function_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function_aux",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // call_function ::= write_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // call_function ::= read_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // call_function ::= IDENTIFICADOR LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // call_function ::= IDENTIFICADOR LPAREN call_function_aux RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= LPAREN expresion RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= valor comparador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= valor operador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op_asignaciones ::= operacion_bin_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_asignaciones ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= IDENTIFICADOR op_asignaciones exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= call_function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= EXCLAMACION exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= return_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= continue_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= break_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= asignacion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= is_constante tipo_dato IDENTIFICADOR declaracion_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= for_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= dowhile_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque ::= LBRACE lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_global ::= bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametro ::= tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_parametros ::= lista_parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcion ::= LPAREN lista_parametros RPAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def_funcion ::= LPAREN lista_parametros RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_funcion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenido_directiva ::= TEXTO_DIRECTIVA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_directiva",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenido_directiva ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_directiva",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // directiva ::= SIMBOLO_NUMERO INCLUDE contenido_directiva 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("directiva",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decision_operacion ::= declaracion_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decision_operacion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decision_operacion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decision_funcion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decision_funcion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa_c ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa_c ::= directiva programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa_c ::= is_constante tipo_dato IDENTIFICADOR decision_operacion programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa_c ::= VOID IDENTIFICADOR decision_funcion programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

