
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 19 15:28:47 CST 2015
//----------------------------------------------------

package parser.data;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.Hashtable;
import java.util.Stack;
import parser.controller.DatosArchivoController;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 19 15:28:47 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\003\000\002\047" +
    "\002\000\002\003\010\000\002\050\002\000\002\003\007" +
    "\000\002\051\002\000\002\003\007\000\002\003\002\000" +
    "\002\043\003\000\002\044\003\000\002\045\003\000\002" +
    "\046\003\000\002\031\003\000\002\031\003\000\002\004" +
    "\005\000\002\005\005\000\002\052\002\000\002\005\007" +
    "\000\002\011\006\000\002\011\004\000\002\011\003\000" +
    "\002\012\005\000\002\012\004\000\002\053\002\000\002" +
    "\012\005\000\002\033\006\000\002\033\002\000\002\013" +
    "\004\000\002\013\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\004\000\002\014\003\000\002\015\003\000" +
    "\002\015\004\000\002\015\003\000\002\015\003\000\002" +
    "\016\005\000\002\020\003\000\002\020\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\003" +
    "\000\002\021\005\000\002\021\003\000\002\021\003\000" +
    "\002\026\005\000\002\026\005\000\002\026\003\000\002" +
    "\040\003\000\002\006\006\000\002\006\005\000\002\054" +
    "\002\000\002\006\007\000\002\007\006\000\002\055\002" +
    "\000\002\007\007\000\002\010\005\000\002\010\003\000" +
    "\002\022\010\000\002\056\002\000\002\022\011\000\002" +
    "\057\002\000\002\022\007\000\002\060\002\000\002\022" +
    "\010\000\002\024\004\000\002\024\002\000\002\023\007" +
    "\000\002\061\002\000\002\023\010\000\002\062\002\000" +
    "\002\023\007\000\002\063\002\000\002\023\007\000\002" +
    "\064\002\000\002\025\006\000\002\032\004\000\002\032" +
    "\004\000\002\032\002\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\010\002\ufff9\045\006\050\010\001\002\000" +
    "\004\053\014\001\002\000\004\053\014\001\002\000\004" +
    "\053\ufff7\001\002\000\004\002\012\001\002\000\004\053" +
    "\ufff8\001\002\000\004\002\000\001\002\000\004\002\001" +
    "\001\002\000\010\013\023\021\017\025\uffb0\001\002\000" +
    "\010\013\ufff6\021\ufff6\025\ufff6\001\002\000\010\002\ufffb" +
    "\045\ufffb\050\ufffb\001\002\000\010\002\ufff3\045\ufff3\050" +
    "\ufff3\001\002\000\006\003\126\022\125\001\002\000\004" +
    "\025\122\001\002\000\004\025\ufff5\001\002\000\010\002" +
    "\ufff4\045\ufff4\050\ufff4\001\002\000\022\003\040\005\032" +
    "\021\041\040\026\046\024\047\037\051\036\053\042\001" +
    "\002\000\004\021\113\001\002\000\014\022\uffd3\025\uffd3" +
    "\027\uffd3\042\uffd3\043\uffd3\001\002\000\012\005\032\021" +
    "\041\051\036\053\055\001\002\000\014\022\uffdd\025\uffdd" +
    "\027\uffdd\042\uffdd\043\uffdd\001\002\000\014\022\uffdf\025" +
    "\uffdf\027\uffdf\042\uffdf\043\uffdf\001\002\000\042\004\101" +
    "\005\074\006\107\007\106\010\073\022\uffd5\025\uffd5\027" +
    "\uffd5\033\077\034\076\035\105\036\100\037\103\041\075" +
    "\042\uffd5\043\uffd5\001\002\000\004\051\072\001\002\000" +
    "\014\022\uffdc\025\uffdc\027\uffdc\042\uffdc\043\uffdc\001\002" +
    "\000\014\022\uffd2\025\uffd2\027\uffd2\042\uffd2\043\uffd2\001" +
    "\002\000\004\025\uffb2\001\002\000\042\004\uff9c\005\uff9c" +
    "\006\uff9c\007\uff9c\010\uff9c\022\uff9c\025\uff9c\027\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\001\002\000\004\021\061\001\002\000\004\025" +
    "\uffb1\001\002\000\020\005\032\021\041\040\026\046\024" +
    "\047\037\051\036\053\042\001\002\000\060\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\013\047\014\045\015\046" +
    "\016\050\017\043\020\053\021\052\022\uff9d\025\uff9d\027" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\001\002\000\012\005\uff9f\021\uff9f\051" +
    "\uff9f\053\uff9f\001\002\000\012\005\uffd9\021\uffd9\051\uffd9" +
    "\053\uffd9\001\002\000\012\005\uffa0\021\uffa0\051\uffa0\053" +
    "\uffa0\001\002\000\012\005\uffa2\021\uffa2\051\uffa2\053\uffa2" +
    "\001\002\000\012\005\uffda\021\uffda\051\uffda\053\uffda\001" +
    "\002\000\012\005\uffa1\021\uffa1\051\uffa1\053\uffa1\001\002" +
    "\000\012\005\032\021\041\051\036\053\055\001\002\000" +
    "\004\022\054\001\002\000\012\005\uff9e\021\uff9e\051\uff9e" +
    "\053\uff9e\001\002\000\014\022\uffd4\025\uffd4\027\uffd4\042" +
    "\uffd4\043\uffd4\001\002\000\042\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\022\uff9d\025\uff9d\027\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\001\002\000\014\022\uffdb\025\uffdb\027\uffdb\042\uffdb\043" +
    "\uffdb\001\002\000\004\022\060\001\002\000\014\022\uffd6" +
    "\025\uffd6\027\uffd6\042\uffd6\043\uffd6\001\002\000\022\003" +
    "\064\005\032\021\041\040\026\046\024\047\037\051\036" +
    "\053\042\001\002\000\006\022\uffc5\027\uffc5\001\002\000" +
    "\006\022\070\027\067\001\002\000\004\022\uffc8\001\002" +
    "\000\004\022\066\001\002\000\014\022\uffc7\025\uffc7\027" +
    "\uffc7\042\uffc7\043\uffc7\001\002\000\020\005\032\021\041" +
    "\040\026\046\024\047\037\051\036\053\042\001\002\000" +
    "\014\022\uffc9\025\uffc9\027\uffc9\042\uffc9\043\uffc9\001\002" +
    "\000\006\022\uffc6\027\uffc6\001\002\000\042\004\uff9b\005" +
    "\uff9b\006\uff9b\007\uff9b\010\uff9b\022\uff9b\025\uff9b\027\uff9b" +
    "\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\001\002\000\020\005\uffa5\021\uffa5\040\uffa5" +
    "\046\uffa5\047\uffa5\051\uffa5\053\uffa5\001\002\000\020\005" +
    "\uffa8\021\uffa8\040\uffa8\046\uffa8\047\uffa8\051\uffa8\053\uffa8" +
    "\001\002\000\020\005\uffae\021\uffae\040\uffae\046\uffae\047" +
    "\uffae\051\uffae\053\uffae\001\002\000\020\005\uffab\021\uffab" +
    "\040\uffab\046\uffab\047\uffab\051\uffab\053\uffab\001\002\000" +
    "\020\005\uffaf\021\uffaf\040\uffaf\046\uffaf\047\uffaf\051\uffaf" +
    "\053\uffaf\001\002\000\020\005\uffaa\021\uffaa\040\uffaa\046" +
    "\uffaa\047\uffaa\051\uffaa\053\uffaa\001\002\000\020\005\uffa9" +
    "\021\uffa9\040\uffa9\046\uffa9\047\uffa9\051\uffa9\053\uffa9\001" +
    "\002\000\020\005\032\021\041\040\026\046\024\047\037" +
    "\051\036\053\042\001\002\000\020\005\uffac\021\uffac\040" +
    "\uffac\046\uffac\047\uffac\051\uffac\053\uffac\001\002\000\020" +
    "\005\032\021\041\040\026\046\024\047\037\051\036\053" +
    "\042\001\002\000\020\005\uffad\021\uffad\040\uffad\046\uffad" +
    "\047\uffad\051\uffad\053\uffad\001\002\000\020\005\uffa6\021" +
    "\uffa6\040\uffa6\046\uffa6\047\uffa6\051\uffa6\053\uffa6\001\002" +
    "\000\020\005\uffa7\021\uffa7\040\uffa7\046\uffa7\047\uffa7\051" +
    "\uffa7\053\uffa7\001\002\000\014\022\uffd8\025\uffd8\027\uffd8" +
    "\042\uffd8\043\uffd8\001\002\000\014\022\uffd7\025\uffd7\027" +
    "\uffd7\042\uffd7\043\uffd7\001\002\000\014\022\uffde\025\uffde" +
    "\027\uffde\042\uffde\043\uffde\001\002\000\010\003\115\022" +
    "\114\053\116\001\002\000\014\022\uffcc\025\uffcc\027\uffcc" +
    "\042\uffcc\043\uffcc\001\002\000\004\022\uffcb\001\002\000" +
    "\004\022\117\001\002\000\014\022\uffcd\025\uffcd\027\uffcd" +
    "\042\uffcd\043\uffcd\001\002\000\004\022\121\001\002\000" +
    "\014\022\uffca\025\uffca\027\uffca\042\uffca\043\uffca\001\002" +
    "\000\010\002\uffff\045\uffff\050\uffff\001\002\000\010\002" +
    "\ufff9\045\006\050\010\001\002\000\004\002\ufffe\001\002" +
    "\000\010\003\132\023\131\025\237\001\002\000\004\022" +
    "\ufff0\001\002\000\004\022\130\001\002\000\006\003\132" +
    "\023\131\001\002\000\032\005\uffe6\021\uffe6\024\134\030" +
    "\uffe6\032\uffe6\040\uffe6\044\uffe6\046\uffe6\047\uffe6\050\136" +
    "\051\uffe6\053\uffe6\001\002\000\010\002\uffec\045\uffec\050" +
    "\uffec\001\002\000\010\002\uffef\045\uffef\050\uffef\001\002" +
    "\000\010\002\uffed\045\uffed\050\uffed\001\002\000\026\005" +
    "\032\021\041\030\150\032\143\040\026\044\147\046\024" +
    "\047\037\051\036\053\042\001\002\000\004\053\137\001" +
    "\002\000\006\013\023\025\uffb0\001\002\000\004\025\141" +
    "\001\002\000\026\005\uffe7\021\uffe7\030\uffe7\032\uffe7\040" +
    "\uffe7\044\uffe7\046\uffe7\047\uffe7\051\uffe7\053\uffe7\001\002" +
    "\000\030\005\uffe3\021\uffe3\024\uffe3\030\uffe3\032\uffe3\040" +
    "\uffe3\044\uffe3\046\uffe3\047\uffe3\051\uffe3\053\uffe3\001\002" +
    "\000\006\003\221\021\222\001\002\000\030\005\032\021" +
    "\041\024\220\030\150\032\143\040\026\044\147\046\024" +
    "\047\037\051\036\053\042\001\002\000\004\025\217\001" +
    "\002\000\030\005\uffe2\021\uffe2\024\uffe2\030\uffe2\032\uffe2" +
    "\040\uffe2\044\uffe2\046\uffe2\047\uffe2\051\uffe2\053\uffe2\001" +
    "\002\000\020\005\032\021\041\040\026\046\024\047\037" +
    "\051\036\053\042\001\002\000\006\003\153\021\154\001" +
    "\002\000\030\005\uffe4\021\uffe4\024\uffe4\030\uffe4\032\uffe4" +
    "\040\uffe4\044\uffe4\046\uffe4\047\uffe4\051\uffe4\053\uffe4\001" +
    "\002\000\030\005\uffe0\021\uffe0\024\uffe0\030\uffe0\032\uffe0" +
    "\040\uffe0\044\uffe0\046\uffe0\047\uffe0\051\uffe0\053\uffe0\001" +
    "\002\000\004\022\uffbf\001\002\000\022\003\160\005\032" +
    "\021\041\040\026\046\024\047\037\051\036\053\042\001" +
    "\002\000\010\022\uffcf\042\205\043\204\001\002\000\010" +
    "\022\uffce\042\uffce\043\uffce\001\002\000\004\022\201\001" +
    "\002\000\010\003\uffc1\022\uffc3\023\uffc1\001\002\000\006" +
    "\003\165\023\164\001\002\000\004\022\163\001\002\000" +
    "\006\003\165\023\164\001\002\000\030\005\032\021\041" +
    "\024\174\030\150\032\143\040\026\044\147\046\024\047" +
    "\037\051\036\053\042\001\002\000\002\001\002\000\032" +
    "\005\uffbc\021\uffbc\024\uffbc\030\uffbc\031\167\032\uffbc\040" +
    "\uffbc\044\uffbc\046\uffbc\047\uffbc\051\uffbc\053\uffbc\001\002" +
    "\000\006\003\165\023\164\001\002\000\030\005\uffc2\021" +
    "\uffc2\024\uffc2\030\uffc2\032\uffc2\040\uffc2\044\uffc2\046\uffc2" +
    "\047\uffc2\051\uffc2\053\uffc2\001\002\000\030\005\uffbd\021" +
    "\uffbd\024\uffbd\030\uffbd\032\uffbd\040\uffbd\044\uffbd\046\uffbd" +
    "\047\uffbd\051\uffbd\053\uffbd\001\002\000\002\001\002\000" +
    "\032\005\uffe8\021\uffe8\024\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\040\uffe8\044\uffe8\046\uffe8\047\uffe8\051\uffe8\053\uffe8\001" +
    "\002\000\032\005\uffea\021\uffea\024\uffea\030\uffea\031\uffea" +
    "\032\uffea\040\uffea\044\uffea\046\uffea\047\uffea\051\uffea\053" +
    "\uffea\001\002\000\030\005\032\021\041\024\176\030\150" +
    "\032\143\040\026\044\147\046\024\047\037\051\036\053" +
    "\042\001\002\000\032\005\uffeb\021\uffeb\024\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\040\uffeb\044\uffeb\046\uffeb\047\uffeb\051" +
    "\uffeb\053\uffeb\001\002\000\030\005\uffe5\021\uffe5\024\uffe5" +
    "\030\uffe5\032\uffe5\040\uffe5\044\uffe5\046\uffe5\047\uffe5\051" +
    "\uffe5\053\uffe5\001\002\000\030\005\uffc0\021\uffc0\024\uffc0" +
    "\030\uffc0\032\uffc0\040\uffc0\044\uffc0\046\uffc0\047\uffc0\051" +
    "\uffc0\053\uffc0\001\002\000\006\003\165\023\164\001\002" +
    "\000\032\005\uffbc\021\uffbc\024\uffbc\030\uffbc\031\167\032" +
    "\uffbc\040\uffbc\044\uffbc\046\uffbc\047\uffbc\051\uffbc\053\uffbc" +
    "\001\002\000\030\005\uffc4\021\uffc4\024\uffc4\030\uffc4\032" +
    "\uffc4\040\uffc4\044\uffc4\046\uffc4\047\uffc4\051\uffc4\053\uffc4" +
    "\001\002\000\020\005\032\021\041\040\026\046\024\047" +
    "\037\051\036\053\042\001\002\000\020\005\032\021\041" +
    "\040\026\046\024\047\037\051\036\053\042\001\002\000" +
    "\004\022\uffd0\001\002\000\004\022\uffd1\001\002\000\004" +
    "\022\211\001\002\000\006\003\165\023\164\001\002\000" +
    "\032\005\uffbc\021\uffbc\024\uffbc\030\uffbc\031\167\032\uffbc" +
    "\040\uffbc\044\uffbc\046\uffbc\047\uffbc\051\uffbc\053\uffbc\001" +
    "\002\000\030\005\uffbe\021\uffbe\024\uffbe\030\uffbe\032\uffbe" +
    "\040\uffbe\044\uffbe\046\uffbe\047\uffbe\051\uffbe\053\uffbe\001" +
    "\002\000\004\025\uffb4\001\002\000\004\025\216\001\002" +
    "\000\030\005\uffb3\021\uffb3\024\uffb3\030\uffb3\032\uffb3\040" +
    "\uffb3\044\uffb3\046\uffb3\047\uffb3\051\uffb3\053\uffb3\001\002" +
    "\000\030\005\uffe1\021\uffe1\024\uffe1\030\uffe1\032\uffe1\040" +
    "\uffe1\044\uffe1\046\uffe1\047\uffe1\051\uffe1\053\uffe1\001\002" +
    "\000\010\002\uffee\045\uffee\050\uffee\001\002\000\004\022" +
    "\uffb6\001\002\000\022\003\224\005\032\021\041\040\026" +
    "\046\024\047\037\051\036\053\042\001\002\000\004\022" +
    "\232\001\002\000\010\003\uffb8\022\uffba\023\uffb8\001\002" +
    "\000\004\022\230\001\002\000\006\003\165\023\164\001" +
    "\002\000\030\005\uffb7\021\uffb7\024\uffb7\030\uffb7\032\uffb7" +
    "\040\uffb7\044\uffb7\046\uffb7\047\uffb7\051\uffb7\053\uffb7\001" +
    "\002\000\006\003\165\023\164\001\002\000\030\005\uffb9" +
    "\021\uffb9\024\uffb9\030\uffb9\032\uffb9\040\uffb9\044\uffb9\046" +
    "\uffb9\047\uffb9\051\uffb9\053\uffb9\001\002\000\006\003\165" +
    "\023\164\001\002\000\030\005\uffbb\021\uffbb\024\uffbb\030" +
    "\uffbb\032\uffbb\040\uffbb\044\uffbb\046\uffbb\047\uffbb\051\uffbb" +
    "\053\uffbb\001\002\000\004\022\235\001\002\000\006\003" +
    "\165\023\164\001\002\000\030\005\uffb5\021\uffb5\024\uffb5" +
    "\030\uffb5\032\uffb5\040\uffb5\044\uffb5\046\uffb5\047\uffb5\051" +
    "\uffb5\053\uffb5\001\002\000\010\002\ufff2\045\ufff2\050\ufff2" +
    "\001\002\000\010\002\ufff1\045\ufff1\050\ufff1\001\002\000" +
    "\010\002\ufff9\045\006\050\010\001\002\000\004\002\ufffa" +
    "\001\002\000\004\021\017\001\002\000\010\002\ufffd\045" +
    "\ufffd\050\ufffd\001\002\000\010\002\ufff9\045\006\050\010" +
    "\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\012\002\006\003\010\043\004\044\003\001" +
    "\001\000\004\045\242\001\001\000\004\045\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\021\005\015" +
    "\031\014\032\020\046\017\001\001\000\002\001\001\000" +
    "\004\051\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\024\007\033\015\034\016\032\017\027\021\026" +
    "\027\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\111\027\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\103\037\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\024\007\033\015\056\016\032\017\027\021\026" +
    "\027\030\001\001\000\006\020\050\035\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\055\027\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\024\007\033" +
    "\010\062\015\061\016\032\017\027\021\026\027\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\024\007\033\015\070\016\032\017\027\021\026\027\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\024\007\033\015\110\016\032" +
    "\017\027\021\026\027\030\001\001\000\002\001\001\000" +
    "\020\006\024\007\033\015\107\016\032\017\027\021\026" +
    "\027\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\122\001\001\000" +
    "\010\003\123\043\004\044\003\001\001\000\002\001\001" +
    "\000\004\011\237\001\001\000\004\052\126\001\001\000" +
    "\002\001\001\000\004\011\132\001\001\000\004\033\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\024\007\033\013\143\014\150\015\144" +
    "\016\032\017\027\021\026\022\141\023\145\025\151\027" +
    "\030\001\001\000\002\001\001\000\004\032\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\024\007\033\014\176\015\144" +
    "\016\032\017\027\021\026\022\141\023\145\025\151\027" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\024\007\033\015\213\016\032\017\027\021\026\027" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\207\001\001\000\024\006\024\007" +
    "\033\015\155\016\032\017\027\021\026\026\156\027\030" +
    "\040\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\056\161\057\160\001\001\000\004" +
    "\012\177\001\001\000\002\001\001\000\004\012\165\001" +
    "\001\000\032\006\024\007\033\013\174\014\150\015\144" +
    "\016\032\017\027\021\026\022\141\023\145\025\151\027" +
    "\030\001\001\000\004\053\171\001\001\000\004\024\167" +
    "\001\001\000\004\012\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\024\007\033\014\176\015" +
    "\144\016\032\017\027\021\026\022\141\023\145\025\151" +
    "\027\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\201\001\001\000\004\024\202" +
    "\001\001\000\002\001\001\000\024\006\024\007\033\015" +
    "\155\016\032\017\027\021\026\026\206\027\030\040\154" +
    "\001\001\000\024\006\024\007\033\015\155\016\032\017" +
    "\027\021\026\026\205\027\030\040\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\211\001\001\000\004\024\212\001\001\000\002\001\001" +
    "\000\004\064\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\233" +
    "\001\001\000\024\006\024\007\033\015\155\016\032\017" +
    "\027\021\026\026\222\027\030\040\154\001\001\000\002" +
    "\001\001\000\006\061\224\062\225\001\001\000\002\001" +
    "\001\000\004\012\226\001\001\000\002\001\001\000\004" +
    "\012\230\001\001\000\002\001\001\000\004\012\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\241\043\004\044\003\001\001\000\002" +
    "\001\001\000\010\004\021\005\015\031\243\001\001\000" +
    "\004\050\244\001\001\000\010\003\245\043\004\044\003" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static Lexer s;
    public static int errors = 0;
    public static ErrorData errorData = ErrorData.getInstance();
    public DatosArchivoController archivoController = DatosArchivoController.getInstance();
    ErrorData detectedError;
    public Hashtable<String, InfoKey> tablaSimbolos = new Hashtable<String, InfoKey>();
    public Stack<RegistroSemantico> pilaSemantica = new Stack<>();
    
    /* Reporte de error encontrado. */

    public void report_error(String message,int line, int column) {
        StringBuilder m = new StringBuilder("Error");
        m.append(" en la línea "+(line+1));
        m.append(", columna "+(column+1));
        m.append(" : " + message);
        archivoController.mostrarErroresSemanticos(m.toString());
    }
    public void report_error(String message, Object info) {
        if (info instanceof String){
            errors++;
            String mensaje = ", se esperaba: " + message;
            try{
                detectedError.setId(errors);
            }catch(Exception e){
                detectedError = new ErrorData(errors, info.toString(), mensaje);
            }
            detectedError.setMessage(detectedError.getMessage() + mensaje);
            errorData.insertarError(detectedError);
        }
        else {
            StringBuilder m = new StringBuilder("Error");
            if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                if (s.left >= 0) {                
                    m.append(" en la línea "+(s.left+1));
                    if (s.right >= 0)
                        m.append(", columna "+(s.right+1));
                }
            }
            m.append(" : " + message);
            detectedError = new ErrorData(errors, info.toString(), m.toString());
        }
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        System.out.println("----------FUI YO------------");
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            s = new Lexer(new FileReader(args[0]));
            Parser p = new Parser(s);
            p.parse();
            System.out.println("\n*** Fin del parseo ***");
            System.out.println("Total de errores = " + errors + ".");
            errors = 0;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valor ::= SUBSTRACT LITERAL_ENTERO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer lit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor ::= LITERAL_ENTERO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer lit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operacion_bin_2 ::= MODEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operacion_bin_2 ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operacion_bin_2 ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operacion_bin_2 ::= TIMESEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operacion_bin_2 ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operacion_bin_1 ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operacion_bin_1 ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operador ::= MODULUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operador ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operador ::= SUBSTRACT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operador ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comparador ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comparador ::= MAYOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comparador ::= MENOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comparador ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparador ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // validar_expr ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // validar_expr ::= ASSIGN error 
            {
              Object RESULT =null;
		 parser.report_error(" una expresión o falta ; al final.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // validar_expr ::= ASSIGN expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // return_stmt ::= RETURN expresion NT$13 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$13 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // while_statement ::= WHILE error NT$12 RPAREN bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$12 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un LPAREN al final de la condición del WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // while_statement ::= WHILE LPAREN error NT$11 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$11 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un RPAREN al final de la condición del WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // while_statement ::= WHILE LPAREN error NT$10 RPAREN bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$10 ::= 
            {
              Object RESULT =null;
 parser.report_error("una condición valida para el WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // while_statement ::= WHILE LPAREN condicion RPAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // else_statement ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if_statement ::= IF error NT$9 RPAREN bloque else_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$9 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un LPAREN al final de la condición del IF.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_statement ::= IF LPAREN error NT$8 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$8 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un RPAREN al final de la condición del IF.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_statement ::= IF LPAREN error NT$7 RPAREN bloque else_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$7 ::= 
            {
              Object RESULT =null;
 parser.report_error(" una condición válida para el IF.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_statement ::= IF LPAREN condicion RPAREN bloque else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // write_f_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // write_f_aux ::= write_f_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // write_f ::= WRITE LPAREN error NT$6 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$6 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetros incorrectos en el WRITE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // write_f ::= WRITE LPAREN write_f_aux RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // read_f ::= READ LPAREN error NT$5 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetros incorrectos en el READ.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // read_f ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // read_f ::= READ LPAREN IDENTIFICADOR RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicion_2 ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion ::= condicion_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion ::= condicion_2 OR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= condicion_2 AND condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // call_function ::= write_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // call_function ::= read_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // call_function ::= IDENTIFICADOR LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= valor 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= LPAREN expresion RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= valor comparador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= valor operador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_asignaciones ::= operacion_bin_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_asignaciones ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion ::= IDENTIFICADOR op_asignaciones exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= call_function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= EXCLAMACION exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= exp 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= return_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_var_interna ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var_interna",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_var_interna ::= INT IDENTIFICADOR validar_expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var_interna",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque ::= error NT$4 decision_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.report_error(" no se encuentra el LBRACE o expresión inválida.","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque ::= LBRACE lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque_global ::= error 
            {
              Object RESULT =null;
		 parser.report_error(" no se encuentra el LBRACE .","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_global ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_global ::= LBRACE declaracion_var_interna lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion ::= LPAREN error NT$3 RPAREN bloque_global 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetro incorrecto.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcion ::= LPAREN RPAREN bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_funcion ::= LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_funcion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decision_operacion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decision_operacion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // verification_part ::= validar_expr 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        RegistroSemantico tmp = parser.pilaSemantica.pop();
                                        tmp.setValor(exp.toString());
                                        parser.pilaSemantica.push(tmp);//Volver a insertar valor modificado
                                        RESULT = exp;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("verification_part",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // id_declaration ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        parser.pilaSemantica.push(new RegistroSemantico(id.toString(), "RS_ID"));//Crear RS_Tipo
                                        RESULT = id;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_declaration",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_declaration_part ::= VOID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        parser.pilaSemantica.push(new RegistroSemantico(tipo.toString(), "RS_TIPO"));//Crear RS_Tipo
                                        RESULT = tipo;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_part",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration_part ::= INT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        parser.pilaSemantica.push(new RegistroSemantico(tipo.toString(), "RS_TIPO"));//Crear RS_Tipo
                                        RESULT = tipo;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // programa_c ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // programa_c ::= declaration_part id_declaration decision_operacion NT$2 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    if(parser.tablaSimbolos.get(RS_ID.getToken()) == null){                                    
                                        parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                                 new InfoKey("Función", 
                                                                              RS_TIPO.getToken())); 
                                        System.out.println("DATOS TABLA SIMBOLOS");
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());
                                    }else{
                                        if(parser.tablaSimbolos.get(RS_ID.getToken()).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(RS_ID.getToken()).sumarDeclarado();
                                            parser.report_error(" identificador '" + RS_ID.getToken() + "' ya ha sido declarado.", sleft,sright); 
                                        }
                                    }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa_c ::= function_declaration_part id_declaration decision_operacion NT$1 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    if(parser.tablaSimbolos.get(RS_ID.getToken()) == null){                                    
                                        parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                                 new InfoKey("Función", 
                                                                              RS_TIPO.getToken())); 
                                        System.out.println("DATOS TABLA SIMBOLOS");
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());
                                    }else{
                                        if(parser.tablaSimbolos.get(RS_ID.getToken()).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(RS_ID.getToken()).sumarDeclarado();
                                            parser.report_error(" identificador '" + RS_ID.getToken() + "' ya ha sido declarado.", sleft,sright); 
                                        }
                                    }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa_c ::= declaration_part id_declaration verification_part SEMICOLON NT$0 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    if(parser.tablaSimbolos.get(RS_ID.getToken()) == null){
                                        parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                                 new InfoKey("Identificador", 
                                                                              RS_TIPO.getToken(), 
                                                                              RS_ID.getValor())); 
                                        System.out.println("DATOS TABLA SIMBOLOS");
                                        System.out.println(RS_ID.getToken());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());    
                                    }else{
                                        if(parser.tablaSimbolos.get(RS_ID.getToken()).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(RS_ID.getToken()).sumarDeclarado();
                                            parser.report_error(" identificador '" + RS_ID.getToken() + "' ya ha sido declarado 1.", sleft,sright); 
                                        }
                                    }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

