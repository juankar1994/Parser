
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 24 15:38:36 CST 2015
//----------------------------------------------------

package parser.data;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 24 15:38:36 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\265\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\006\000\002\003\003\000\002\052\006" +
    "\000\002\052\006\000\002\074\002\000\002\052\007\000" +
    "\002\075\002\000\002\052\007\000\002\076\002\000\002" +
    "\052\006\000\002\053\003\000\002\053\003\000\002\004" +
    "\006\000\002\005\006\000\002\077\002\000\002\005\007" +
    "\000\002\006\005\000\002\006\003\000\002\006\002\000" +
    "\002\007\004\000\002\013\006\000\002\013\004\000\002" +
    "\100\002\000\002\013\005\000\002\014\005\000\002\014" +
    "\004\000\002\101\002\000\002\014\005\000\002\055\006" +
    "\000\002\055\002\000\002\015\004\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\004\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\102\002" +
    "\000\002\016\005\000\002\017\003\000\002\017\004\000" +
    "\002\017\003\000\002\017\003\000\002\020\005\000\002" +
    "\022\003\000\002\022\003\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\003\000\002\023\006" +
    "\000\002\023\005\000\002\023\003\000\002\023\003\000" +
    "\002\024\005\000\002\024\003\000\002\070\003\000\002" +
    "\070\002\000\002\035\005\000\002\035\005\000\002\035" +
    "\003\000\002\067\003\000\002\010\006\000\002\010\005" +
    "\000\002\103\002\000\002\010\007\000\002\011\006\000" +
    "\002\104\002\000\002\011\007\000\002\012\005\000\002" +
    "\012\003\000\002\025\010\000\002\105\002\000\002\025" +
    "\011\000\002\106\002\000\002\025\007\000\002\107\002" +
    "\000\002\025\010\000\002\031\004\000\002\031\002\000" +
    "\002\026\007\000\002\110\002\000\002\026\010\000\002" +
    "\111\002\000\002\026\007\000\002\112\002\000\002\026" +
    "\007\000\002\027\011\000\002\113\002\000\002\027\012" +
    "\000\002\114\002\000\002\027\011\000\002\115\002\000" +
    "\002\027\011\000\002\030\007\000\002\116\002\000\002" +
    "\030\010\000\002\117\002\000\002\030\007\000\002\120" +
    "\002\000\002\030\007\000\002\057\003\000\002\057\003" +
    "\000\002\056\007\000\002\060\003\000\002\060\002\000" +
    "\002\061\005\000\002\061\002\000\002\062\004\000\002" +
    "\062\005\000\002\062\007\000\002\062\002\000\002\037" +
    "\011\000\002\121\002\000\002\037\012\000\002\122\002" +
    "\000\002\037\011\000\002\123\002\000\002\037\011\000" +
    "\002\040\003\000\002\040\004\000\002\040\002\000\002" +
    "\041\003\000\002\041\004\000\002\041\004\000\002\042" +
    "\006\000\002\042\010\000\002\043\005\000\002\043\007" +
    "\000\002\032\004\000\002\033\004\000\002\034\005\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\050\004\000\002\051\004\000\002\051" +
    "\006\000\002\051\005\000\002\124\002\000\002\051\005" +
    "\000\002\045\003\000\002\045\004\000\002\046\005\000" +
    "\002\046\004\000\002\047\003\000\002\047\002\000\002" +
    "\054\004\000\002\125\002\000\002\054\006\000\002\054" +
    "\002\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\063\003\000\002\063" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\020\003\014\054\010\057\004\060\016\061" +
    "\005\062\017\063\020\001\002\000\006\003\uff76\067\uff76" +
    "\001\002\000\012\003\uff67\057\u0143\061\u0141\067\uff67\001" +
    "\002\000\006\003\uff73\067\uff73\001\002\000\004\002\000" +
    "\001\002\000\006\003\u013a\067\u013b\001\002\000\004\002" +
    "\u0139\001\002\000\026\002\ufffd\003\ufffd\025\ufffd\027\ufffd" +
    "\054\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\067\ufffd\001" +
    "\002\000\006\003\uff74\067\uff74\001\002\000\006\021\ufff6" +
    "\067\ufff8\001\002\000\006\003\022\067\150\001\002\000" +
    "\006\003\uff75\067\uff75\001\002\000\010\003\uff6c\057\147" +
    "\067\uff6c\001\002\000\012\057\004\060\016\061\005\062" +
    "\017\001\002\000\006\003\022\067\023\001\002\000\020" +
    "\003\uff6e\054\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\063" +
    "\uff6e\001\002\000\012\013\033\025\uff63\027\uff63\067\uff63" +
    "\001\002\000\010\025\030\027\027\067\031\001\002\000" +
    "\020\003\014\054\010\057\004\060\016\061\005\062\017" +
    "\063\020\001\002\000\026\002\ufffe\003\ufffe\025\ufffe\027" +
    "\ufffe\054\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\067\ufffe" +
    "\001\002\000\004\067\142\001\002\000\060\003\uff72\005" +
    "\uff72\021\uff72\030\uff72\032\uff72\033\uff72\034\uff72\035\uff72" +
    "\043\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056" +
    "\uff72\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72\064\uff72" +
    "\065\uff72\067\uff72\001\002\000\012\013\033\025\uff63\027" +
    "\uff63\067\uff63\001\002\000\010\025\uff6f\027\uff6f\067\uff6f" +
    "\001\002\000\024\003\050\005\041\021\052\043\037\055" +
    "\034\056\051\064\047\065\035\067\053\001\002\000\004" +
    "\021\133\001\002\000\046\004\uff4e\005\uff4e\006\uff4e\007" +
    "\uff4e\010\uff4e\022\uff4e\025\uff4e\026\uff4e\027\uff4e\036\uff4e" +
    "\037\uff4e\040\uff4e\041\uff4e\042\uff4e\044\uff4e\045\uff4e\046" +
    "\uff4e\067\uff4e\001\002\000\016\022\uffc6\025\uffc6\027\uffc6" +
    "\045\uffc6\046\uffc6\067\uffc6\001\002\000\014\005\041\021" +
    "\052\064\047\065\035\067\073\001\002\000\016\022\uffd1" +
    "\025\uffd1\027\uffd1\045\uffd1\046\uffd1\067\uffd1\001\002\000" +
    "\004\064\131\001\002\000\016\022\uffd3\025\uffd3\027\uffd3" +
    "\045\uffd3\046\uffd3\067\uffd3\001\002\000\044\004\120\005" +
    "\113\006\126\007\125\010\112\022\uffc9\025\uffc9\027\uffc9" +
    "\036\116\037\115\040\124\041\117\042\121\044\114\045" +
    "\uffc9\046\uffc9\067\uffc9\001\002\000\016\022\uffd0\025\uffd0" +
    "\027\uffd0\045\uffd0\046\uffd0\067\uffd0\001\002\000\016\022" +
    "\uffc5\025\uffc5\027\uffc5\045\uffc5\046\uffc5\067\uffc5\001\002" +
    "\000\010\025\uff66\027\uff66\067\uff66\001\002\000\046\004" +
    "\uff4f\005\uff4f\006\uff4f\007\uff4f\010\uff4f\022\uff4f\025\uff4f" +
    "\026\uff4f\027\uff4f\036\uff4f\037\uff4f\040\uff4f\041\uff4f\042" +
    "\uff4f\044\uff4f\045\uff4f\046\uff4f\067\uff4f\001\002\000\020" +
    "\003\uff65\054\uff65\057\uff65\060\uff65\061\uff65\062\uff65\063" +
    "\uff65\001\002\000\004\021\077\001\002\000\022\005\041" +
    "\021\052\043\037\055\034\056\051\064\047\065\035\067" +
    "\053\001\002\000\062\004\uff50\005\uff50\006\uff50\007\uff50" +
    "\010\uff50\013\060\014\056\015\057\016\061\017\054\020" +
    "\064\021\063\022\uff50\025\uff50\027\uff50\036\uff50\037\uff50" +
    "\040\uff50\041\uff50\042\uff50\044\uff50\045\uff50\046\uff50\067" +
    "\uff50\001\002\000\014\005\uff52\021\uff52\064\uff52\065\uff52" +
    "\067\uff52\001\002\000\014\005\uffcd\021\uffcd\064\uffcd\065" +
    "\uffcd\067\uffcd\001\002\000\014\005\uff53\021\uff53\064\uff53" +
    "\065\uff53\067\uff53\001\002\000\014\005\uff55\021\uff55\064" +
    "\uff55\065\uff55\067\uff55\001\002\000\014\005\uffce\021\uffce" +
    "\064\uffce\065\uffce\067\uffce\001\002\000\014\005\uff54\021" +
    "\uff54\064\uff54\065\uff54\067\uff54\001\002\000\014\005\041" +
    "\021\052\064\047\065\035\067\073\001\002\000\024\005" +
    "\041\021\052\022\066\043\037\055\034\056\051\064\047" +
    "\065\035\067\053\001\002\000\014\005\uff51\021\uff51\064" +
    "\uff51\065\uff51\067\uff51\001\002\000\006\022\uffc3\027\uffc3" +
    "\001\002\000\016\022\uffc7\025\uffc7\027\uffc7\045\uffc7\046" +
    "\uffc7\067\uffc7\001\002\000\006\022\071\027\070\001\002" +
    "\000\022\005\041\021\052\043\037\055\034\056\051\064" +
    "\047\065\035\067\053\001\002\000\016\022\uffc8\025\uffc8" +
    "\027\uffc8\045\uffc8\046\uffc8\067\uffc8\001\002\000\006\022" +
    "\uffc4\027\uffc4\001\002\000\046\004\uff50\005\uff50\006\uff50" +
    "\007\uff50\010\uff50\022\uff50\025\uff50\026\uff50\027\uff50\036" +
    "\uff50\037\uff50\040\uff50\041\uff50\042\uff50\044\uff50\045\uff50" +
    "\046\uff50\067\uff50\001\002\000\016\022\uffcf\025\uffcf\027" +
    "\uffcf\045\uffcf\046\uffcf\067\uffcf\001\002\000\004\022\076" +
    "\001\002\000\016\022\uffca\025\uffca\027\uffca\045\uffca\046" +
    "\uffca\067\uffca\001\002\000\024\003\102\005\041\021\052" +
    "\043\037\055\034\056\051\064\047\065\035\067\053\001" +
    "\002\000\006\022\uffb4\027\uffb4\001\002\000\006\022\106" +
    "\027\105\001\002\000\004\022\uffb7\001\002\000\004\022" +
    "\104\001\002\000\016\022\uffb6\025\uffb6\027\uffb6\045\uffb6" +
    "\046\uffb6\067\uffb6\001\002\000\022\005\041\021\052\043" +
    "\037\055\034\056\051\064\047\065\035\067\053\001\002" +
    "\000\016\022\uffb8\025\uffb8\027\uffb8\045\uffb8\046\uffb8\067" +
    "\uffb8\001\002\000\006\022\uffb5\027\uffb5\001\002\000\020" +
    "\003\014\054\010\057\004\060\016\061\005\062\017\063" +
    "\020\001\002\000\010\025\uff64\027\uff64\067\uff64\001\002" +
    "\000\022\005\uff58\021\uff58\043\uff58\055\uff58\056\uff58\064" +
    "\uff58\065\uff58\067\uff58\001\002\000\022\005\uff5b\021\uff5b" +
    "\043\uff5b\055\uff5b\056\uff5b\064\uff5b\065\uff5b\067\uff5b\001" +
    "\002\000\022\005\uff61\021\uff61\043\uff61\055\uff61\056\uff61" +
    "\064\uff61\065\uff61\067\uff61\001\002\000\022\005\uff5e\021" +
    "\uff5e\043\uff5e\055\uff5e\056\uff5e\064\uff5e\065\uff5e\067\uff5e" +
    "\001\002\000\022\005\uff62\021\uff62\043\uff62\055\uff62\056" +
    "\uff62\064\uff62\065\uff62\067\uff62\001\002\000\022\005\uff5d" +
    "\021\uff5d\043\uff5d\055\uff5d\056\uff5d\064\uff5d\065\uff5d\067" +
    "\uff5d\001\002\000\022\005\uff5c\021\uff5c\043\uff5c\055\uff5c" +
    "\056\uff5c\064\uff5c\065\uff5c\067\uff5c\001\002\000\022\005" +
    "\uff5f\021\uff5f\043\uff5f\055\uff5f\056\uff5f\064\uff5f\065\uff5f" +
    "\067\uff5f\001\002\000\022\005\041\021\052\043\037\055" +
    "\034\056\051\064\047\065\035\067\053\001\002\000\022" +
    "\005\041\021\052\043\037\055\034\056\051\064\047\065" +
    "\035\067\053\001\002\000\022\005\uff60\021\uff60\043\uff60" +
    "\055\uff60\056\uff60\064\uff60\065\uff60\067\uff60\001\002\000" +
    "\022\005\uff59\021\uff59\043\uff59\055\uff59\056\uff59\064\uff59" +
    "\065\uff59\067\uff59\001\002\000\022\005\uff5a\021\uff5a\043" +
    "\uff5a\055\uff5a\056\uff5a\064\uff5a\065\uff5a\067\uff5a\001\002" +
    "\000\016\022\uffcc\025\uffcc\027\uffcc\045\uffcc\046\uffcc\067" +
    "\uffcc\001\002\000\016\022\uffcb\025\uffcb\027\uffcb\045\uffcb" +
    "\046\uffcb\067\uffcb\001\002\000\046\004\uff4d\005\uff4d\006" +
    "\uff4d\007\uff4d\010\uff4d\022\uff4d\025\uff4d\026\uff4d\027\uff4d" +
    "\036\uff4d\037\uff4d\040\uff4d\041\uff4d\042\uff4d\044\uff4d\045" +
    "\uff4d\046\uff4d\067\uff4d\001\002\000\016\022\uffd2\025\uffd2" +
    "\027\uffd2\045\uffd2\046\uffd2\067\uffd2\001\002\000\010\003" +
    "\135\022\134\067\136\001\002\000\016\022\uffbb\025\uffbb" +
    "\027\uffbb\045\uffbb\046\uffbb\067\uffbb\001\002\000\004\022" +
    "\uffba\001\002\000\004\022\137\001\002\000\016\022\uffbc" +
    "\025\uffbc\027\uffbc\045\uffbc\046\uffbc\067\uffbc\001\002\000" +
    "\004\022\141\001\002\000\016\022\uffb9\025\uffb9\027\uffb9" +
    "\045\uffb9\046\uffb9\067\uffb9\001\002\000\012\013\033\025" +
    "\uff63\027\uff63\067\uff63\001\002\000\010\025\uff70\027\uff70" +
    "\067\uff70\001\002\000\010\025\uff71\027\uff71\067\uff71\001" +
    "\002\000\020\003\014\054\010\057\004\060\016\061\005" +
    "\062\017\063\020\001\002\000\010\025\uff6d\027\uff6d\067" +
    "\uff6d\001\002\000\006\003\uff6b\067\uff6b\001\002\000\014" +
    "\013\033\021\155\025\uff63\027\uff63\067\uff63\001\002\000" +
    "\020\003\014\054\010\057\004\060\016\061\005\062\017" +
    "\063\020\001\002\000\026\002\uffff\003\uffff\025\uffff\027" +
    "\uffff\054\uffff\057\uffff\060\uffff\061\uffff\062\uffff\067\uffff" +
    "\001\002\000\016\003\014\054\010\057\004\060\016\061" +
    "\005\062\017\001\002\000\016\003\ufff3\054\ufff3\057\ufff3" +
    "\060\ufff3\061\ufff3\062\ufff3\001\002\000\020\003\160\022" +
    "\uffec\027\uffec\057\004\060\016\061\005\062\017\001\002" +
    "\000\016\003\ufff4\054\ufff4\057\ufff4\060\ufff4\061\ufff4\062" +
    "\ufff4\001\002\000\006\022\uffed\027\uffed\001\002\000\004" +
    "\022\ufff0\001\002\000\004\067\u012d\001\002\000\006\022" +
    "\164\027\163\001\002\000\012\057\004\060\016\061\005" +
    "\062\017\001\002\000\010\003\167\023\165\025\166\001" +
    "\002\000\060\003\uffe1\005\uffe1\021\uffe1\024\174\030\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\043\uffe1\051\uffe1\052" +
    "\uffe1\053\uffe1\055\uffe1\056\uffe1\057\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\063\173\064\uffe1\065\uffe1\067\uffe1\001\002\000" +
    "\016\003\ufff2\054\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2" +
    "\001\002\000\020\003\uffe8\054\uffe8\057\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\001\002\000\016\003\ufff1\054\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\062\ufff1\001\002\000\020\003" +
    "\014\054\010\057\004\060\016\061\005\062\017\063\020" +
    "\001\002\000\016\003\uffe7\054\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\001\002\000\012\057\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\001\002\000\016\003\uffe9\054\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\062\uffe9\001\002\000\044\003\222\005\041" +
    "\021\052\030\212\032\204\033\214\034\224\035\211\043" +
    "\037\051\210\052\202\053\221\055\034\056\051\064\047" +
    "\065\035\067\053\001\002\000\012\057\004\060\016\061" +
    "\005\062\017\001\002\000\006\003\022\067\023\001\002" +
    "\000\056\003\uffe1\005\uffe1\021\uffe1\030\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\043\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\055\uffe1\056\uffe1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063" +
    "\173\064\uffe1\065\uffe1\067\uffe1\001\002\000\044\003\uffe2" +
    "\005\uffe2\021\uffe2\030\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\043\uffe2\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2" +
    "\064\uffe2\065\uffe2\067\uffe2\001\002\000\004\025\u012b\001" +
    "\002\000\054\003\uffde\005\uffde\021\uffde\022\uffde\024\uffde" +
    "\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde\043\uffde\047" +
    "\uffde\050\uffde\051\uffde\052\uffde\053\uffde\055\uffde\056\uffde" +
    "\064\uffde\065\uffde\067\uffde\001\002\000\006\003\u011d\021" +
    "\u011e\001\002\000\004\025\u0102\001\002\000\046\003\222" +
    "\005\041\021\052\024\u011c\030\212\032\204\033\214\034" +
    "\224\035\211\043\037\051\210\052\202\053\221\055\034" +
    "\056\051\064\047\065\035\067\053\001\002\000\054\003" +
    "\uffdd\005\uffdd\021\uffdd\022\uffdd\024\uffdd\030\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\043\uffdd\047\uffdd\050\uffdd\051" +
    "\uffdd\052\uffdd\053\uffdd\055\uffdd\056\uffdd\064\uffdd\065\uffdd" +
    "\067\uffdd\001\002\000\022\005\041\021\052\043\037\055" +
    "\034\056\051\064\047\065\035\067\053\001\002\000\006" +
    "\003\360\021\361\001\002\000\006\003\335\021\336\001" +
    "\002\000\054\003\uffdc\005\uffdc\021\uffdc\022\uffdc\024\uffdc" +
    "\030\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\043\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc" +
    "\064\uffdc\065\uffdc\067\uffdc\001\002\000\006\003\261\023" +
    "\257\001\002\000\054\003\uffda\005\uffda\021\uffda\022\uffda" +
    "\024\uffda\030\uffda\032\uffda\033\uffda\034\uffda\035\uffda\043" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\055\uffda" +
    "\056\uffda\064\uffda\065\uffda\067\uffda\001\002\000\050\003" +
    "\uffdf\005\uffdf\021\uffdf\022\uffdf\024\uffdf\030\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\043\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\055\uffdf\056\uffdf\064\uffdf\065\uffdf\067\uffdf\001\002" +
    "\000\054\003\uffd6\005\uffd6\021\uffd6\022\uffd6\024\uffd6\030" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\043\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6\064" +
    "\uffd6\065\uffd6\067\uffd6\001\002\000\054\003\uffdb\005\uffdb" +
    "\021\uffdb\022\uffdb\024\uffdb\030\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\043\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\055\uffdb\056\uffdb\064\uffdb\065\uffdb\067\uffdb\001" +
    "\002\000\004\025\306\001\002\000\044\003\uffd5\005\uffd5" +
    "\021\uffd5\030\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\043" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\055\uffd5\056\uffd5\064\uffd5" +
    "\065\uffd5\067\uffd5\001\002\000\054\003\uffd8\005\uffd8\021" +
    "\uffd8\022\uffd8\024\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\043\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\055\uffd8\056\uffd8\064\uffd8\065\uffd8\067\uffd8\001\002" +
    "\000\006\003\226\021\227\001\002\000\054\003\uffd7\005" +
    "\uffd7\021\uffd7\022\uffd7\024\uffd7\030\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\043\uffd7\047\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\055\uffd7\056\uffd7\064\uffd7\065\uffd7\067\uffd7" +
    "\001\002\000\004\022\uff99\001\002\000\010\003\230\025" +
    "\uff91\067\231\001\002\000\012\003\uff97\022\uff9b\023\uff97" +
    "\025\uff97\001\002\000\016\013\060\014\056\015\057\016" +
    "\061\017\054\020\064\001\002\000\004\022\256\001\002" +
    "\000\004\025\235\001\002\000\004\025\uff92\001\002\000" +
    "\006\025\uff8f\067\236\001\002\000\016\036\116\037\115" +
    "\040\124\041\117\042\121\044\114\001\002\000\004\025" +
    "\240\001\002\000\006\022\uff8b\067\241\001\002\000\022" +
    "\011\243\012\247\013\246\014\056\015\057\016\061\017" +
    "\054\020\064\001\002\000\004\022\uff93\001\002\000\004" +
    "\022\uff57\001\002\000\012\005\041\064\047\065\035\067" +
    "\073\001\002\000\004\022\uff8e\001\002\000\004\067\250" +
    "\001\002\000\004\022\uff56\001\002\000\014\004\120\005" +
    "\113\006\126\007\125\010\112\001\002\000\012\005\041" +
    "\064\047\065\035\067\073\001\002\000\004\022\uff8c\001" +
    "\002\000\004\022\uff8d\001\002\000\012\005\041\064\047" +
    "\065\035\067\073\001\002\000\004\025\uff90\001\002\000" +
    "\010\003\261\023\257\025\260\001\002\000\046\003\222" +
    "\005\041\021\052\024\270\030\212\032\204\033\214\034" +
    "\224\035\211\043\037\051\210\052\202\053\221\055\034" +
    "\056\051\064\047\065\035\067\053\001\002\000\054\003" +
    "\uff94\005\uff94\021\uff94\022\uff94\024\uff94\030\uff94\032\uff94" +
    "\033\uff94\034\uff94\035\uff94\043\uff94\047\uff94\050\uff94\051" +
    "\uff94\052\uff94\053\uff94\055\uff94\056\uff94\064\uff94\065\uff94" +
    "\067\uff94\001\002\000\016\003\uffe4\054\uffe4\057\uffe4\060" +
    "\uffe4\061\uffe4\062\uffe4\001\002\000\054\003\uff9c\005\uff9c" +
    "\021\uff9c\022\uff9c\024\uff9c\030\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\043\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c" +
    "\053\uff9c\055\uff9c\056\uff9c\064\uff9c\065\uff9c\067\uff9c\001" +
    "\002\000\054\003\uff95\005\uff95\021\uff95\022\uff95\024\uff95" +
    "\030\uff95\032\uff95\033\uff95\034\uff95\035\uff95\043\uff95\047" +
    "\uff95\050\uff95\051\uff95\052\uff95\053\uff95\055\uff95\056\uff95" +
    "\064\uff95\065\uff95\067\uff95\001\002\000\016\003\014\054" +
    "\010\057\004\060\016\061\005\062\017\001\002\000\056" +
    "\003\uffe3\005\uffe3\021\uffe3\022\uffe3\024\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\043\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\055\uffe3\056\uffe3\064" +
    "\uffe3\065\uffe3\067\uffe3\001\002\000\004\067\267\001\002" +
    "\000\004\021\155\001\002\000\056\003\uffe5\005\uffe5\021" +
    "\uffe5\022\uffe5\024\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\043\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\055\uffe5\056\uffe5\064\uffe5\065\uffe5\067\uffe5" +
    "\001\002\000\046\003\222\005\041\021\052\024\272\030" +
    "\212\032\204\033\214\034\224\035\211\043\037\051\210" +
    "\052\202\053\221\055\034\056\051\064\047\065\035\067" +
    "\053\001\002\000\056\003\uffe6\005\uffe6\021\uffe6\022\uffe6" +
    "\024\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\043\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\055\uffe6\056\uffe6\064\uffe6\065\uffe6\067\uffe6\001\002\000" +
    "\050\003\uffe0\005\uffe0\021\uffe0\022\uffe0\024\uffe0\030\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\043\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\055\uffe0\056\uffe0\064\uffe0\065\uffe0\067\uffe0" +
    "\001\002\000\010\003\261\023\257\025\260\001\002\000" +
    "\004\022\276\001\002\000\010\003\261\023\257\025\260" +
    "\001\002\000\054\003\uff9a\005\uff9a\021\uff9a\022\uff9a\024" +
    "\uff9a\030\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\043\uff9a" +
    "\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\055\uff9a\056" +
    "\uff9a\064\uff9a\065\uff9a\067\uff9a\001\002\000\054\003\uff96" +
    "\005\uff96\021\uff96\022\uff96\024\uff96\030\uff96\032\uff96\033" +
    "\uff96\034\uff96\035\uff96\043\uff96\047\uff96\050\uff96\051\uff96" +
    "\052\uff96\053\uff96\055\uff96\056\uff96\064\uff96\065\uff96\067" +
    "\uff96\001\002\000\004\022\302\001\002\000\010\003\261" +
    "\023\257\025\260\001\002\000\054\003\uff98\005\uff98\021" +
    "\uff98\022\uff98\024\uff98\030\uff98\032\uff98\033\uff98\034\uff98" +
    "\035\uff98\043\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053" +
    "\uff98\055\uff98\056\uff98\064\uff98\065\uff98\067\uff98\001\002" +
    "\000\044\003\222\005\041\021\052\030\212\032\204\033" +
    "\214\034\224\035\211\043\037\051\210\052\202\053\221" +
    "\055\034\056\051\064\047\065\035\067\053\001\002\000" +
    "\054\003\uffd4\005\uffd4\021\uffd4\022\uffd4\024\uffd4\030\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\043\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4\056\uffd4\064\uffd4" +
    "\065\uffd4\067\uffd4\001\002\000\054\003\uff79\005\uff79\021" +
    "\uff79\022\uff79\024\uff79\030\uff79\032\uff79\033\uff79\034\uff79" +
    "\035\uff79\043\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053" +
    "\uff79\055\uff79\056\uff79\064\uff79\065\uff79\067\uff79\001\002" +
    "\000\004\032\310\001\002\000\006\003\311\021\312\001" +
    "\002\000\004\022\uff9e\001\002\000\024\003\316\005\041" +
    "\021\052\043\037\055\034\056\051\064\047\065\035\067" +
    "\053\001\002\000\010\022\uffbe\045\327\046\326\001\002" +
    "\000\004\022\324\001\002\000\010\022\uffbd\045\uffbd\046" +
    "\uffbd\001\002\000\006\022\uffa2\025\uffa0\001\002\000\004" +
    "\025\323\001\002\000\004\022\321\001\002\000\004\025" +
    "\322\001\002\000\054\003\uffa1\005\uffa1\021\uffa1\022\uffa1" +
    "\024\uffa1\030\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\043" +
    "\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\055\uffa1" +
    "\056\uffa1\064\uffa1\065\uffa1\067\uffa1\001\002\000\054\003" +
    "\uff9f\005\uff9f\021\uff9f\022\uff9f\024\uff9f\030\uff9f\032\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\043\uff9f\047\uff9f\050\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\055\uff9f\056\uff9f\064\uff9f\065\uff9f" +
    "\067\uff9f\001\002\000\004\025\325\001\002\000\054\003" +
    "\uffa3\005\uffa3\021\uffa3\022\uffa3\024\uffa3\030\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\043\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\055\uffa3\056\uffa3\064\uffa3\065\uffa3" +
    "\067\uffa3\001\002\000\022\005\041\021\052\043\037\055" +
    "\034\056\051\064\047\065\035\067\053\001\002\000\022" +
    "\005\041\021\052\043\037\055\034\056\051\064\047\065" +
    "\035\067\053\001\002\000\004\022\uffbf\001\002\000\004" +
    "\022\uffc0\001\002\000\004\022\333\001\002\000\004\025" +
    "\334\001\002\000\054\003\uff9d\005\uff9d\021\uff9d\022\uff9d" +
    "\024\uff9d\030\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\043" +
    "\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\055\uff9d" +
    "\056\uff9d\064\uff9d\065\uff9d\067\uff9d\001\002\000\004\022" +
    "\uffae\001\002\000\024\003\340\005\041\021\052\043\037" +
    "\055\034\056\051\064\047\065\035\067\053\001\002\000" +
    "\004\022\351\001\002\000\010\003\uffb0\022\uffb2\023\uffb0" +
    "\001\002\000\006\003\261\023\257\001\002\000\004\022" +
    "\343\001\002\000\006\003\261\023\257\001\002\000\056" +
    "\003\uffab\005\uffab\021\uffab\022\uffab\024\uffab\030\uffab\031" +
    "\345\032\uffab\033\uffab\034\uffab\035\uffab\043\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\055\uffab\056\uffab\064" +
    "\uffab\065\uffab\067\uffab\001\002\000\006\003\261\023\257" +
    "\001\002\000\054\003\uffb1\005\uffb1\021\uffb1\022\uffb1\024" +
    "\uffb1\030\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\043\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\055\uffb1\056" +
    "\uffb1\064\uffb1\065\uffb1\067\uffb1\001\002\000\054\003\uffac" +
    "\005\uffac\021\uffac\022\uffac\024\uffac\030\uffac\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\043\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\055\uffac\056\uffac\064\uffac\065\uffac\067" +
    "\uffac\001\002\000\054\003\uffaf\005\uffaf\021\uffaf\022\uffaf" +
    "\024\uffaf\030\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\043" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\055\uffaf" +
    "\056\uffaf\064\uffaf\065\uffaf\067\uffaf\001\002\000\006\003" +
    "\261\023\257\001\002\000\056\003\uffab\005\uffab\021\uffab" +
    "\022\uffab\024\uffab\030\uffab\031\345\032\uffab\033\uffab\034" +
    "\uffab\035\uffab\043\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\055\uffab\056\uffab\064\uffab\065\uffab\067\uffab\001" +
    "\002\000\054\003\uffb3\005\uffb3\021\uffb3\022\uffb3\024\uffb3" +
    "\030\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\043\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\055\uffb3\056\uffb3" +
    "\064\uffb3\065\uffb3\067\uffb3\001\002\000\004\022\355\001" +
    "\002\000\006\003\261\023\257\001\002\000\056\003\uffab" +
    "\005\uffab\021\uffab\022\uffab\024\uffab\030\uffab\031\345\032" +
    "\uffab\033\uffab\034\uffab\035\uffab\043\uffab\047\uffab\050\uffab" +
    "\051\uffab\052\uffab\053\uffab\055\uffab\056\uffab\064\uffab\065" +
    "\uffab\067\uffab\001\002\000\054\003\uffad\005\uffad\021\uffad" +
    "\022\uffad\024\uffad\030\uffad\032\uffad\033\uffad\034\uffad\035" +
    "\uffad\043\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\055\uffad\056\uffad\064\uffad\065\uffad\067\uffad\001\002\000" +
    "\004\022\uff87\001\002\000\014\003\362\005\041\064\047" +
    "\065\035\067\073\001\002\000\006\022\uff89\023\uff85\001" +
    "\002\000\004\022\364\001\002\000\004\023\365\001\002" +
    "\000\006\024\uff81\047\367\001\002\000\012\024\uff80\047" +
    "\uff80\050\uff80\053\221\001\002\000\012\005\041\064\047" +
    "\065\035\067\073\001\002\000\004\024\u0104\001\002\000" +
    "\010\024\uff83\047\367\050\372\001\002\000\004\026\375" +
    "\001\002\000\004\024\uff82\001\002\000\010\024\uff7e\047" +
    "\uff7e\050\uff7e\001\002\000\044\003\222\005\041\021\376" +
    "\030\212\032\204\033\214\034\224\035\211\043\037\051" +
    "\210\052\202\053\221\055\034\056\051\064\047\065\035" +
    "\067\053\001\002\000\044\003\222\005\041\021\052\030" +
    "\212\032\204\033\214\034\224\035\211\043\037\051\210" +
    "\052\202\053\221\055\034\056\051\064\047\065\035\067" +
    "\053\001\002\000\004\024\uff7b\001\002\000\046\003\222" +
    "\005\041\021\052\022\u0103\030\212\032\204\033\214\034" +
    "\224\035\211\043\037\051\210\052\202\053\221\055\034" +
    "\056\051\064\047\065\035\067\053\001\002\000\006\022" +
    "\076\025\u0102\001\002\000\054\003\uffd9\005\uffd9\021\uffd9" +
    "\022\uffd9\024\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\043\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\055\uffd9\056\uffd9\064\uffd9\065\uffd9\067\uffd9\001\002\000" +
    "\004\024\uff7a\001\002\000\054\003\uff8a\005\uff8a\021\uff8a" +
    "\022\uff8a\024\uff8a\030\uff8a\032\uff8a\033\uff8a\034\uff8a\035" +
    "\uff8a\043\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a" +
    "\055\uff8a\056\uff8a\064\uff8a\065\uff8a\067\uff8a\001\002\000" +
    "\004\026\u0106\001\002\000\044\003\222\005\041\021\u0107" +
    "\030\212\032\204\033\214\034\224\035\211\043\037\051" +
    "\210\052\202\053\221\055\034\056\051\064\047\065\035" +
    "\067\053\001\002\000\044\003\222\005\041\021\052\030" +
    "\212\032\204\033\214\034\224\035\211\043\037\051\210" +
    "\052\202\053\221\055\034\056\051\064\047\065\035\067" +
    "\053\001\002\000\012\024\uff7d\047\uff7d\050\uff7d\053\uff7d" +
    "\001\002\000\046\003\222\005\041\021\052\022\u010a\030" +
    "\212\032\204\033\214\034\224\035\211\043\037\051\210" +
    "\052\202\053\221\055\034\056\051\064\047\065\035\067" +
    "\053\001\002\000\012\024\uff7c\047\uff7c\050\uff7c\053\uff7c" +
    "\001\002\000\010\024\uff7f\047\uff7f\050\uff7f\001\002\000" +
    "\004\022\u0111\001\002\000\004\023\u010e\001\002\000\006" +
    "\024\uff81\047\367\001\002\000\004\024\u0110\001\002\000" +
    "\054\003\uff84\005\uff84\021\uff84\022\uff84\024\uff84\030\uff84" +
    "\032\uff84\033\uff84\034\uff84\035\uff84\043\uff84\047\uff84\050" +
    "\uff84\051\uff84\052\uff84\053\uff84\055\uff84\056\uff84\064\uff84" +
    "\065\uff84\067\uff84\001\002\000\004\023\u0112\001\002\000" +
    "\006\024\uff81\047\367\001\002\000\004\024\u0114\001\002" +
    "\000\054\003\uff88\005\uff88\021\uff88\022\uff88\024\uff88\030" +
    "\uff88\032\uff88\033\uff88\034\uff88\035\uff88\043\uff88\047\uff88" +
    "\050\uff88\051\uff88\052\uff88\053\uff88\055\uff88\056\uff88\064" +
    "\uff88\065\uff88\067\uff88\001\002\000\004\022\u0116\001\002" +
    "\000\004\023\u0117\001\002\000\006\024\uff81\047\367\001" +
    "\002\000\004\024\u0119\001\002\000\054\003\uff86\005\uff86" +
    "\021\uff86\022\uff86\024\uff86\030\uff86\032\uff86\033\uff86\034" +
    "\uff86\035\uff86\043\uff86\047\uff86\050\uff86\051\uff86\052\uff86" +
    "\053\uff86\055\uff86\056\uff86\064\uff86\065\uff86\067\uff86\001" +
    "\002\000\004\025\u011b\001\002\000\054\003\uff77\005\uff77" +
    "\021\uff77\022\uff77\024\uff77\030\uff77\032\uff77\033\uff77\034" +
    "\uff77\035\uff77\043\uff77\047\uff77\050\uff77\051\uff77\052\uff77" +
    "\053\uff77\055\uff77\056\uff77\064\uff77\065\uff77\067\uff77\001" +
    "\002\000\016\003\uffea\054\uffea\057\uffea\060\uffea\061\uffea" +
    "\062\uffea\001\002\000\004\022\uffa5\001\002\000\024\003" +
    "\u0120\005\041\021\052\043\037\055\034\056\051\064\047" +
    "\065\035\067\053\001\002\000\004\022\u0126\001\002\000" +
    "\010\003\uffa7\022\uffa9\023\uffa7\001\002\000\006\003\261" +
    "\023\257\001\002\000\004\022\u0123\001\002\000\006\003" +
    "\261\023\257\001\002\000\054\003\uffa8\005\uffa8\021\uffa8" +
    "\022\uffa8\024\uffa8\030\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\043\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\055\uffa8\056\uffa8\064\uffa8\065\uffa8\067\uffa8\001\002\000" +
    "\054\003\uffa6\005\uffa6\021\uffa6\022\uffa6\024\uffa6\030\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\043\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\055\uffa6\056\uffa6\064\uffa6" +
    "\065\uffa6\067\uffa6\001\002\000\006\003\261\023\257\001" +
    "\002\000\054\003\uffaa\005\uffaa\021\uffaa\022\uffaa\024\uffaa" +
    "\030\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\043\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\055\uffaa\056\uffaa" +
    "\064\uffaa\065\uffaa\067\uffaa\001\002\000\004\022\u0129\001" +
    "\002\000\006\003\261\023\257\001\002\000\054\003\uffa4" +
    "\005\uffa4\021\uffa4\022\uffa4\024\uffa4\030\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\043\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\055\uffa4\056\uffa4\064\uffa4\065\uffa4\067" +
    "\uffa4\001\002\000\054\003\uff78\005\uff78\021\uff78\022\uff78" +
    "\024\uff78\030\uff78\032\uff78\033\uff78\034\uff78\035\uff78\043" +
    "\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78\055\uff78" +
    "\056\uff78\064\uff78\065\uff78\067\uff78\001\002\000\006\022" +
    "\uffee\027\uffee\001\002\000\006\022\uffeb\027\uffeb\001\002" +
    "\000\004\022\u012f\001\002\000\006\003\167\023\165\001" +
    "\002\000\016\003\uffef\054\uffef\057\uffef\060\uffef\061\uffef" +
    "\062\uffef\001\002\000\076\002\ufffc\003\ufffc\005\ufffc\021" +
    "\ufffc\022\ufffc\024\ufffc\025\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\035\ufffc\043\ufffc\047\ufffc\050" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\057\ufffc\060\ufffc\061\ufffc\062\ufffc\064\ufffc\065\ufffc\067" +
    "\ufffc\001\002\000\004\021\155\001\002\000\004\067\u0134" +
    "\001\002\000\004\021\155\001\002\000\016\003\014\054" +
    "\010\057\004\060\016\061\005\062\017\001\002\000\076" +
    "\002\ufff7\003\ufff7\005\ufff7\021\ufff7\022\ufff7\024\ufff7\025" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\043\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\064\ufff7\065\ufff7\067\ufff7\001\002\000\016\003" +
    "\014\054\010\057\004\060\016\061\005\062\017\001\002" +
    "\000\076\002\ufff5\003\ufff5\005\ufff5\021\ufff5\022\ufff5\024" +
    "\ufff5\025\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\043\ufff5\047\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\064\ufff5\065\ufff5\067\ufff5\001\002\000" +
    "\004\002\001\001\002\000\004\021\ufffa\001\002\000\004" +
    "\021\155\001\002\000\016\003\014\054\010\057\004\060" +
    "\016\061\005\062\017\001\002\000\076\002\ufffb\003\ufffb" +
    "\005\ufffb\021\ufffb\022\ufffb\024\ufffb\025\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\043\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\064\ufffb" +
    "\065\ufffb\067\ufffb\001\002\000\004\021\155\001\002\000" +
    "\016\003\014\054\010\057\004\060\016\061\005\062\017" +
    "\001\002\000\076\002\ufff9\003\ufff9\005\ufff9\021\ufff9\022" +
    "\ufff9\024\ufff9\025\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9" +
    "\033\ufff9\034\ufff9\035\ufff9\043\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\062\ufff9\064\ufff9\065\ufff9\067\ufff9\001" +
    "\002\000\010\003\uff67\057\u0143\067\uff67\001\002\000\006" +
    "\003\uff69\067\uff69\001\002\000\006\003\uff68\067\uff68\001" +
    "\002\000\006\003\uff6a\067\uff6a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\016\002\010\003\006\044\014\045\012\046" +
    "\005\052\011\001\001\000\002\001\001\000\004\047\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\075\u0132\076\u0131\001\001\000\006\050\150\051" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\044\020\045\012\046\005\001\001\000\006\050\024\051" +
    "\023\001\001\000\004\124\144\001\001\000\004\054\143" +
    "\001\001\000\002\001\001\000\014\003\025\044\014\045" +
    "\012\046\005\052\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\031\001\001\000" +
    "\002\001\001\000\020\010\035\011\044\017\045\020\043" +
    "\021\041\023\037\036\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\131\036\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\065\122\066\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\125\107\001\001\000\002\001\001\000\020\010\035" +
    "\011\044\017\074\020\043\021\041\023\037\036\042\001" +
    "\001\000\006\022\061\064\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\073\036\042" +
    "\001\001\000\022\010\035\011\044\017\064\020\043\021" +
    "\041\023\037\024\066\036\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\035\011\044\017\071\020\043\021\041\023\037" +
    "\036\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\035\011\044\012\100\017\077\020" +
    "\043\021\041\023\037\036\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\104\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\035\011\044\017\106" +
    "\020\043\021\041\023\037\036\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\110\044\014\045\012" +
    "\046\005\052\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\035\011\044\017\127\020\043" +
    "\021\041\023\037\036\042\001\001\000\020\010\035\011" +
    "\044\017\126\020\043\021\041\023\037\036\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\103" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\145\044\014" +
    "\045\012\046\005\052\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\155\005\153\053\152\054\143" +
    "\001\001\000\014\003\151\044\014\045\012\046\005\052" +
    "\011\001\001\000\002\001\001\000\012\044\265\045\012" +
    "\046\005\052\u0130\001\001\000\002\001\001\000\014\006" +
    "\161\007\156\044\160\045\012\046\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\u012d\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\u012b\044\160" +
    "\045\012\046\005\001\001\000\004\013\167\001\001\000" +
    "\006\055\174\070\175\001\001\000\002\001\001\000\004" +
    "\100\170\001\001\000\002\001\001\000\014\003\171\044" +
    "\014\045\012\046\005\052\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\010\035\011" +
    "\044\015\205\016\215\017\204\020\043\021\041\023\037" +
    "\025\202\026\206\027\212\030\214\032\222\033\224\034" +
    "\216\036\042\037\217\001\001\000\010\044\176\045\012" +
    "\046\005\001\001\000\006\050\177\051\023\001\001\000" +
    "\006\055\200\070\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\010\035\011\044\016\272\017\204\020\043" +
    "\021\041\023\037\025\202\026\206\027\212\030\214\032" +
    "\222\033\224\034\216\036\042\037\217\001\001\000\002" +
    "\001\001\000\020\010\035\011\044\017\u0119\020\043\021" +
    "\041\023\037\036\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\102\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\117\300\001\001\000\010\020\233\056\231\060\232\001" +
    "\001\000\006\116\274\120\273\001\001\000\006\022\061" +
    "\064\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\236\001\001\000\004\066\253" +
    "\001\001\000\002\001\001\000\004\062\241\001\001\000" +
    "\006\063\244\064\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\250\001\001" +
    "\000\004\036\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\254\001\001\000\002\001\001\000\006" +
    "\014\262\057\261\001\001\000\044\010\035\011\044\015" +
    "\270\016\215\017\204\020\043\021\041\023\037\025\202" +
    "\026\206\027\212\030\214\032\222\033\224\034\216\036" +
    "\042\037\217\001\001\000\002\001\001\000\004\101\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\044" +
    "\265\045\012\046\005\052\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\155\005\153\053\152\001" +
    "\001\000\002\001\001\000\042\010\035\011\044\016\272" +
    "\017\204\020\043\021\041\023\037\025\202\026\206\027" +
    "\212\030\214\032\222\033\224\034\216\036\042\037\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\262\057\277\001\001\000\002\001\001\000\006\014\262" +
    "\057\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\262\057\302\001\001\000\002" +
    "\001\001\000\042\010\035\011\044\016\304\017\204\020" +
    "\043\021\041\023\037\025\202\026\206\027\212\030\214" +
    "\032\222\033\224\034\216\036\042\037\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\115\331\001\001\000\024\010\035\011" +
    "\044\017\314\020\043\021\041\023\037\035\313\036\042" +
    "\067\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\113\317\114\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\035\011\044\017\314\020\043\021\041\023" +
    "\037\035\330\036\042\067\312\001\001\000\024\010\035" +
    "\011\044\017\314\020\043\021\041\023\037\035\327\036" +
    "\042\067\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\107\353\001\001\000\024\010\035\011\044\017\314" +
    "\020\043\021\041\023\037\035\336\036\042\067\312\001" +
    "\001\000\002\001\001\000\006\105\341\106\340\001\001" +
    "\000\004\014\347\001\001\000\002\001\001\000\004\014" +
    "\343\001\001\000\004\031\345\001\001\000\004\014\346" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\351\001\001\000\004\031\352\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\355\001" +
    "\001\000\004\031\356\001\001\000\002\001\001\000\004" +
    "\122\u0114\001\001\000\004\036\362\001\001\000\006\121" +
    "\u010b\123\u010c\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\040\367\041\370\042\365\001\001\000\004\032" +
    "\u010a\001\001\000\004\036\u0104\001\001\000\002\001\001" +
    "\000\006\042\373\043\372\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\010\035\011\044" +
    "\016\376\017\204\020\043\021\041\023\037\025\202\026" +
    "\206\027\212\030\214\032\222\033\224\034\216\036\042" +
    "\037\217\001\001\000\044\010\035\011\044\015\377\016" +
    "\215\017\u0100\020\043\021\041\023\037\025\202\026\206" +
    "\027\212\030\214\032\222\033\224\034\216\036\042\037" +
    "\217\001\001\000\002\001\001\000\042\010\035\011\044" +
    "\016\272\017\204\020\043\021\041\023\037\025\202\026" +
    "\206\027\212\030\214\032\222\033\224\034\216\036\042" +
    "\037\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\010\035\011\044\016\u0107\017\204\020\043\021\041\023" +
    "\037\025\202\026\206\027\212\030\214\032\222\033\224" +
    "\034\216\036\042\037\217\001\001\000\044\010\035\011" +
    "\044\015\u0108\016\215\017\u0100\020\043\021\041\023\037" +
    "\025\202\026\206\027\212\030\214\032\222\033\224\034" +
    "\216\036\042\037\217\001\001\000\002\001\001\000\042" +
    "\010\035\011\044\016\272\017\204\020\043\021\041\023" +
    "\037\025\202\026\206\027\212\030\214\032\222\033\224" +
    "\034\216\036\042\037\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\040\u010e\041\370\042\365\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\u0112\041\370" +
    "\042\365\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\u0117\041\370" +
    "\042\365\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\112\u0127\001\001\000\024\010\035\011\044\017\314\020" +
    "\043\021\041\023\037\035\u011e\036\042\067\312\001\001" +
    "\000\002\001\001\000\006\110\u0121\111\u0120\001\001\000" +
    "\004\014\u0124\001\001\000\002\001\001\000\004\014\u0123" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u0126\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u0129\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u012f\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\155\005\153\053\u0136\001\001\000\002\001\001" +
    "\000\010\004\155\005\153\053\u0134\001\001\000\012\044" +
    "\265\045\012\046\005\052\u0135\001\001\000\002\001\001" +
    "\000\012\044\265\045\012\046\005\052\u0137\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\074\u013d\001\001" +
    "\000\010\004\155\005\153\053\u013b\001\001\000\012\044" +
    "\265\045\012\046\005\052\u013c\001\001\000\002\001\001" +
    "\000\010\004\155\005\153\053\u013e\001\001\000\012\044" +
    "\265\045\012\046\005\052\u013f\001\001\000\002\001\001" +
    "\000\004\047\u0143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static Lexer s;
    public static int errors = 0;
    public static ErrorData errorData = ErrorData.getInstance();
    ErrorData detectedError;
    
    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token.sym == 0){
            System.out.println("*******************FIN DEL ANALISIS**********************");
        }
        else{
            report_error("Error fatal","");
        }
    }
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        if (info instanceof String){
            errors++;
            /*try {
                restart_lookahead();
            } catch (Exception ex) {
                Logger.getLogger(Parser.class.getName()).log(Level.SEVERE, null, ex);
            }*/
            String mensaje = ", se esperaba: " + message;
            try{
                detectedError.setId(errors);
            }catch(Exception e){
                detectedError = new ErrorData(errors, info.toString(), mensaje);
            }
            detectedError.setMessage(detectedError.getMessage() + mensaje);
            errorData.insertarError(detectedError);
        }
        else {
            StringBuilder m = new StringBuilder("Error");
            if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                if (s.left >= 0) {                
                    m.append(" en la línea "+(s.left+1));
                    if (s.right >= 0)
                        m.append(", columna "+(s.right+1));
                }
            }
            m.append(" : " + message);
            detectedError = new ErrorData(errors, info.toString(), m.toString());
            errorData.insertarError(detectedError);
            if(info.toString().equals("#" + 0))
                done_parsing();
        }
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        System.out.println("----------FUI YO------------");
        report_error(message, info);
        //System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            s = new Lexer(new FileReader(args[0]));
            Parser p = new Parser(s);
            p.parse();
            System.out.println("\n*** Fin del parseo ***");
            System.out.println("Total de errores = " + errors + ".");
            errors = 0;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // valor ::= SUBSTRACT LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // valor ::= LITERAL_CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // valor ::= LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // operacion_bin_2 ::= MODEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // operacion_bin_2 ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // operacion_bin_2 ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // operacion_bin_2 ::= TIMESEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // operacion_bin_2 ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // operacion_bin_1 ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // operacion_bin_1 ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // operador ::= MODULUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // operador ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // operador ::= SUBSTRACT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // operador ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // comparador ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // comparador ::= MAYOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // comparador ::= MENOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // comparador ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // comparador ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // validar_expr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // validar_expr ::= ASSIGN error NT$25 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$25 ::= 
            {
              Object RESULT =null;
 parser.report_error(" una expresión o falta ; al final.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // validar_expr ::= ASSIGN expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // long_stmt_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_aux",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // long_stmt_aux ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_aux",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // long_stmt ::= LONG long_stmt_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // long_stmt ::= LONG LONG long_stmt_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // short_stmt ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // short_stmt ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // lista_ids ::= error NT$24 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$24 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un ; al final de la expresión.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // lista_ids ::= lista_ids IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // lista_ids ::= lista_ids COMMA IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // lista_ids ::= IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // declaracion_var ::= lista_ids SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // tipo_dato ::= long_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // tipo_dato ::= short_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // continue_stmt ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // break_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // default_stmt ::= DEFAULT COLON LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // default_stmt ::= DEFAULT COLON sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // case_stmt ::= CASE valor COLON LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // case_stmt ::= CASE valor COLON sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // lista_case ::= lista_case case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // lista_case ::= case_stmt break_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // lista_case ::= case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // case_body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // case_body ::= lista_case default_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // case_body ::= lista_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // switch_stmt ::= SWITCH LPAREN error NT$23 LBRACE case_body RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$23 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un RPAREN al final de la condición del SWITCH.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // switch_stmt ::= SWITCH error NT$22 RPAREN LBRACE case_body RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$22 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un LPAREN al final de la condición del SWITCH.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // switch_stmt ::= SWITCH LPAREN error NT$21 RPAREN LBRACE case_body RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$21 ::= 
            {
              Object RESULT =null;
 parser.report_error("una condición numérica para el SWITCH.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // switch_stmt ::= SWITCH LPAREN valor RPAREN LBRACE case_body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // fin_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // fin_for ::= IDENTIFICADOR ASSIGN IDENTIFICADOR operador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // fin_for ::= IDENTIFICADOR operacion_bin_2 valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // fin_for ::= IDENTIFICADOR operacion_bin_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // medio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // medio_for ::= IDENTIFICADOR comparador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // inicio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // inicio_for ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condicion_for ::= inicio_for SEMICOLON medio_for SEMICOLON fin_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_for",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipo_for ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_for",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipo_for ::= bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_for",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // for_statement ::= FOR LPAREN error NT$20 tipo_for 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$20 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un RPAREN al final de la condición del FOR.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // for_statement ::= FOR error NT$19 RPAREN tipo_for 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$19 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un LPAREN al final de la condición del FOR.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_statement ::= FOR LPAREN error NT$18 RPAREN tipo_for 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$18 ::= 
            {
              Object RESULT =null;
 parser.report_error(" una condición valida para el FOR.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for_statement ::= FOR LPAREN condicion_for RPAREN tipo_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // dowhile_statement ::= DO bloque WHILE error NT$17 RPAREN SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhile_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$17 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un LPAREN al final de la condición del DO_WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dowhile_statement ::= DO bloque WHILE LPAREN error NT$16 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhile_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$16 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un RPAREN al final de la condición del DO_WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dowhile_statement ::= DO bloque WHILE LPAREN error NT$15 RPAREN SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhile_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$15 ::= 
            {
              Object RESULT =null;
 parser.report_error(" una condición valida para el DO_WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dowhile_statement ::= DO bloque WHILE LPAREN condicion RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhile_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // while_statement ::= WHILE error NT$14 RPAREN bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$14 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un LPAREN al final de la condición del WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // while_statement ::= WHILE LPAREN error NT$13 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$13 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un RPAREN al final de la condición del WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // while_statement ::= WHILE LPAREN error NT$12 RPAREN bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$12 ::= 
            {
              Object RESULT =null;
 parser.report_error("una condición valida para el WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // while_statement ::= WHILE LPAREN condicion RPAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // else_statement ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_statement ::= IF error NT$11 RPAREN bloque else_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$11 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un LPAREN al final de la condición del IF.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // if_statement ::= IF LPAREN error NT$10 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$10 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un RPAREN al final de la condición del IF.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if_statement ::= IF LPAREN error NT$9 RPAREN bloque else_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$9 ::= 
            {
              Object RESULT =null;
 parser.report_error(" una condición válida para el IF.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_statement ::= IF LPAREN condicion RPAREN bloque else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // write_f_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // write_f_aux ::= write_f_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // write_f ::= WRITE LPAREN error NT$8 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$8 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetros incorrectos en el WRITE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // write_f ::= WRITE LPAREN write_f_aux RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // read_f ::= READ LPAREN error NT$7 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$7 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetros incorrectos en el READ.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // read_f ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // read_f ::= READ LPAREN IDENTIFICADOR RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicion_2 ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condicion ::= condicion_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicion ::= condicion_2 OR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicion ::= condicion_2 AND condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // is_constante ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_constante",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // is_constante ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_constante",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // call_function_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function_aux",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // call_function_aux ::= call_function_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function_aux",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // call_function ::= write_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // call_function ::= read_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // call_function ::= IDENTIFICADOR LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // call_function ::= IDENTIFICADOR LPAREN call_function_aux RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= LPAREN expresion RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= valor comparador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= valor operador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op_asignaciones ::= operacion_bin_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op_asignaciones ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion ::= IDENTIFICADOR op_asignaciones exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= call_function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= EXCLAMACION exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia ::= error NT$6 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$6 ::= 
            {
              Object RESULT =null;
 parser.report_error(" no se reconoce la expresión o falta ; al final.", "");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= return_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= continue_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= break_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= for_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= dowhile_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion_var_interna ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var_interna",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_var_interna ::= is_constante tipo_dato declaracion_var declaracion_var_interna 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var_interna",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloque ::= error NT$5 decision_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.report_error(" no se encuentra el LBRACE o expresión inválida.","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloque ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque ::= LBRACE lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque_global ::= error NT$4 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.report_error(" no se encuentra el LBRACE .","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque_global ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque_global ::= LBRACE declaracion_var_interna lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametro ::= tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_parametros ::= lista_parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion ::= LPAREN error NT$3 RPAREN bloque_global 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetro incorrecto.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcion ::= LPAREN lista_parametros RPAREN bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_funcion ::= LPAREN lista_parametros RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_funcion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decision_operacion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decision_operacion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decision_funcion ::= error NT$2 decision_operacion decision_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.report_error(" el identificador de la función.","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decision_funcion ::= error NT$1 IDENTIFICADOR decision_operacion decision_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
 parser.report_error(" tipo de dato de la función.","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decision_funcion ::= VOID error NT$0 decision_operacion decision_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.report_error(" el identificador de la función.","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decision_funcion ::= VOID IDENTIFICADOR decision_operacion decision_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decision_funcion ::= tipo_dato IDENTIFICADOR decision_operacion decision_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa_c ::= decision_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa_c ::= CONST tipo_dato declaracion_var programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa_c ::= tipo_dato declaracion_var programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

