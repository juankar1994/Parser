
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 18 21:43:31 CST 2015
//----------------------------------------------------

package parser.data;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 18 21:43:31 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\003\007\000\002\003\004\000\002\003\002" +
    "\000\002\055\003\000\002\055\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\053\005\000\002" +
    "\054\003\000\002\054\003\000\002\004\006\000\002\005" +
    "\006\000\002\006\005\000\002\006\003\000\002\006\002" +
    "\000\002\007\004\000\002\014\003\000\002\015\005\000" +
    "\002\015\004\000\002\016\004\000\002\016\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\006\000\002\017\003" +
    "\000\002\017\003\000\002\017\005\000\002\026\010\000" +
    "\002\026\005\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\004\000\002\033\006\000\002\033" +
    "\004\000\002\033\003\000\002\072\004\000\002\072\004" +
    "\000\002\072\002\000\002\032\004\000\002\010\007\000" +
    "\002\012\003\000\002\012\002\000\002\011\007\000\002" +
    "\013\005\000\002\013\003\000\002\027\007\000\002\030" +
    "\011\000\002\031\007\000\002\060\007\000\002\062\005" +
    "\000\002\062\002\000\002\063\005\000\002\063\002\000" +
    "\002\064\004\000\002\064\005\000\002\064\007\000\002" +
    "\064\002\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\071\003" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\066\003\000\002" +
    "\066\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\061\003" +
    "\000\002\061\003\000\002\035\011\000\002\036\003\000" +
    "\002\036\004\000\002\037\003\000\002\037\004\000\002" +
    "\040\006\000\002\040\010\000\002\041\005\000\002\041" +
    "\007\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\047\005\000\002\073\003\000" +
    "\002\073\002\000\002\050\004\000\002\050\006\000\002" +
    "\050\003\000\002\043\003\000\002\043\004\000\002\044" +
    "\004\000\002\045\003\000\002\045\004\000\002\045\002" +
    "\000\002\046\003\000\002\046\002\000\002\057\004\000" +
    "\002\057\002\000\002\065\003\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\022\002\ufffc\057\007\062\uff9d\063\uff9d\064" +
    "\uff9d\065\uff9d\066\004\073\006\001\002\000\022\013\uff9e" +
    "\027\uff9e\031\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\072" +
    "\uff9e\001\002\000\022\002\ufffc\057\007\062\uff9d\063\uff9d" +
    "\064\uff9d\065\uff9d\066\004\073\006\001\002\000\004\074" +
    "\307\001\002\000\004\072\302\001\002\000\004\002\001" +
    "\001\002\000\012\062\022\063\021\064\016\065\015\001" +
    "\002\000\004\002\013\001\002\000\004\002\000\001\002" +
    "\000\004\072\uffa0\001\002\000\006\062\301\072\uff99\001" +
    "\002\000\010\062\276\064\274\072\uff94\001\002\000\004" +
    "\072\023\001\002\000\004\072\uffa1\001\002\000\004\072" +
    "\uffa2\001\002\000\004\072\uffa3\001\002\000\016\013\uff9d" +
    "\021\026\027\uff9d\031\uff9d\066\004\072\uff9d\001\002\000" +
    "\022\002\ufffc\057\007\062\uff9d\063\uff9d\064\uff9d\065\uff9d" +
    "\066\004\073\006\001\002\000\022\002\ufff8\057\ufff8\062" +
    "\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\073\ufff8\001\002" +
    "\000\016\022\uffef\031\uffef\062\022\063\021\064\016\065" +
    "\015\001\002\000\022\002\ufff7\057\ufff7\062\ufff7\063\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\073\ufff7\001\002\000\012\013" +
    "\035\027\uff90\031\uff90\072\033\001\002\000\022\002\ufff9" +
    "\057\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\073" +
    "\ufff9\001\002\000\006\027\043\031\042\001\002\000\010" +
    "\013\035\027\uff90\031\uff90\001\002\000\006\027\uff9a\031" +
    "\uff9a\001\002\000\006\067\040\070\036\001\002\000\006" +
    "\027\uff8e\031\uff8e\001\002\000\006\027\uff91\031\uff91\001" +
    "\002\000\006\027\uff8f\031\uff8f\001\002\000\006\027\uff9c" +
    "\031\uff9c\001\002\000\004\072\044\001\002\000\052\002" +
    "\uff9f\022\uff9f\024\uff9f\033\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\052\uff9f\053\uff9f\054\uff9f\057\uff9f\060\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\073\uff9f" +
    "\001\002\000\010\013\035\027\uff90\031\uff90\001\002\000" +
    "\006\027\uff9b\031\uff9b\001\002\000\006\022\ufff0\031\ufff0" +
    "\001\002\000\004\072\272\001\002\000\006\022\052\031" +
    "\051\001\002\000\012\062\022\063\021\064\016\065\015" +
    "\001\002\000\006\023\053\027\054\001\002\000\036\024" +
    "\057\033\071\035\062\036\073\037\077\040\067\054\066" +
    "\060\056\061\072\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066" +
    "\004\001\002\000\022\002\ufff3\057\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\073\ufff3\001\002\000\022\002" +
    "\ufff2\057\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2" +
    "\073\ufff2\001\002\000\004\021\264\001\002\000\054\002" +
    "\uffeb\022\uffeb\024\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\052\uffeb\053\uffeb\054\uffeb\057\uffeb\060" +
    "\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb" +
    "\073\uffeb\001\002\000\044\022\uffe8\024\uffe8\033\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\001\002\000\012\062\022\063\021\064\016\065\015" +
    "\001\002\000\004\021\255\001\002\000\036\024\254\033" +
    "\071\035\062\036\073\037\077\040\067\054\066\060\056" +
    "\061\072\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\004\001" +
    "\002\000\044\022\uffe7\024\uffe7\033\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\052\uffe7\053\uffe7\054\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\001\002" +
    "\000\044\022\uffe2\024\uffe2\033\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\052\uffe2\053\uffe2\054\uffe2\060\uffe2\061\uffe2" +
    "\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\001\002\000" +
    "\012\005\140\067\137\070\134\072\135\001\002\000\004" +
    "\021\222\001\002\000\044\022\uffe6\024\uffe6\033\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\052\uffe6\053\uffe6\054\uffe6" +
    "\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066" +
    "\uffe6\001\002\000\016\003\165\005\140\021\212\067\137" +
    "\070\134\072\135\001\002\000\004\021\202\001\002\000" +
    "\004\023\053\001\002\000\044\022\uffe4\024\uffe4\033\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\001\002\000\040\022\uffe9\024\uffe9\033\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\054\uffe9\060\uffe9\061\uffe9" +
    "\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\001\002\000" +
    "\044\022\uffe5\024\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\052\uffe5\053\uffe5\054\uffe5\060\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\001\002\000\004" +
    "\021\101\001\002\000\044\022\uffe1\024\uffe1\033\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066" +
    "\uffe1\001\002\000\006\027\uffc7\072\102\001\002\000\004" +
    "\013\157\001\002\000\004\022\153\001\002\000\004\027" +
    "\105\001\002\000\006\027\uffc5\072\106\001\002\000\016" +
    "\041\145\042\147\043\150\044\144\045\143\047\146\001" +
    "\002\000\004\027\110\001\002\000\006\022\uffc1\072\111" +
    "\001\002\000\022\011\113\012\123\013\121\014\116\015" +
    "\120\016\122\017\114\020\124\001\002\000\004\022\uffc9" +
    "\001\002\000\004\022\uffb5\001\002\000\012\005\uffb0\067" +
    "\uffb0\070\uffb0\072\uffb0\001\002\000\012\005\140\067\137" +
    "\070\134\072\135\001\002\000\012\005\uffb1\067\uffb1\070" +
    "\uffb1\072\uffb1\001\002\000\004\022\uffc4\001\002\000\012" +
    "\005\uffb3\067\uffb3\070\uffb3\072\uffb3\001\002\000\004\072" +
    "\125\001\002\000\012\005\uffb2\067\uffb2\070\uffb2\072\uffb2" +
    "\001\002\000\004\022\uffb4\001\002\000\012\005\uffaf\067" +
    "\uffaf\070\uffaf\072\uffaf\001\002\000\014\004\127\005\131" +
    "\006\133\007\130\010\132\001\002\000\012\005\140\067" +
    "\137\070\134\072\135\001\002\000\012\005\uffba\067\uffba" +
    "\070\uffba\072\uffba\001\002\000\012\005\uffb7\067\uffb7\070" +
    "\uffb7\072\uffb7\001\002\000\012\005\uffb9\067\uffb9\070\uffb9" +
    "\072\uffb9\001\002\000\012\005\uffb6\067\uffb6\070\uffb6\072" +
    "\uffb6\001\002\000\012\005\uffb8\067\uffb8\070\uffb8\072\uffb8" +
    "\001\002\000\034\022\uffdb\023\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\001\002\000\034\022\uffdd\023\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\047\uffdd\050\uffdd\051\uffdd\001\002\000\004\022" +
    "\uffc2\001\002\000\034\022\uffdc\023\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\001\002\000\004\067\141\001\002" +
    "\000\034\022\uffda\023\uffda\027\uffda\030\uffda\031\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\047\uffda\050\uffda" +
    "\051\uffda\001\002\000\004\022\uffc3\001\002\000\012\005" +
    "\uffbd\067\uffbd\070\uffbd\072\uffbd\001\002\000\012\005\uffbb" +
    "\067\uffbb\070\uffbb\072\uffbb\001\002\000\012\005\uffc0\067" +
    "\uffc0\070\uffc0\072\uffc0\001\002\000\012\005\uffbf\067\uffbf" +
    "\070\uffbf\072\uffbf\001\002\000\012\005\uffbc\067\uffbc\070" +
    "\uffbc\072\uffbc\001\002\000\012\005\uffbe\067\uffbe\070\uffbe" +
    "\072\uffbe\001\002\000\012\005\140\067\137\070\134\072" +
    "\135\001\002\000\004\027\uffc6\001\002\000\006\023\053" +
    "\027\154\001\002\000\044\022\uffad\024\uffad\033\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\052\uffad\053\uffad\054\uffad" +
    "\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066" +
    "\uffad\001\002\000\044\022\uffca\024\uffca\033\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\052\uffca\053\uffca\054\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
    "\001\002\000\044\022\uffae\024\uffae\033\uffae\035\uffae\036" +
    "\uffae\037\uffae\040\uffae\052\uffae\053\uffae\054\uffae\060\uffae" +
    "\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\001" +
    "\002\000\012\005\140\067\137\070\134\072\135\001\002" +
    "\000\004\027\uffc8\001\002\000\004\035\163\001\002\000" +
    "\046\022\uffed\024\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\052\uffed\053\uffed\054\uffed\060\uffed\061" +
    "\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\001\002" +
    "\000\004\021\164\001\002\000\014\003\165\005\140\067" +
    "\137\070\134\072\135\001\002\000\006\022\uffd7\023\uffd7" +
    "\001\002\000\026\022\uffd4\023\uffd4\041\145\042\147\043" +
    "\150\044\144\045\143\047\146\050\175\051\172\001\002" +
    "\000\004\022\170\001\002\000\004\027\171\001\002\000" +
    "\044\022\uffcb\024\uffcb\033\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\052\uffcb\053\uffcb\054\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\001\002\000\014" +
    "\003\165\005\140\067\137\070\134\072\135\001\002\000" +
    "\006\022\uffd8\023\uffd8\001\002\000\012\005\140\067\137" +
    "\070\134\072\135\001\002\000\014\003\165\005\140\067" +
    "\137\070\134\072\135\001\002\000\006\022\uffd5\023\uffd5" +
    "\001\002\000\012\022\uffd4\023\uffd4\050\175\051\172\001" +
    "\002\000\006\022\uffd9\023\uffd9\001\002\000\006\022\uffd6" +
    "\023\uffd6\001\002\000\012\005\140\067\137\070\134\072" +
    "\135\001\002\000\006\022\206\031\205\001\002\000\006" +
    "\022\uffcd\031\uffcd\001\002\000\012\005\140\067\137\070" +
    "\134\072\135\001\002\000\004\027\207\001\002\000\044" +
    "\022\uffcf\024\uffcf\033\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\052\uffcf\053\uffcf\054\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\066\uffcf\001\002\000\006\022" +
    "\uffce\031\uffce\001\002\000\004\023\053\001\002\000\014" +
    "\003\165\005\140\067\137\070\134\072\135\001\002\000" +
    "\004\022\214\001\002\000\004\023\053\001\002\000\004" +
    "\034\216\001\002\000\004\023\053\001\002\000\044\022" +
    "\uffdf\024\uffdf\033\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\052\uffdf\053\uffdf\054\uffdf\060\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\001\002\000\044\022\uffd3" +
    "\024\uffd3\033\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\001\002\000\044\022\uffde\024" +
    "\uffde\033\uffde\035\uffde\036\uffde\037\uffde\040\uffde\052\uffde" +
    "\053\uffde\054\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\066\uffde\001\002\000\012\005\140\067\137" +
    "\070\134\072\135\001\002\000\004\022\224\001\002\000" +
    "\004\023\225\001\002\000\004\052\227\001\002\000\010" +
    "\024\uffa9\052\uffa9\053\uffa9\001\002\000\012\005\140\067" +
    "\137\070\134\072\135\001\002\000\004\024\243\001\002" +
    "\000\010\024\uffab\052\227\053\232\001\002\000\004\030" +
    "\235\001\002\000\004\024\uffaa\001\002\000\010\024\uffa8" +
    "\052\uffa8\053\uffa8\001\002\000\036\021\236\033\071\035" +
    "\062\036\073\037\077\040\067\054\066\060\056\061\072" +
    "\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\004\001\002\000" +
    "\034\033\071\035\062\036\073\037\077\040\067\054\066" +
    "\060\056\061\072\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066" +
    "\004\001\002\000\004\024\uffa5\001\002\000\036\022\241" +
    "\033\071\035\062\036\073\037\077\040\067\054\066\060" +
    "\056\061\072\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\004" +
    "\001\002\000\004\024\uffa4\001\002\000\040\022\uffea\024" +
    "\uffea\033\uffea\035\uffea\036\uffea\037\uffea\040\uffea\054\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066" +
    "\uffea\001\002\000\044\022\uffac\024\uffac\033\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\052\uffac\053\uffac\054\uffac\060" +
    "\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac" +
    "\001\002\000\004\030\245\001\002\000\036\021\246\033" +
    "\071\035\062\036\073\037\077\040\067\054\066\060\056" +
    "\061\072\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\004\001" +
    "\002\000\034\033\071\035\062\036\073\037\077\040\067" +
    "\054\066\060\056\061\072\062\uff9d\063\uff9d\064\uff9d\065" +
    "\uff9d\066\004\001\002\000\010\024\uffa7\052\uffa7\053\uffa7" +
    "\001\002\000\036\022\251\033\071\035\062\036\073\037" +
    "\077\040\067\054\066\060\056\061\072\062\uff9d\063\uff9d" +
    "\064\uff9d\065\uff9d\066\004\001\002\000\010\024\uffa6\052" +
    "\uffa6\053\uffa6\001\002\000\004\027\253\001\002\000\044" +
    "\022\uffe0\024\uffe0\033\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\052\uffe0\053\uffe0\054\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\001\002\000\054\002" +
    "\uffec\022\uffec\024\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\052\uffec\053\uffec\054\uffec\057\uffec\060" +
    "\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec" +
    "\073\uffec\001\002\000\014\003\165\005\140\067\137\070" +
    "\134\072\135\001\002\000\004\022\257\001\002\000\004" +
    "\023\053\001\002\000\044\022\uffcc\024\uffcc\033\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066" +
    "\uffcc\001\002\000\004\072\262\001\002\000\014\013\uff9d" +
    "\027\uff9d\031\uff9d\066\004\072\uff9d\001\002\000\044\022" +
    "\uffe3\024\uffe3\033\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\052\uffe3\053\uffe3\054\uffe3\060\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\001\002\000\006\022\uffd0" +
    "\072\265\001\002\000\004\022\uffd1\001\002\000\004\022" +
    "\267\001\002\000\004\027\270\001\002\000\044\022\uffd2" +
    "\024\uffd2\033\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\001\002\000\006\022\ufff1\031" +
    "\ufff1\001\002\000\006\022\uffee\031\uffee\001\002\000\004" +
    "\002\ufffe\001\002\000\006\062\300\072\uff92\001\002\000" +
    "\004\072\uff97\001\002\000\004\072\uff96\001\002\000\004" +
    "\072\uff95\001\002\000\004\072\uff93\001\002\000\004\072" +
    "\uff98\001\002\000\004\021\026\001\002\000\022\002\ufffc" +
    "\057\007\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\004\073" +
    "\006\001\002\000\022\002\ufffa\057\ufffa\062\ufffa\063\ufffa" +
    "\064\ufffa\065\ufffa\066\ufffa\073\ufffa\001\002\000\022\002" +
    "\ufffb\057\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\073\ufffb\001\002\000\004\002\uffff\001\002\000\006\071" +
    "\312\075\311\001\002\000\022\002\ufff6\057\ufff6\062\ufff6" +
    "\063\ufff6\064\ufff6\065\ufff6\066\ufff6\073\ufff6\001\002\000" +
    "\022\002\ufff4\057\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4" +
    "\066\ufff4\073\ufff4\001\002\000\022\002\ufff5\057\ufff5\062" +
    "\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\073\ufff5\001\002" +
    "\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\012\002\011\003\007\053\004\073\010\001" +
    "\001\000\002\001\001\000\010\003\312\053\004\073\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\042\016\043\017\044\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\030\005\024\047\026\056\023\073\027\001\001\000\010" +
    "\003\272\053\004\073\010\001\001\000\002\001\001\000" +
    "\014\006\047\007\045\042\046\043\017\044\013\001\001" +
    "\000\002\001\001\000\006\050\031\057\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\040\001\001" +
    "\000\002\001\001\000\004\065\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\270\042\046\043\017\044" +
    "\013\001\001\000\004\015\054\001\001\000\026\010\064" +
    "\011\077\016\062\017\074\026\057\027\063\030\067\031" +
    "\073\035\075\073\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\042\260\043\017\044\013\001\001\000\002" +
    "\001\001\000\024\010\064\011\077\017\241\026\057\027" +
    "\063\030\067\031\073\035\075\073\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\210\034\165" +
    "\001\001\000\002\001\001\000\006\014\160\015\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\060\102\062" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\106\001\001\000\004\071\150\001" +
    "\001\000\002\001\001\000\004\064\111\001\001\000\006" +
    "\066\116\067\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\070\125\001\001\000\004\034\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\151\001\001\000" +
    "\002\001\001\000\006\015\155\061\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\166\034\165\001" +
    "\001\000\002\001\001\000\006\071\173\072\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\200\034\165\001\001\000\002\001\001\000\004" +
    "\034\176\001\001\000\006\033\175\034\165\001\001\000" +
    "\002\001\001\000\004\072\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\202\034\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\220\015\161\001\001\000\006\033\212\034\165" +
    "\001\001\000\002\001\001\000\006\014\214\015\161\001" +
    "\001\000\004\032\216\001\001\000\006\014\217\015\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\036\227\037\230\040\225\001\001\000" +
    "\002\001\001\000\004\034\243\001\001\000\002\001\001" +
    "\000\006\040\233\041\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\064\011\077" +
    "\017\236\026\057\027\063\030\067\031\073\035\075\073" +
    "\060\001\001\000\026\010\064\011\077\016\237\017\074" +
    "\026\057\027\063\030\067\031\073\035\075\073\060\001" +
    "\001\000\002\001\001\000\024\010\064\011\077\017\241" +
    "\026\057\027\063\030\067\031\073\035\075\073\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\064\011\077\017\246\026" +
    "\057\027\063\030\067\031\073\035\075\073\060\001\001" +
    "\000\026\010\064\011\077\016\247\017\074\026\057\027" +
    "\063\030\067\031\073\035\075\073\060\001\001\000\002" +
    "\001\001\000\024\010\064\011\077\017\241\026\057\027" +
    "\063\030\067\031\073\035\075\073\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\255\034\165\001\001\000\002\001\001" +
    "\000\006\014\257\015\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\262\073\027\001\001\000\002" +
    "\001\001\000\004\012\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\304\005\303\055\302\001\001\000\010\003\305\053\004" +
    "\073\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : " + message);
        System.out.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            Parser p = new Parser(
                    new Lexer( new FileReader(args[0])));
            Object result = p.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // validar_expr_2 ::= LITERAL_CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr_2",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // validar_expr_2 ::= LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr_2",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // validar_expr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // validar_expr ::= ASSIGN validar_expr_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // long_stmt_fase2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_fase2",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // long_stmt_fase2 ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_fase2",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // long_stmt_fase1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_fase1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // long_stmt_fase1 ::= LONG long_stmt_fase2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_fase1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // long_stmt_fase1 ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_fase1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // long_stmt ::= LONG long_stmt_fase1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // short_stmt ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // short_stmt ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_ids ::= validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_ids ::= lista_ids COMMA IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_ids ::= IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // is_constante ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_constante",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // is_constante ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_constante",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaracion_var ::= is_constante lista_ids SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tipo_dato ::= long_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipo_dato ::= short_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // default_stmt ::= DEFAULT COL LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // default_stmt ::= DEFAULT COL sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case_stmt ::= CASE valor COL LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // case_stmt ::= CASE valor COL sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lista_case ::= lista_case case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lista_case ::= case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // case_body ::= lista_case default_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // case_body ::= lista_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // switch_stmt ::= SWITCH LPAREN valor RPAREN LBRACE case_body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipo_for ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo_for ::= bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operacion_bin_2 ::= MODEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operacion_bin_2 ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operacion_bin_2 ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operacion_bin_2 ::= TIMESEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operacion_bin_2 ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operacion_bin_1 ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operacion_bin_1 ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador ::= MODULUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operador ::= SUBSTRACT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comparador ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comparador ::= MAYOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comparador ::= MENOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comparador ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comparador ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // fin_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fin_for ::= IDENTIFICADOR ASSIGN IDENTIFICADOR operador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // fin_for ::= IDENTIFICADOR operacion_bin_2 valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // fin_for ::= IDENTIFICADOR operacion_bin_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // medio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // medio_for ::= IDENTIFICADOR comparador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inicio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // inicio_for ::= IDENTIFICADOR ASSIGN valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicion_for ::= inicio_for SEMICOLON medio_for SEMICOLON fin_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_for",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // for_statement ::= FOR LPAREN condicion_for RPAREN tipo_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dowhile_statement ::= DO bloque_global WHILE LPAREN condicion RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhile_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // while_statement ::= WHILE LPAREN condicion RPAREN bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // write_f_aux ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // write_f_aux ::= write_f_aux COMMA valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // write_f ::= WRITE LPAREN write_f_aux RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // read_f_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // read_f_aux ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // read_f ::= READ LPAREN read_f_aux RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // else_statement ::= ELSE bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicion_2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicion_2 ::= OR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicion_2 ::= AND condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicion ::= valor condicion_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicion ::= valor comparador valor condicion_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= SUBSTRACT LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor ::= LITERAL_CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor ::= LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // if_statement ::= IF condicion bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if_statement ::= IF LPAREN condicion RPAREN bloque_global else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= RETURN valor SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= write_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= read_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= is_constante tipo_dato IDENTIFICADOR declaracion_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= for_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= dowhile_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque ::= LBRACE lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_global ::= bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametro ::= tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_parametros ::= lista_parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcion ::= LPAREN lista_parametros RPAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def_funcion ::= LPAREN lista_parametros RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_funcion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenido_directiva ::= TEXTO_DIRECTIVA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_directiva",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenido_directiva ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_directiva",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // directiva ::= SIMBOLO_NUMERO INCLUDE contenido_directiva 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("directiva",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decision_operacion ::= declaracion_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decision_operacion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decision_operacion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decision_funcion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decision_funcion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa_c ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa_c ::= directiva programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa_c ::= is_constante tipo_dato IDENTIFICADOR decision_operacion programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa_c ::= VOID IDENTIFICADOR decision_funcion programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

