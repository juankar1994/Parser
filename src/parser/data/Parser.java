
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 22 20:33:26 CST 2015
//----------------------------------------------------

package parser.data;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 22 20:33:26 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\007\000\002\003\002\000\002\052\003" +
    "\000\002\052\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\004\006\000\002\005\006\000\002" +
    "\006\005\000\002\006\003\000\002\006\002\000\002\007" +
    "\004\000\002\013\006\000\002\013\004\000\002\014\005" +
    "\000\002\014\004\000\002\055\006\000\002\055\002\000" +
    "\002\015\004\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\003\000" +
    "\002\017\004\000\002\017\003\000\002\017\003\000\002" +
    "\020\005\000\002\022\003\000\002\022\003\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\003" +
    "\000\002\023\006\000\002\023\005\000\002\023\003\000" +
    "\002\023\003\000\002\024\005\000\002\024\003\000\002" +
    "\070\003\000\002\070\002\000\002\035\005\000\002\035" +
    "\005\000\002\035\003\000\002\035\003\000\002\067\003" +
    "\000\002\010\006\000\002\010\005\000\002\011\006\000" +
    "\002\012\005\000\002\012\003\000\002\025\010\000\002" +
    "\025\007\000\002\031\004\000\002\026\007\000\002\027" +
    "\011\000\002\030\007\000\002\057\003\000\002\057\003" +
    "\000\002\056\007\000\002\060\003\000\002\060\002\000" +
    "\002\061\005\000\002\061\002\000\002\062\004\000\002" +
    "\062\005\000\002\062\007\000\002\062\002\000\002\037" +
    "\011\000\002\040\003\000\002\040\004\000\002\041\003" +
    "\000\002\041\004\000\002\041\004\000\002\042\006\000" +
    "\002\042\010\000\002\043\005\000\002\043\007\000\002" +
    "\032\004\000\002\033\004\000\002\034\005\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\050\004\000\002\050\003\000\002\051\004\000" +
    "\002\051\006\000\002\051\003\000\002\045\003\000\002" +
    "\045\004\000\002\046\005\000\002\046\004\000\002\047" +
    "\003\000\002\047\002\000\002\054\004\000\002\054\005" +
    "\000\002\054\002\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\065\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\063\003" +
    "\000\002\063\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\020\002\ufffd\054\005\057\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\063\004\001\002\000\012\057\uffce\060\uffce" +
    "\061\uffce\062\uffce\001\002\000\004\067\340\001\002\000" +
    "\004\002\337\001\002\000\012\057\017\060\016\061\013" +
    "\062\012\001\002\000\004\002\000\001\002\000\004\067" +
    "\uffa1\001\002\000\006\057\336\067\uff9b\001\002\000\010" +
    "\057\334\061\333\067\uff96\001\002\000\004\067\020\001" +
    "\002\000\004\067\uffa2\001\002\000\004\067\uffa3\001\002" +
    "\000\004\067\uffa4\001\002\000\016\003\025\013\026\021" +
    "\031\025\uff93\027\uff93\067\032\001\002\000\020\002\ufffd" +
    "\054\005\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\004\001" +
    "\002\000\006\025\uff9c\027\uff9c\001\002\000\020\002\ufff9" +
    "\054\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\001" +
    "\002\000\020\002\ufff8\054\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\001\002\000\062\002\uff9f\003\uff9f\005" +
    "\uff9f\021\uff9f\030\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f" +
    "\043\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056" +
    "\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f" +
    "\065\uff9f\067\uff9f\001\002\000\024\005\060\021\073\027" +
    "\327\043\103\055\052\056\074\064\105\065\054\067\110" +
    "\001\002\000\006\025\323\027\322\001\002\000\020\002" +
    "\ufffa\054\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa" +
    "\001\002\000\016\022\ufff3\027\ufff3\057\017\060\016\061" +
    "\013\062\012\001\002\000\010\013\026\025\uff93\027\uff93" +
    "\001\002\000\006\025\uff9e\027\uff9e\001\002\000\006\022" +
    "\ufff4\027\ufff4\001\002\000\004\067\321\001\002\000\006" +
    "\022\040\027\037\001\002\000\012\057\017\060\016\061" +
    "\013\062\012\001\002\000\006\023\041\025\042\001\002" +
    "\000\060\003\uffec\005\uffec\021\uffec\024\044\030\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\043\uffec\051\uffec\052\uffec" +
    "\053\uffec\055\uffec\056\uffec\057\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\063\004\064\uffec\065\uffec\067\uffec\001\002\000\020" +
    "\002\ufff7\054\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063" +
    "\ufff7\001\002\000\020\002\ufff6\054\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\001\002\000\020\002\ufff0\054" +
    "\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\001\002" +
    "\000\044\003\106\005\060\021\073\030\071\032\057\033" +
    "\076\034\111\035\066\043\103\051\065\052\053\053\104" +
    "\055\052\056\074\064\105\065\054\067\110\001\002\000" +
    "\012\057\017\060\016\061\013\062\012\001\002\000\004" +
    "\067\050\001\002\000\014\003\025\013\026\025\uff93\027" +
    "\uff93\067\032\001\002\000\044\003\uffed\005\uffed\021\uffed" +
    "\030\uffed\032\uffed\033\uffed\034\uffed\035\uffed\043\uffed\051" +
    "\uffed\052\uffed\053\uffed\055\uffed\056\uffed\064\uffed\065\uffed" +
    "\067\uffed\001\002\000\004\021\314\001\002\000\004\025" +
    "\313\001\002\000\044\004\uff7e\005\uff7e\006\uff7e\007\uff7e" +
    "\010\uff7e\022\uff7e\025\uff7e\026\uff7e\027\uff7e\036\uff7e\037" +
    "\uff7e\040\uff7e\041\uff7e\042\uff7e\044\uff7e\045\uff7e\046\uff7e" +
    "\001\002\000\014\022\uffdd\025\uffdd\027\uffdd\045\uffdd\046" +
    "\uffdd\001\002\000\054\003\uffe9\005\uffe9\021\uffe9\022\uffe9" +
    "\024\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\043" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\055\uffe9" +
    "\056\uffe9\064\uffe9\065\uffe9\067\uffe9\001\002\000\004\021" +
    "\307\001\002\000\004\064\306\001\002\000\046\003\106" +
    "\005\060\021\073\024\305\030\071\032\057\033\076\034" +
    "\111\035\066\043\103\051\065\052\053\053\104\055\052" +
    "\056\074\064\105\065\054\067\110\001\002\000\004\025" +
    "\271\001\002\000\054\003\uffe8\005\uffe8\021\uffe8\022\uffe8" +
    "\024\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\043" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8" +
    "\056\uffe8\064\uffe8\065\uffe8\067\uffe8\001\002\000\014\022" +
    "\uffd2\025\uffd2\027\uffd2\045\uffd2\046\uffd2\001\002\000\022" +
    "\005\060\021\073\043\103\055\052\056\074\064\105\065" +
    "\054\067\110\001\002\000\004\021\251\001\002\000\014" +
    "\022\uffdf\025\uffdf\027\uffdf\045\uffdf\046\uffdf\001\002\000" +
    "\054\003\uffe7\005\uffe7\021\uffe7\022\uffe7\024\uffe7\030\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\043\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\055\uffe7\056\uffe7\064\uffe7" +
    "\065\uffe7\067\uffe7\001\002\000\004\021\242\001\002\000" +
    "\042\004\143\005\146\006\147\007\144\010\145\022\uffd5" +
    "\025\uffd5\027\uffd5\036\155\037\157\040\160\041\154\042" +
    "\153\044\156\045\uffd5\046\uffd5\001\002\000\022\005\060" +
    "\021\073\043\103\055\052\056\074\064\105\065\054\067" +
    "\110\001\002\000\004\021\226\001\002\000\014\022\uffdc" +
    "\025\uffdc\027\uffdc\045\uffdc\046\uffdc\001\002\000\004\023" +
    "\164\001\002\000\054\003\uffe5\005\uffe5\021\uffe5\022\uffe5" +
    "\024\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\043" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5" +
    "\056\uffe5\064\uffe5\065\uffe5\067\uffe5\001\002\000\050\003" +
    "\uffea\005\uffea\021\uffea\022\uffea\024\uffea\030\uffea\032\uffea" +
    "\033\uffea\034\uffea\035\uffea\043\uffea\051\uffea\052\uffea\053" +
    "\uffea\055\uffea\056\uffea\064\uffea\065\uffea\067\uffea\001\002" +
    "\000\054\003\uffe6\005\uffe6\021\uffe6\022\uffe6\024\uffe6\030" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\043\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6\056\uffe6\064" +
    "\uffe6\065\uffe6\067\uffe6\001\002\000\054\003\uffe1\005\uffe1" +
    "\021\uffe1\022\uffe1\024\uffe1\030\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\043\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\055\uffe1\056\uffe1\064\uffe1\065\uffe1\067\uffe1\001" +
    "\002\000\014\005\060\021\073\064\105\065\054\067\151" +
    "\001\002\000\004\025\207\001\002\000\044\004\uff7f\005" +
    "\uff7f\006\uff7f\007\uff7f\010\uff7f\022\uff7f\025\uff7f\026\uff7f" +
    "\027\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\044" +
    "\uff7f\045\uff7f\046\uff7f\001\002\000\054\003\uffe0\005\uffe0" +
    "\021\uffe0\022\uffe0\024\uffe0\030\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\043\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\055\uffe0\056\uffe0\064\uffe0\065\uffe0\067\uffe0\001" +
    "\002\000\054\003\uffe3\005\uffe3\021\uffe3\022\uffe3\024\uffe3" +
    "\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\043\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\055\uffe3\056\uffe3" +
    "\064\uffe3\065\uffe3\067\uffe3\001\002\000\060\004\uff80\005" +
    "\uff80\006\uff80\007\uff80\010\uff80\013\175\014\132\015\134" +
    "\016\136\017\130\020\140\021\200\022\uff80\025\uff80\027" +
    "\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\044\uff80" +
    "\045\uff80\046\uff80\001\002\000\004\021\114\001\002\000" +
    "\054\003\uffe2\005\uffe2\021\uffe2\022\uffe2\024\uffe2\030\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\043\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2\064\uffe2" +
    "\065\uffe2\067\uffe2\001\002\000\014\022\uffd1\025\uffd1\027" +
    "\uffd1\045\uffd1\046\uffd1\001\002\000\006\025\uffb8\067\115" +
    "\001\002\000\016\013\175\014\132\015\134\016\136\017" +
    "\130\020\140\001\002\000\004\022\163\001\002\000\004" +
    "\025\121\001\002\000\004\025\uffb9\001\002\000\006\025" +
    "\uffb6\067\122\001\002\000\016\036\155\037\157\040\160" +
    "\041\154\042\153\044\156\001\002\000\004\025\124\001" +
    "\002\000\006\022\uffb2\067\125\001\002\000\022\011\127" +
    "\012\137\013\135\014\132\015\134\016\136\017\130\020" +
    "\140\001\002\000\004\022\uffba\001\002\000\004\022\uff87" +
    "\001\002\000\014\005\uff82\021\uff82\064\uff82\065\uff82\067" +
    "\uff82\001\002\000\012\005\060\064\105\065\054\067\151" +
    "\001\002\000\014\005\uff83\021\uff83\064\uff83\065\uff83\067" +
    "\uff83\001\002\000\004\022\uffb5\001\002\000\014\005\uff85" +
    "\021\uff85\064\uff85\065\uff85\067\uff85\001\002\000\004\067" +
    "\141\001\002\000\014\005\uff84\021\uff84\064\uff84\065\uff84" +
    "\067\uff84\001\002\000\004\022\uff86\001\002\000\014\005" +
    "\uff81\021\uff81\064\uff81\065\uff81\067\uff81\001\002\000\014" +
    "\004\143\005\146\006\147\007\144\010\145\001\002\000" +
    "\012\005\060\064\105\065\054\067\151\001\002\000\022" +
    "\005\uff8c\021\uff8c\043\uff8c\055\uff8c\056\uff8c\064\uff8c\065" +
    "\uff8c\067\uff8c\001\002\000\022\005\uff89\021\uff89\043\uff89" +
    "\055\uff89\056\uff89\064\uff89\065\uff89\067\uff89\001\002\000" +
    "\022\005\uff88\021\uff88\043\uff88\055\uff88\056\uff88\064\uff88" +
    "\065\uff88\067\uff88\001\002\000\022\005\uff8b\021\uff8b\043" +
    "\uff8b\055\uff8b\056\uff8b\064\uff8b\065\uff8b\067\uff8b\001\002" +
    "\000\022\005\uff8a\021\uff8a\043\uff8a\055\uff8a\056\uff8a\064" +
    "\uff8a\065\uff8a\067\uff8a\001\002\000\004\022\uffb3\001\002" +
    "\000\044\004\uff80\005\uff80\006\uff80\007\uff80\010\uff80\022" +
    "\uff80\025\uff80\026\uff80\027\uff80\036\uff80\037\uff80\040\uff80" +
    "\041\uff80\042\uff80\044\uff80\045\uff80\046\uff80\001\002\000" +
    "\004\022\uffb4\001\002\000\022\005\uff8f\021\uff8f\043\uff8f" +
    "\055\uff8f\056\uff8f\064\uff8f\065\uff8f\067\uff8f\001\002\000" +
    "\022\005\uff8d\021\uff8d\043\uff8d\055\uff8d\056\uff8d\064\uff8d" +
    "\065\uff8d\067\uff8d\001\002\000\022\005\uff92\021\uff92\043" +
    "\uff92\055\uff92\056\uff92\064\uff92\065\uff92\067\uff92\001\002" +
    "\000\022\005\uff91\021\uff91\043\uff91\055\uff91\056\uff91\064" +
    "\uff91\065\uff91\067\uff91\001\002\000\022\005\uff8e\021\uff8e" +
    "\043\uff8e\055\uff8e\056\uff8e\064\uff8e\065\uff8e\067\uff8e\001" +
    "\002\000\022\005\uff90\021\uff90\043\uff90\055\uff90\056\uff90" +
    "\064\uff90\065\uff90\067\uff90\001\002\000\012\005\060\064" +
    "\105\065\054\067\151\001\002\000\004\025\uffb7\001\002" +
    "\000\006\023\164\025\165\001\002\000\046\003\106\005" +
    "\060\021\073\024\170\030\071\032\057\033\076\034\111" +
    "\035\066\043\103\051\065\052\053\053\104\055\052\056" +
    "\074\064\105\065\054\067\110\001\002\000\054\003\uffbb" +
    "\005\uffbb\021\uffbb\022\uffbb\024\uffbb\030\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\043\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\055\uffbb\056\uffbb\064\uffbb\065\uffbb\067" +
    "\uffbb\001\002\000\054\003\uffbd\005\uffbd\021\uffbd\022\uffbd" +
    "\024\uffbd\030\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\043" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\055\uffbd" +
    "\056\uffbd\064\uffbd\065\uffbd\067\uffbd\001\002\000\054\003" +
    "\uffbc\005\uffbc\021\uffbc\022\uffbc\024\uffbc\030\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\043\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\055\uffbc\056\uffbc\064\uffbc\065\uffbc" +
    "\067\uffbc\001\002\000\056\003\uffee\005\uffee\021\uffee\022" +
    "\uffee\024\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\043\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053" +
    "\uffee\055\uffee\056\uffee\064\uffee\065\uffee\067\uffee\001\002" +
    "\000\046\003\106\005\060\021\073\024\172\030\071\032" +
    "\057\033\076\034\111\035\066\043\103\051\065\052\053" +
    "\053\104\055\052\056\074\064\105\065\054\067\110\001" +
    "\002\000\056\003\uffef\005\uffef\021\uffef\022\uffef\024\uffef" +
    "\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\043" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\055\uffef" +
    "\056\uffef\064\uffef\065\uffef\067\uffef\001\002\000\050\003" +
    "\uffeb\005\uffeb\021\uffeb\022\uffeb\024\uffeb\030\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\043\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\055\uffeb\056\uffeb\064\uffeb\065\uffeb\067\uffeb\001\002" +
    "\000\014\005\060\021\073\064\105\065\054\067\151\001" +
    "\002\000\014\005\uffda\021\uffda\064\uffda\065\uffda\067\uffda" +
    "\001\002\000\014\005\uffd9\021\uffd9\064\uffd9\065\uffd9\067" +
    "\uffd9\001\002\000\014\022\uffdb\025\uffdb\027\uffdb\045\uffdb" +
    "\046\uffdb\001\002\000\024\005\060\021\073\022\202\043" +
    "\103\055\052\056\074\064\105\065\054\067\110\001\002" +
    "\000\006\022\uffcf\027\uffcf\001\002\000\014\022\uffd3\025" +
    "\uffd3\027\uffd3\045\uffd3\046\uffd3\001\002\000\006\022\205" +
    "\027\204\001\002\000\022\005\060\021\073\043\103\055" +
    "\052\056\074\064\105\065\054\067\110\001\002\000\014" +
    "\022\uffd4\025\uffd4\027\uffd4\045\uffd4\046\uffd4\001\002\000" +
    "\006\022\uffd0\027\uffd0\001\002\000\054\003\uffa7\005\uffa7" +
    "\021\uffa7\022\uffa7\024\uffa7\030\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\043\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\055\uffa7\056\uffa7\064\uffa7\065\uffa7\067\uffa7\001" +
    "\002\000\014\022\uffde\025\uffde\027\uffde\045\uffde\046\uffde" +
    "\001\002\000\004\032\212\001\002\000\004\021\213\001" +
    "\002\000\024\003\217\005\060\021\073\043\103\055\052" +
    "\056\074\064\105\065\054\067\110\001\002\000\010\022" +
    "\uffca\045\223\046\222\001\002\000\004\022\220\001\002" +
    "\000\010\022\uffc8\045\uffc8\046\uffc8\001\002\000\004\022" +
    "\uffc9\001\002\000\004\025\221\001\002\000\054\003\uffbe" +
    "\005\uffbe\021\uffbe\022\uffbe\024\uffbe\030\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\043\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\055\uffbe\056\uffbe\064\uffbe\065\uffbe\067" +
    "\uffbe\001\002\000\024\003\217\005\060\021\073\043\103" +
    "\055\052\056\074\064\105\065\054\067\110\001\002\000" +
    "\024\003\217\005\060\021\073\043\103\055\052\056\074" +
    "\064\105\065\054\067\110\001\002\000\004\022\uffcb\001" +
    "\002\000\004\022\uffcc\001\002\000\022\005\060\021\073" +
    "\043\103\055\052\056\074\064\105\065\054\067\110\001" +
    "\002\000\006\022\uffc3\027\uffc3\001\002\000\006\022\232" +
    "\027\231\001\002\000\022\005\060\021\073\043\103\055" +
    "\052\056\074\064\105\065\054\067\110\001\002\000\014" +
    "\022\uffc5\025\uffc5\027\uffc5\045\uffc5\046\uffc5\001\002\000" +
    "\006\022\uffc4\027\uffc4\001\002\000\004\022\235\001\002" +
    "\000\014\022\uffd6\025\uffd6\027\uffd6\045\uffd6\046\uffd6\001" +
    "\002\000\022\005\060\021\073\043\103\055\052\056\074" +
    "\064\105\065\054\067\110\001\002\000\022\005\060\021" +
    "\073\043\103\055\052\056\074\064\105\065\054\067\110" +
    "\001\002\000\014\022\uffd8\025\uffd8\027\uffd8\045\uffd8\046" +
    "\uffd8\001\002\000\014\022\uffd7\025\uffd7\027\uffd7\045\uffd7" +
    "\046\uffd7\001\002\000\024\003\217\005\060\021\073\043" +
    "\103\055\052\056\074\064\105\065\054\067\110\001\002" +
    "\000\004\022\244\001\002\000\004\023\164\001\002\000" +
    "\056\003\uffc1\005\uffc1\021\uffc1\022\uffc1\024\uffc1\030\uffc1" +
    "\031\246\032\uffc1\033\uffc1\034\uffc1\035\uffc1\043\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1" +
    "\064\uffc1\065\uffc1\067\uffc1\001\002\000\004\023\164\001" +
    "\002\000\054\003\uffc2\005\uffc2\021\uffc2\022\uffc2\024\uffc2" +
    "\030\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\043\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\055\uffc2\056\uffc2" +
    "\064\uffc2\065\uffc2\067\uffc2\001\002\000\054\003\uffc0\005" +
    "\uffc0\021\uffc0\022\uffc0\024\uffc0\030\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\043\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\055\uffc0\056\uffc0\064\uffc0\065\uffc0\067\uffc0" +
    "\001\002\000\012\005\060\064\105\065\054\067\151\001" +
    "\002\000\004\022\253\001\002\000\004\023\254\001\002" +
    "\000\004\047\256\001\002\000\012\024\uffae\047\uffae\050" +
    "\uffae\053\104\001\002\000\012\005\060\064\105\065\054" +
    "\067\151\001\002\000\004\024\273\001\002\000\010\024" +
    "\uffb0\047\256\050\261\001\002\000\004\026\264\001\002" +
    "\000\004\024\uffaf\001\002\000\010\024\uffac\047\uffac\050" +
    "\uffac\001\002\000\044\003\106\005\060\021\265\030\071" +
    "\032\057\033\076\034\111\035\066\043\103\051\065\052" +
    "\053\053\104\055\052\056\074\064\105\065\054\067\110" +
    "\001\002\000\044\003\106\005\060\021\073\030\071\032" +
    "\057\033\076\034\111\035\066\043\103\051\065\052\053" +
    "\053\104\055\052\056\074\064\105\065\054\067\110\001" +
    "\002\000\004\024\uffa9\001\002\000\046\003\106\005\060" +
    "\021\073\022\272\030\071\032\057\033\076\034\111\035" +
    "\066\043\103\051\065\052\053\053\104\055\052\056\074" +
    "\064\105\065\054\067\110\001\002\000\006\022\235\025" +
    "\271\001\002\000\054\003\uffe4\005\uffe4\021\uffe4\022\uffe4" +
    "\024\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\043" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\055\uffe4" +
    "\056\uffe4\064\uffe4\065\uffe4\067\uffe4\001\002\000\004\024" +
    "\uffa8\001\002\000\054\003\uffb1\005\uffb1\021\uffb1\022\uffb1" +
    "\024\uffb1\030\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\043" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\055\uffb1" +
    "\056\uffb1\064\uffb1\065\uffb1\067\uffb1\001\002\000\004\026" +
    "\275\001\002\000\044\003\106\005\060\021\276\030\071" +
    "\032\057\033\076\034\111\035\066\043\103\051\065\052" +
    "\053\053\104\055\052\056\074\064\105\065\054\067\110" +
    "\001\002\000\044\003\106\005\060\021\073\030\071\032" +
    "\057\033\076\034\111\035\066\043\103\051\065\052\053" +
    "\053\104\055\052\056\074\064\105\065\054\067\110\001" +
    "\002\000\012\024\uffab\047\uffab\050\uffab\053\uffab\001\002" +
    "\000\046\003\106\005\060\021\073\022\301\030\071\032" +
    "\057\033\076\034\111\035\066\043\103\051\065\052\053" +
    "\053\104\055\052\056\074\064\105\065\054\067\110\001" +
    "\002\000\012\024\uffaa\047\uffaa\050\uffaa\053\uffaa\001\002" +
    "\000\010\024\uffad\047\uffad\050\uffad\001\002\000\004\025" +
    "\304\001\002\000\054\003\uffa5\005\uffa5\021\uffa5\022\uffa5" +
    "\024\uffa5\030\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\043" +
    "\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\055\uffa5" +
    "\056\uffa5\064\uffa5\065\uffa5\067\uffa5\001\002\000\020\002" +
    "\ufff1\054\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1" +
    "\001\002\000\044\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010" +
    "\uff7d\022\uff7d\025\uff7d\026\uff7d\027\uff7d\036\uff7d\037\uff7d" +
    "\040\uff7d\041\uff7d\042\uff7d\044\uff7d\045\uff7d\046\uff7d\001" +
    "\002\000\024\003\217\005\060\021\073\043\103\055\052" +
    "\056\074\064\105\065\054\067\110\001\002\000\004\022" +
    "\311\001\002\000\004\023\164\001\002\000\054\003\uffbf" +
    "\005\uffbf\021\uffbf\022\uffbf\024\uffbf\030\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\043\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\055\uffbf\056\uffbf\064\uffbf\065\uffbf\067" +
    "\uffbf\001\002\000\054\003\uffa6\005\uffa6\021\uffa6\022\uffa6" +
    "\024\uffa6\030\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\043" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\055\uffa6" +
    "\056\uffa6\064\uffa6\065\uffa6\067\uffa6\001\002\000\006\022" +
    "\315\067\316\001\002\000\014\022\uffc6\025\uffc6\027\uffc6" +
    "\045\uffc6\046\uffc6\001\002\000\004\022\317\001\002\000" +
    "\014\022\uffc7\025\uffc7\027\uffc7\045\uffc7\046\uffc7\001\002" +
    "\000\006\022\ufff5\027\ufff5\001\002\000\006\022\ufff2\027" +
    "\ufff2\001\002\000\004\067\324\001\002\000\062\002\uffa0" +
    "\003\uffa0\005\uffa0\021\uffa0\030\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\043\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\065\uffa0\067\uffa0\001\002\000\010\013\026" +
    "\025\uff93\027\uff93\001\002\000\006\025\uff9d\027\uff9d\001" +
    "\002\000\006\025\uff95\027\uff95\001\002\000\004\003\330" +
    "\001\002\000\006\025\uff94\027\uff94\001\002\000\004\002" +
    "\ufffe\001\002\000\004\067\uff98\001\002\000\006\057\334" +
    "\067\uff96\001\002\000\004\067\uff97\001\002\000\004\067" +
    "\uff99\001\002\000\004\067\uff9a\001\002\000\004\002\001" +
    "\001\002\000\004\021\031\001\002\000\020\002\ufffd\054" +
    "\005\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\004\001\002" +
    "\000\020\002\ufffb\054\ufffb\057\ufffb\060\ufffb\061\ufffb\062" +
    "\ufffb\063\ufffb\001\002\000\020\002\ufffc\054\ufffc\057\ufffc" +
    "\060\ufffc\061\ufffc\062\ufffc\063\ufffc\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\010\002\005\003\007\070\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\044\013\045\014\046\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\027\005\022\050\023\051\026" +
    "\053\020\054\021\001\001\000\006\003\330\070\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\063\011\112\017\325\020" +
    "\074\021\066\023\054\036\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\035\007\033\044\034\045" +
    "\014\046\010\001\001\000\004\054\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\317\044\034\045\014\046\010\001\001" +
    "\000\004\013\042\001\001\000\006\055\044\070\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\010\063\011\112\015\060\016\077\017\061\020" +
    "\074\021\066\023\054\025\055\026\062\027\067\030\076" +
    "\032\106\033\111\034\101\036\071\037\100\001\001\000" +
    "\010\044\046\045\014\046\010\001\001\000\002\001\001" +
    "\000\010\050\050\051\026\054\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\010\063\011\112\016\172\017\061" +
    "\020\074\021\066\023\054\025\055\026\062\027\067\030" +
    "\076\032\106\033\111\034\101\036\071\037\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\063\011\112\017\302\020\074\021\066\023\054" +
    "\036\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\065\236\066\235" +
    "\001\001\000\020\010\063\011\112\017\233\020\074\021" +
    "\066\023\054\036\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\207\036\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\173" +
    "\064\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\117\056\115\060\116\001\001" +
    "\000\006\022\173\064\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\122\001\001" +
    "\000\004\066\160\001\001\000\002\001\001\000\004\062" +
    "\125\001\001\000\006\063\132\064\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\141\001\001\000\004" +
    "\036\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\161\001" +
    "\001\000\002\001\001\000\006\014\166\057\165\001\001" +
    "\000\044\010\063\011\112\015\170\016\077\017\061\020" +
    "\074\021\066\023\054\025\055\026\062\027\067\030\076" +
    "\032\106\033\111\034\101\036\071\037\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\010\063\011\112\016\172\017\061\020" +
    "\074\021\066\023\054\025\055\026\062\027\067\030\076" +
    "\032\106\033\111\034\101\036\071\037\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\176\036\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\063\011\112\017\200\020\074\021\066" +
    "\023\054\024\202\036\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\063\011\112" +
    "\017\205\020\074\021\066\023\054\036\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\063\011\112\017\215\020\074\021\066\023\054\035\214" +
    "\036\071\067\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\063\011\112\017\215\020" +
    "\074\021\066\023\054\035\224\036\071\067\213\001\001" +
    "\000\024\010\063\011\112\017\215\020\074\021\066\023" +
    "\054\035\223\036\071\067\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\063\011\112\012\227\017" +
    "\226\020\074\021\066\023\054\036\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\063\011\112\017" +
    "\232\020\074\021\066\023\054\036\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\063\011\112\017\240\020\074\021\066" +
    "\023\054\036\071\001\001\000\020\010\063\011\112\017" +
    "\237\020\074\021\066\023\054\036\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\063\011\112\017" +
    "\215\020\074\021\066\023\054\035\242\036\071\067\213" +
    "\001\001\000\002\001\001\000\004\014\244\001\001\000" +
    "\004\031\246\001\001\000\004\014\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\256\041\257" +
    "\042\254\001\001\000\004\032\301\001\001\000\004\036" +
    "\273\001\001\000\002\001\001\000\006\042\262\043\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\010\063\011\112\016\265\017\061\020\074" +
    "\021\066\023\054\025\055\026\062\027\067\030\076\032" +
    "\106\033\111\034\101\036\071\037\100\001\001\000\044" +
    "\010\063\011\112\015\266\016\077\017\267\020\074\021" +
    "\066\023\054\025\055\026\062\027\067\030\076\032\106" +
    "\033\111\034\101\036\071\037\100\001\001\000\002\001" +
    "\001\000\042\010\063\011\112\016\172\017\061\020\074" +
    "\021\066\023\054\025\055\026\062\027\067\030\076\032" +
    "\106\033\111\034\101\036\071\037\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\010\063\011\112\016\276" +
    "\017\061\020\074\021\066\023\054\025\055\026\062\027" +
    "\067\030\076\032\106\033\111\034\101\036\071\037\100" +
    "\001\001\000\044\010\063\011\112\015\277\016\077\017" +
    "\267\020\074\021\066\023\054\025\055\026\062\027\067" +
    "\030\076\032\106\033\111\034\101\036\071\037\100\001" +
    "\001\000\002\001\001\000\042\010\063\011\112\016\172" +
    "\017\061\020\074\021\066\023\054\025\055\026\062\027" +
    "\067\030\076\032\106\033\111\034\101\036\071\037\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\063\011\112\017\215\020\074\021\066\023" +
    "\054\035\307\036\071\067\213\001\001\000\002\001\001" +
    "\000\004\014\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\324\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\342\005\341" +
    "\052\340\001\001\000\006\003\343\070\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static Lexer s;
    public static int errors = 0;
    public static ErrorData errorData = ErrorData.getInstance();
    ErrorData detectedError;
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        if (info instanceof String){
            errors++;
            String mensaje = ", se esperaba: " + message;
            try{
                detectedError.setId(errors);
            }catch(Exception e){
                detectedError = new ErrorData(errors, info.toString(), mensaje);
            }
            detectedError.setMessage(detectedError.getMessage() + mensaje);
            errorData.insertarError(detectedError);
        }
        else {
            StringBuilder m = new StringBuilder("Error");
            if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                if (s.left >= 0) {                
                    m.append(" en la línea "+(s.left+1));
                    if (s.right >= 0)
                        m.append(", columna "+(s.right+1));
                }
            }
            m.append(" : " + message);
            detectedError = new ErrorData(errors, info.toString(), m.toString());
        }
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            s = new Lexer(new FileReader(args[0]));
            Parser p = new Parser(s);
            p.parse();
            System.out.println("\n*** Fin del parseo ***");
            System.out.println("Total de errores = " + errors + ".");
            errors = 0;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // valor ::= SUBSTRACT LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // valor ::= LITERAL_CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // valor ::= LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operacion_bin_2 ::= MODEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operacion_bin_2 ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operacion_bin_2 ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operacion_bin_2 ::= TIMESEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operacion_bin_2 ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operacion_bin_1 ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operacion_bin_1 ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operador ::= MODULUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operador ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operador ::= SUBSTRACT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operador ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // comparador ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // comparador ::= MAYOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comparador ::= MENOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // comparador ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // comparador ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // validar_expr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // validar_expr ::= ASSIGN COMMA error 
            {
              Object RESULT =null;
		 parser.report_error("igualar el identificador a una expresión.", "");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // validar_expr ::= ASSIGN expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // long_stmt_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_aux",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // long_stmt_aux ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt_aux",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // long_stmt ::= LONG long_stmt_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // long_stmt ::= LONG LONG long_stmt_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // short_stmt ::= SHORT INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // short_stmt ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_ids ::= validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lista_ids ::= lista_ids COMMA IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_ids ::= IDENTIFICADOR validar_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_ids",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaracion_var ::= error 
            {
              Object RESULT =null;
		 parser.report_error(" ; al final de la declaración.", "");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declaracion_var ::= lista_ids SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipo_dato ::= long_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipo_dato ::= short_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // continue_stmt ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // break_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // default_stmt ::= DEFAULT COLON LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // default_stmt ::= DEFAULT COLON sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // case_stmt ::= CASE valor COLON LPAREN lista_sentencias RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // case_stmt ::= CASE valor COLON sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lista_case ::= lista_case case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_case ::= case_stmt break_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lista_case ::= case_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_case",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // case_body ::= lista_case default_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // case_body ::= lista_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // switch_stmt ::= SWITCH LPAREN valor RPAREN LBRACE case_body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fin_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // fin_for ::= IDENTIFICADOR ASSIGN IDENTIFICADOR operador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // fin_for ::= IDENTIFICADOR operacion_bin_2 valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // fin_for ::= IDENTIFICADOR operacion_bin_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fin_for",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // medio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // medio_for ::= IDENTIFICADOR comparador valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("medio_for",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // inicio_for ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // inicio_for ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio_for",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicion_for ::= inicio_for SEMICOLON medio_for SEMICOLON fin_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_for",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_for ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_for",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_for ::= bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_for",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // for_statement ::= FOR LPAREN condicion_for RPAREN tipo_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dowhile_statement ::= DO bloque WHILE LPAREN condicion RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhile_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // while_statement ::= WHILE LPAREN condicion RPAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // else_statement ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_statement ::= IF LPAREN condicion RPAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_statement ::= IF LPAREN condicion RPAREN bloque else_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // write_f_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // write_f_aux ::= write_f_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // write_f ::= WRITE LPAREN write_f_aux RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // read_f ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // read_f ::= READ LPAREN IDENTIFICADOR RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicion_2 ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                parser.report_error("una condición formada por una expresión.", "");
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicion ::= condicion_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicion ::= condicion_2 OR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicion ::= condicion_2 AND condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // is_constante ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_constante",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // is_constante ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_constante",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // call_function_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function_aux",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // call_function_aux ::= call_function_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function_aux",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // call_function ::= write_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // call_function ::= read_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // call_function ::= IDENTIFICADOR LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // call_function ::= IDENTIFICADOR LPAREN call_function_aux RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= LPAREN expresion RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= valor comparador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= valor operador expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_asignaciones ::= operacion_bin_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_asignaciones ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion ::= IDENTIFICADOR op_asignaciones exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= call_function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= EXCLAMACION exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= error 
            {
              Object RESULT =null;
		 parser.report_error("no declarar variable aquí.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= return_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= continue_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= break_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= for_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= dowhile_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_var_interna ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var_interna",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_var_interna ::= is_constante tipo_dato IDENTIFICADOR declaracion_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var_interna",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque ::= LBRACE lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque_global ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bloque_global ::= LBRACE declaracion_var_interna lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_parametros ::= lista_parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcion ::= LPAREN lista_parametros RPAREN bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_funcion ::= LPAREN lista_parametros RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_funcion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decision_operacion ::= declaracion_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decision_operacion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decision_operacion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decision_funcion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decision_funcion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa_c ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa_c ::= is_constante tipo_dato IDENTIFICADOR decision_operacion programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa_c ::= VOID IDENTIFICADOR decision_funcion programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

