
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 19 23:28:37 CST 2015
//----------------------------------------------------

package parser.data;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.Hashtable;
import java.util.Stack;
import parser.controller.DatosArchivoController;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 19 23:28:37 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\053\002\000\002\003\007\000\002\054\002" +
    "\000\002\003\007\000\002\003\002\000\002\052\006\000" +
    "\002\042\003\000\002\043\003\000\002\044\003\000\002" +
    "\045\003\000\002\031\003\000\002\031\003\000\002\004" +
    "\005\000\002\005\005\000\002\055\002\000\002\005\007" +
    "\000\002\011\006\000\002\011\004\000\002\011\003\000" +
    "\002\012\005\000\002\012\004\000\002\056\002\000\002" +
    "\012\005\000\002\033\004\000\002\033\002\000\002\013" +
    "\004\000\002\013\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\004\000\002\014\003\000\002\015\003\000" +
    "\002\015\004\000\002\015\003\000\002\015\003\000\002" +
    "\016\005\000\002\020\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\004\000\002\017\003" +
    "\000\002\021\005\000\002\021\003\000\002\021\003\000" +
    "\002\026\005\000\002\026\005\000\002\026\003\000\002" +
    "\037\003\000\002\006\006\000\002\006\005\000\002\057" +
    "\002\000\002\006\007\000\002\007\006\000\002\060\002" +
    "\000\002\007\007\000\002\010\005\000\002\010\003\000" +
    "\002\022\010\000\002\050\003\000\002\046\003\000\002" +
    "\047\003\000\002\024\004\000\002\024\002\000\002\051" +
    "\003\000\002\023\007\000\002\061\002\000\002\023\010" +
    "\000\002\062\002\000\002\023\007\000\002\063\002\000" +
    "\002\023\007\000\002\064\002\000\002\025\006\000\002" +
    "\032\004\000\002\032\004\000\002\032\002\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\035\003\000" +
    "\002\035\003\000\002\034\003\000\002\034\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\010\002\ufffa\045\007\050\011\001\002\000" +
    "\004\053\015\001\002\000\010\002\ufffa\045\007\050\011" +
    "\001\002\000\004\053\015\001\002\000\004\053\ufff7\001" +
    "\002\000\004\002\013\001\002\000\004\053\ufff8\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002\000" +
    "\010\013\023\021\020\025\uffb2\001\002\000\010\013\ufff6" +
    "\021\ufff6\025\ufff6\001\002\000\010\002\ufffc\045\ufffc\050" +
    "\ufffc\001\002\000\010\002\ufff3\045\ufff3\050\ufff3\001\002" +
    "\000\006\003\117\022\116\001\002\000\004\025\ufff5\001" +
    "\002\000\010\002\ufff4\045\ufff4\050\ufff4\001\002\000\022" +
    "\003\042\005\033\021\043\040\030\046\026\047\041\051" +
    "\040\053\044\001\002\000\004\025\025\001\002\000\034" +
    "\002\ufff9\005\ufff9\021\ufff9\030\ufff9\032\ufff9\040\ufff9\044" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9" +
    "\001\002\000\004\021\107\001\002\000\014\022\uffd3\025" +
    "\uffd3\027\uffd3\042\uffd3\043\uffd3\001\002\000\012\005\033" +
    "\021\043\051\040\053\051\001\002\000\014\022\uffdd\025" +
    "\uffdd\027\uffdd\042\uffdd\043\uffdd\001\002\000\014\022\uffdf" +
    "\025\uffdf\027\uffdf\042\uffdf\043\uffdf\001\002\000\004\051" +
    "\105\001\002\000\040\004\075\005\071\011\066\012\102" +
    "\022\uffd5\025\uffd5\027\uffd5\033\073\034\072\035\101\036" +
    "\074\037\077\041\070\042\uffd5\043\uffd5\001\002\000\014" +
    "\022\uffdc\025\uffdc\027\uffdc\042\uffdc\043\uffdc\001\002\000" +
    "\014\022\uffd2\025\uffd2\027\uffd2\042\uffd2\043\uffd2\001\002" +
    "\000\004\025\uffb4\001\002\000\040\004\uffa6\005\uffa6\011" +
    "\uffa6\012\uffa6\022\uffa6\025\uffa6\027\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\041\uffa6\042\uffa6\043\uffa6\001" +
    "\002\000\004\021\055\001\002\000\004\025\uffb3\001\002" +
    "\000\020\005\033\021\043\040\030\046\026\047\041\051" +
    "\040\053\044\001\002\000\044\004\uffa7\005\uffa7\011\uffa7" +
    "\012\uffa7\013\047\021\046\022\uffa7\025\uffa7\027\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\001\002\000\012\005\033\021\043\051\040\053" +
    "\051\001\002\000\004\022\050\001\002\000\012\005\uffda" +
    "\021\uffda\051\uffda\053\uffda\001\002\000\014\022\uffd4\025" +
    "\uffd4\027\uffd4\042\uffd4\043\uffd4\001\002\000\040\004\uffa7" +
    "\005\uffa7\011\uffa7\012\uffa7\022\uffa7\025\uffa7\027\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\001\002\000\014\022\uffdb\025\uffdb\027\uffdb\042" +
    "\uffdb\043\uffdb\001\002\000\004\022\054\001\002\000\014" +
    "\022\uffd7\025\uffd7\027\uffd7\042\uffd7\043\uffd7\001\002\000" +
    "\022\003\060\005\033\021\043\040\030\046\026\047\041" +
    "\051\040\053\044\001\002\000\006\022\uffc5\027\uffc5\001" +
    "\002\000\006\022\064\027\063\001\002\000\004\022\uffc8" +
    "\001\002\000\004\022\062\001\002\000\014\022\uffc7\025" +
    "\uffc7\027\uffc7\042\uffc7\043\uffc7\001\002\000\020\005\033" +
    "\021\043\040\030\046\026\047\041\051\040\053\044\001" +
    "\002\000\014\022\uffc9\025\uffc9\027\uffc9\042\uffc9\043\uffc9" +
    "\001\002\000\006\022\uffc6\027\uffc6\001\002\000\014\022" +
    "\uffa9\025\uffa9\027\uffa9\042\uffa9\043\uffa9\001\002\000\014" +
    "\022\uffd6\025\uffd6\027\uffd6\042\uffd6\043\uffd6\001\002\000" +
    "\020\005\uffb0\021\uffb0\040\uffb0\046\uffb0\047\uffb0\051\uffb0" +
    "\053\uffb0\001\002\000\020\005\uffaa\021\uffaa\040\uffaa\046" +
    "\uffaa\047\uffaa\051\uffaa\053\uffaa\001\002\000\020\005\uffad" +
    "\021\uffad\040\uffad\046\uffad\047\uffad\051\uffad\053\uffad\001" +
    "\002\000\020\005\uffb1\021\uffb1\040\uffb1\046\uffb1\047\uffb1" +
    "\051\uffb1\053\uffb1\001\002\000\020\005\uffac\021\uffac\040" +
    "\uffac\046\uffac\047\uffac\051\uffac\053\uffac\001\002\000\020" +
    "\005\uffab\021\uffab\040\uffab\046\uffab\047\uffab\051\uffab\053" +
    "\uffab\001\002\000\020\005\033\021\043\040\030\046\026" +
    "\047\041\051\040\053\044\001\002\000\020\005\uffae\021" +
    "\uffae\040\uffae\046\uffae\047\uffae\051\uffae\053\uffae\001\002" +
    "\000\020\005\033\021\043\040\030\046\026\047\041\051" +
    "\040\053\044\001\002\000\020\005\uffaf\021\uffaf\040\uffaf" +
    "\046\uffaf\047\uffaf\051\uffaf\053\uffaf\001\002\000\014\022" +
    "\uffa8\025\uffa8\027\uffa8\042\uffa8\043\uffa8\001\002\000\014" +
    "\022\uffd9\025\uffd9\027\uffd9\042\uffd9\043\uffd9\001\002\000" +
    "\014\022\uffd8\025\uffd8\027\uffd8\042\uffd8\043\uffd8\001\002" +
    "\000\040\004\uffa5\005\uffa5\011\uffa5\012\uffa5\022\uffa5\025" +
    "\uffa5\027\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\001\002\000\014\022\uffde\025" +
    "\uffde\027\uffde\042\uffde\043\uffde\001\002\000\010\003\111" +
    "\022\110\053\112\001\002\000\014\022\uffcc\025\uffcc\027" +
    "\uffcc\042\uffcc\043\uffcc\001\002\000\004\022\uffcb\001\002" +
    "\000\004\022\113\001\002\000\014\022\uffcd\025\uffcd\027" +
    "\uffcd\042\uffcd\043\uffcd\001\002\000\004\022\115\001\002" +
    "\000\014\022\uffca\025\uffca\027\uffca\042\uffca\043\uffca\001" +
    "\002\000\010\003\123\023\122\025\220\001\002\000\004" +
    "\022\ufff0\001\002\000\004\022\121\001\002\000\006\003" +
    "\123\023\122\001\002\000\032\005\uffe6\021\uffe6\024\127" +
    "\030\uffe6\032\uffe6\040\uffe6\044\uffe6\046\uffe6\047\uffe6\050" +
    "\011\051\uffe6\053\uffe6\001\002\000\010\002\uffec\045\uffec" +
    "\050\uffec\001\002\000\010\002\uffef\045\uffef\050\uffef\001" +
    "\002\000\030\005\uffe6\021\uffe6\030\uffe6\032\uffe6\040\uffe6" +
    "\044\uffe6\046\uffe6\047\uffe6\050\011\051\uffe6\053\uffe6\001" +
    "\002\000\004\053\015\001\002\000\010\002\uffed\045\uffed" +
    "\050\uffed\001\002\000\026\005\033\021\043\030\137\032" +
    "\132\040\030\044\136\046\026\047\041\051\040\053\044" +
    "\001\002\000\030\005\uffe3\021\uffe3\024\uffe3\030\uffe3\032" +
    "\uffe3\040\uffe3\044\uffe3\046\uffe3\047\uffe3\051\uffe3\053\uffe3" +
    "\001\002\000\006\003\200\021\201\001\002\000\004\025" +
    "\177\001\002\000\030\005\033\021\043\024\176\030\137" +
    "\032\132\040\030\044\136\046\026\047\041\051\040\053" +
    "\044\001\002\000\030\005\uffe2\021\uffe2\024\uffe2\030\uffe2" +
    "\032\uffe2\040\uffe2\044\uffe2\046\uffe2\047\uffe2\051\uffe2\053" +
    "\uffe2\001\002\000\020\005\033\021\043\040\030\046\026" +
    "\047\041\051\040\053\044\001\002\000\004\021\uffc3\001" +
    "\002\000\004\021\143\001\002\000\030\005\uffe4\021\uffe4" +
    "\024\uffe4\030\uffe4\032\uffe4\040\uffe4\044\uffe4\046\uffe4\047" +
    "\uffe4\051\uffe4\053\uffe4\001\002\000\030\005\uffe0\021\uffe0" +
    "\024\uffe0\030\uffe0\032\uffe0\040\uffe0\044\uffe0\046\uffe0\047" +
    "\uffe0\051\uffe0\053\uffe0\001\002\000\020\005\033\021\043" +
    "\040\030\046\026\047\041\051\040\053\044\001\002\000" +
    "\010\022\uffcf\042\170\043\167\001\002\000\010\022\uffce" +
    "\042\uffce\043\uffce\001\002\000\004\022\uffc2\001\002\000" +
    "\004\022\151\001\002\000\006\003\153\023\152\001\002" +
    "\000\006\003\uffc1\023\uffc1\001\002\000\030\005\033\021" +
    "\043\024\163\030\137\032\132\040\030\044\136\046\026" +
    "\047\041\051\040\053\044\001\002\000\002\001\002\000" +
    "\032\005\uffbf\021\uffbf\024\uffbf\030\uffbf\031\156\032\uffbf" +
    "\040\uffbf\044\uffbf\046\uffbf\047\uffbf\051\uffbf\053\uffbf\001" +
    "\002\000\006\003\153\023\152\001\002\000\006\003\uffbe" +
    "\023\uffbe\001\002\000\030\005\uffc4\021\uffc4\024\uffc4\030" +
    "\uffc4\032\uffc4\040\uffc4\044\uffc4\046\uffc4\047\uffc4\051\uffc4" +
    "\053\uffc4\001\002\000\030\005\uffc0\021\uffc0\024\uffc0\030" +
    "\uffc0\032\uffc0\040\uffc0\044\uffc0\046\uffc0\047\uffc0\051\uffc0" +
    "\053\uffc0\001\002\000\002\001\002\000\032\005\uffe8\021" +
    "\uffe8\024\uffe8\030\uffe8\031\uffe8\032\uffe8\040\uffe8\044\uffe8" +
    "\046\uffe8\047\uffe8\051\uffe8\053\uffe8\001\002\000\032\005" +
    "\uffea\021\uffea\024\uffea\030\uffea\031\uffea\032\uffea\040\uffea" +
    "\044\uffea\046\uffea\047\uffea\051\uffea\053\uffea\001\002\000" +
    "\030\005\033\021\043\024\165\030\137\032\132\040\030" +
    "\044\136\046\026\047\041\051\040\053\044\001\002\000" +
    "\032\005\uffeb\021\uffeb\024\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\040\uffeb\044\uffeb\046\uffeb\047\uffeb\051\uffeb\053\uffeb\001" +
    "\002\000\030\005\uffe5\021\uffe5\024\uffe5\030\uffe5\032\uffe5" +
    "\040\uffe5\044\uffe5\046\uffe5\047\uffe5\051\uffe5\053\uffe5\001" +
    "\002\000\020\005\033\021\043\040\030\046\026\047\041" +
    "\051\040\053\044\001\002\000\020\005\033\021\043\040" +
    "\030\046\026\047\041\051\040\053\044\001\002\000\004" +
    "\022\uffd0\001\002\000\004\022\uffd1\001\002\000\004\025" +
    "\uffb6\001\002\000\004\025\175\001\002\000\030\005\uffb5" +
    "\021\uffb5\024\uffb5\030\uffb5\032\uffb5\040\uffb5\044\uffb5\046" +
    "\uffb5\047\uffb5\051\uffb5\053\uffb5\001\002\000\010\002\uffee" +
    "\045\uffee\050\uffee\001\002\000\030\005\uffe1\021\uffe1\024" +
    "\uffe1\030\uffe1\032\uffe1\040\uffe1\044\uffe1\046\uffe1\047\uffe1" +
    "\051\uffe1\053\uffe1\001\002\000\004\022\uffb8\001\002\000" +
    "\022\003\203\005\033\021\043\040\030\046\026\047\041" +
    "\051\040\053\044\001\002\000\004\022\211\001\002\000" +
    "\010\003\uffba\022\uffbc\023\uffba\001\002\000\006\003\153" +
    "\023\152\001\002\000\004\022\206\001\002\000\006\003" +
    "\153\023\152\001\002\000\030\005\uffbb\021\uffbb\024\uffbb" +
    "\030\uffbb\032\uffbb\040\uffbb\044\uffbb\046\uffbb\047\uffbb\051" +
    "\uffbb\053\uffbb\001\002\000\030\005\uffb9\021\uffb9\024\uffb9" +
    "\030\uffb9\032\uffb9\040\uffb9\044\uffb9\046\uffb9\047\uffb9\051" +
    "\uffb9\053\uffb9\001\002\000\006\003\153\023\152\001\002" +
    "\000\030\005\uffbd\021\uffbd\024\uffbd\030\uffbd\032\uffbd\040" +
    "\uffbd\044\uffbd\046\uffbd\047\uffbd\051\uffbd\053\uffbd\001\002" +
    "\000\004\022\214\001\002\000\006\003\153\023\152\001" +
    "\002\000\030\005\uffb7\021\uffb7\024\uffb7\030\uffb7\032\uffb7" +
    "\040\uffb7\044\uffb7\046\uffb7\047\uffb7\051\uffb7\053\uffb7\001" +
    "\002\000\006\013\023\025\uffb2\001\002\000\026\005\uffe7" +
    "\021\uffe7\030\uffe7\032\uffe7\040\uffe7\044\uffe7\046\uffe7\047" +
    "\uffe7\051\uffe7\053\uffe7\001\002\000\010\002\ufff2\045\ufff2" +
    "\050\ufff2\001\002\000\010\002\ufff1\045\ufff1\050\ufff1\001" +
    "\002\000\010\002\ufffa\045\007\050\011\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\uffff\001\002\000\004\021" +
    "\020\001\002\000\010\002\ufffe\045\ufffe\050\ufffe\001\002" +
    "\000\010\002\ufffa\045\007\050\011\001\002\000\004\002" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\014\002\007\003\011\042\005\043\003\052" +
    "\004\001\001\000\004\044\224\001\001\000\012\003\223" +
    "\042\005\043\003\052\004\001\001\000\004\044\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\021\005" +
    "\016\031\015\032\020\045\023\001\001\000\002\001\001" +
    "\000\004\054\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\026" +
    "\007\035\015\036\016\034\017\031\021\030\027\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\105\027\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\066\035\077\036\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\026\007\035\015" +
    "\052\016\034\017\031\021\030\027\033\001\001\000\004" +
    "\020\044\001\001\000\006\017\051\027\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\026\007\035\010\056\015\055\016\034" +
    "\017\031\021\030\027\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\026\007\035\015\064\016" +
    "\034\017\031\021\030\027\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\026\007\035\015\103\016\034\017\031\021\030\027\033" +
    "\001\001\000\002\001\001\000\020\006\026\007\035\015" +
    "\102\016\034\017\031\021\030\027\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\220\001\001\000\004\055\117\001\001\000" +
    "\002\001\001\000\004\011\123\001\001\000\010\033\127" +
    "\042\125\052\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\216\042\125\052\124\001\001\000\004" +
    "\044\215\001\001\000\002\001\001\000\034\006\026\007" +
    "\035\013\133\014\140\015\132\016\034\017\031\021\030" +
    "\022\130\023\134\025\141\027\033\050\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\006\026\007\035\014\165\015\132\016\034\017\031\021" +
    "\030\022\130\023\134\025\141\027\033\050\137\001\001" +
    "\000\002\001\001\000\020\006\026\007\035\015\172\016" +
    "\034\017\031\021\030\027\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\006\026\007\035\015\144\016\034\017\031\021\030" +
    "\026\145\027\033\037\143\046\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\147" +
    "\001\001\000\004\012\153\001\001\000\002\001\001\000" +
    "\034\006\026\007\035\013\163\014\140\015\132\016\034" +
    "\017\031\021\030\022\130\023\134\025\141\027\033\050" +
    "\137\001\001\000\004\056\160\001\001\000\006\024\156" +
    "\051\154\001\001\000\004\012\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\026\007\035\014\165\015\132\016\034\017\031\021\030" +
    "\022\130\023\134\025\141\027\033\050\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\026\007\035" +
    "\015\144\016\034\017\031\021\030\026\171\027\033\037" +
    "\143\001\001\000\024\006\026\007\035\015\144\016\034" +
    "\017\031\021\030\026\170\027\033\037\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\212\001\001\000\024\006\026" +
    "\007\035\015\144\016\034\017\031\021\030\026\201\027" +
    "\033\037\143\001\001\000\002\001\001\000\006\061\204" +
    "\062\203\001\001\000\004\012\207\001\001\000\002\001" +
    "\001\000\004\012\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\214\001\001\000\002\001\001" +
    "\000\006\032\020\045\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\222\042\005" +
    "\043\003\052\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\021\005\016\031\225\001\001\000\004" +
    "\053\226\001\001\000\012\003\227\042\005\043\003\052" +
    "\004\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static Lexer s;
    public static int errors = 0;
    public static ErrorData errorData = ErrorData.getInstance();
    public DatosArchivoController archivoController = DatosArchivoController.getInstance();
    ErrorData detectedError;
    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public PilaSemantica pilaSemantica = new PilaSemantica();
    String assemblyFile = "";
    
    /* Reporte de error encontrado. */

    public void report_error(String message,int line, int column) {
        StringBuilder m = new StringBuilder("Error");
        m.append(" en la línea "+(line+1));
        m.append(", columna "+(column+1));
        m.append(" : " + message);
        archivoController.mostrarErroresSemanticos(m.toString());
    }
    public void report_error(String message, Object info) {
        if (info instanceof String){
            errors++;
            String mensaje = ", se esperaba: " + message;
            try{
                detectedError.setId(errors);
            }catch(Exception e){
                detectedError = new ErrorData(errors, info.toString(), mensaje);
            }
            detectedError.setMessage(detectedError.getMessage() + mensaje);
            errorData.insertarError(detectedError);
        }
        else {
            StringBuilder m = new StringBuilder("Error");
            if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                if (s.left >= 0) {                
                    m.append(" en la línea "+(s.left+1));
                    if (s.right >= 0)
                        m.append(", columna "+(s.right+1));
                }
            }
            m.append(" : " + message);
            detectedError = new ErrorData(errors, info.toString(), m.toString());
        }
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        System.out.println("----------FUI YO------------");
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            s = new Lexer(new FileReader(args[0]));
            Parser p = new Parser(s);
            p.parse();
            System.out.println("\n*** Fin del parseo ***");
            System.out.println("Total de errores = " + errors + ".");
            errors = 0;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor ::= SUBSTRACT LITERAL_ENTERO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer lit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor ::= LITERAL_ENTERO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer lit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  System.out.println("---------------CREADO----------------");
                                RegistroSemantico RS_DO = new RegistroSemantico(lit.toString(),"RS_DO_C",lit.toString());
                                parser.pilaSemantica.push(RS_DO);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RegistroSemantico RS_DO = new RegistroSemantico(i.toString(),"RS_DO_D");
                                if( parser.tablaSimbolos.get(RS_DO.getToken()) ==null){
                                    //CODIGO ERROR
                                }
                                parser.pilaSemantica.push(RS_DO);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operacion_bin_1 ::= MINUSMINUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(p.toString(),"MenosMenos");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operacion_bin_1 ::= PLUSPLUS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"MasMas");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_bin_1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operador ::= SUBSTRACT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(s.toString(),"Resta");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operador ::= ADD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(a.toString(),"Suma");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"Mayor");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comparador ::= MENORQUE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"Menor");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comparador ::= MAYOREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"MayorIgual");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparador ::= MENOREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"MenorIgual");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparador ::= NOTEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"NoIgual");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparador ::= EQUAL 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"Igual");
                               parser.pilaSemantica.push(RS_OP);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // validar_expr ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // validar_expr ::= ASSIGN error 
            {
              Object RESULT =null;
		 parser.report_error(" una expresión o falta ; al final.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // validar_expr ::= ASSIGN expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validar_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // return_stmt ::= RETURN expresion NT$9 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$9 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // while_statement ::= WHILE error NT$8 RPAREN bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$8 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un LPAREN al final de la condición del WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // while_statement ::= WHILE LPAREN error NT$7 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$7 ::= 
            {
              Object RESULT =null;
 parser.report_error(" un RPAREN al final de la condición del WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // while_statement ::= WHILE LPAREN error NT$6 RPAREN bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$6 ::= 
            {
              Object RESULT =null;
 parser.report_error("una condición valida para el WHILE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // while_statement ::= WHILE LPAREN condicion RPAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // else_stmt ::= ELSE 
            {
              Object RESULT =null;
		
                                     parser.assemblyFile += "JMP exit_label \n";
                                     parser.assemblyFile += "else_label: \n";
                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // else_statement ::= else_stmt bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // test_if ::= RPAREN 
            {
              Object RESULT =null;
		
                                    RegistroSemantico RS_DO = parser.pilaSemantica.pop();
                                    System.out.println("TEST_IF: " + RS_DO.getToken());
                                    parser.assemblyFile+= "cmp eax, ebx \n";
                                    parser.assemblyFile+= "JNZ "+ ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_IF")).getExit_label() +  "\n" ;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_if",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicion_stmt ::= condicion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    parser.pilaSemantica.push(new RegistroSemantico(exp.toString(), "RS_DO"));//Crear RS_DO
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // start_if ::= IF 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RegistroSemanticoSTMT RS_IF = new RegistroSemanticoSTMT(tipo.toString(), "RS_IF");//Crear RS_IF
                                    RS_IF.setStmt_label(parser.tablaSimbolos.getLabelName());
                                    RS_IF.setExit_label(parser.tablaSimbolos.getLabelName());
                                    parser.pilaSemantica.push(RS_IF);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("start_if",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_statement ::= start_if LPAREN condicion_stmt test_if bloque else_statement 
            {
              Object RESULT =null;
		 
                                        parser.assemblyFile += "exit_label: \n";
                                        System.out.println("IF: " + parser.assemblyFile);
                                        parser.pilaSemantica.pop();
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // write_f_aux ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // write_f_aux ::= write_f_aux COMMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f_aux",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // write_f ::= WRITE LPAREN error NT$5 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetros incorrectos en el WRITE.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // write_f ::= WRITE LPAREN write_f_aux RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_f",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // read_f ::= READ LPAREN error NT$4 RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetros incorrectos en el READ.", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // read_f ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // read_f ::= READ LPAREN IDENTIFICADOR RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_f",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicion_2 ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion ::= condicion_2 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion ::= condicion_2 OR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= condicion_2 AND condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // call_function ::= write_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // call_function ::= read_f 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // call_function ::= IDENTIFICADOR LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= valor operacion_bin_1 
            {
              Object RESULT =null;
		 RegistroSemantico RS_DO1= parser.pilaSemantica.pop();
                               RegistroSemantico RS_OP= parser.pilaSemantica.pop();
                               IOperacion op = (IOperacion)new OperacionFactory(RS_OP.getTipo()).getOp();
                               op.setOperandor(RS_DO1);
                               op.generarCodigo();
                               //Se crea una variable donde guardar Resultado
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= LPAREN expresion RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= valor comparador expresion 
            {
              Object RESULT =null;
		 RegistroSemantico RS_DO1= parser.pilaSemantica.pop();
                               RegistroSemantico RS_OP= parser.pilaSemantica.pop();
                               RegistroSemantico RS_DO2= parser.pilaSemantica.pop();
                               IOperacion op = (IOperacion)new OperacionFactory(RS_OP.getTipo()).getOp();
                               op.setOperandos(RS_DO1,RS_DO2);
                               op.generarCodigo();
                               //Se crea una variable donde guardar Resultado
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= valor operador expresion 
            {
              Object RESULT =null;
		 RegistroSemantico RS_DO1= parser.pilaSemantica.pop();
                               RegistroSemantico RS_OP= parser.pilaSemantica.pop();
                               RegistroSemantico RS_DO2= parser.pilaSemantica.pop();
                               IOperacion op = (IOperacion)new OperacionFactory(RS_OP.getTipo()).getOp();
                               op.setOperandos(RS_DO1,RS_DO2);
                               op.generarCodigo();
                               //Se crea una variable donde guardar Resultado
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_asignaciones ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_asignaciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion ::= IDENTIFICADOR op_asignaciones exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= call_function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= EXCLAMACION exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= exp 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= return_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_var_interna ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var_interna",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_var_interna ::= variable declaracion_var_interna 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_var_interna",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque ::= error NT$3 decision_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.report_error(" no se encuentra el LBRACE o expresión inválida.","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque ::= LBRACE lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque_global ::= error 
            {
              Object RESULT =null;
		 parser.report_error(" no se encuentra el LBRACE ACA .","");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_global ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_global ::= LBRACE declaracion_var_interna lista_sentencias RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_global",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion ::= LPAREN error NT$2 RPAREN bloque_global 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.report_error(" parámetro incorrecto.",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcion ::= LPAREN RPAREN bloque_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_funcion ::= LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_funcion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decision_operacion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decision_operacion ::= def_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision_operacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // verification_part ::= validar_expr 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("verification_part",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // id_declaration ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        parser.pilaSemantica.push(new RegistroSemantico(id.toString(), "RS_ID"));//Crear RS_Tipo
                                        RESULT = id;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_declaration",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_declaration_part ::= VOID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        parser.pilaSemantica.push(new RegistroSemantico(tipo.toString(), "RS_TIPO"));//Crear RS_Tipo
                                        RESULT = tipo;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_part",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration_part ::= INT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        parser.pilaSemantica.push(new RegistroSemantico(tipo.toString(), "RS_TIPO"));//Crear RS_Tipo
                                        RESULT = tipo;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable ::= declaration_part id_declaration verification_part SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                                    RegistroSemantico RS_DO = parser.pilaSemantica.pop();
                                    String id,valor;
                                    if(RS_DO.getTipo()!="RS_ID"){
                                        RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                        System.out.println("::::::::::"+RS_ID.getToken());
                                        id=RS_ID.getToken();
                                        valor= RS_DO.getValor();
                                    }else{
                                        id=RS_DO.getToken();
                                        valor="0";
                                    }
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    
                                    if(parser.tablaSimbolos.get(id) == null){
                                        parser.tablaSimbolos.put(id, 
                                                                 new InfoKey("Identificador", 
                                                                              RS_TIPO.getToken(), 
                                                                              valor)); 
                                        System.out.println("DATOS TABLA SIMBOLOS");
                                        System.out.println(id);
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(id)).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(id)).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(id)).getCategoria());    
                                    }else{
                                        if(parser.tablaSimbolos.get(id).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(id).sumarDeclarado();
                                            parser.report_error(" identificador '" + id + "' ya ha sido declarado 1.", sleft,sright); 
                                        }
                                    }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // programa_c ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programa_c ::= declaration_part id_declaration decision_operacion NT$1 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                    RegistroSemantico RS_DO = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    if(parser.tablaSimbolos.get(RS_ID.getToken()) == null ){                                    
                                        parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                                 new InfoKey("Función", 
                                                                              RS_TIPO.getToken())); 
                                        System.out.println("DATOS TABLA SIMBOLOS FUNCION INT");
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());
                                    }else{
                                        if(parser.tablaSimbolos.get(RS_ID.getToken()).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(RS_ID.getToken()).sumarDeclarado();
                                            parser.report_error(" identificador '" + RS_ID.getToken() + "' ya ha sido declarado.", sleft,sright); 
                                        }
                                    }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa_c ::= function_declaration_part id_declaration decision_operacion NT$0 programa_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    if(parser.tablaSimbolos.get(RS_ID.getToken()) == null){                                    
                                        parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                                 new InfoKey("Función", 
                                                                              RS_TIPO.getToken())); 
                                        System.out.println("DATOS TABLA SIMBOLOS FUNCION");
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());
                                    }else{
                                        if(parser.tablaSimbolos.get(RS_ID.getToken()).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(RS_ID.getToken()).sumarDeclarado();
                                            parser.report_error(" identificador '" + RS_ID.getToken() + "' ya ha sido declarado.", sleft,sright); 
                                        }
                                    }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa_c ::= variable programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa_c",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa_c 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

