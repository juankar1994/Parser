/* ---------------Seccion de declaraciones preliminares--------------------*/
package parser.data;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.FileReader;
import java.io.*;
import parser.controller.DatosArchivoController;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:

    public static Lexer s;
    public static int errors = 0;
    public static ErrorData errorData = ErrorData.getInstance();
    public DatosArchivoController archivoController = DatosArchivoController.getInstance();
    ErrorData detectedError;
    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public PilaSemantica pilaSemantica = new PilaSemantica();
    String assemblyFile = "";
    
    /* Reporte de error encontrado. */

    public void report_error(String message,int line, int column) {
        StringBuilder m = new StringBuilder("Error");
        m.append(" en la línea "+(line+1));
        m.append(", columna "+(column+1));
        m.append(" : " + message);
        archivoController.mostrarErroresSemanticos(m.toString());
    }
    public void report_error(String message, Object info) {
        if (info instanceof String){
            errors++;
            String mensaje = ", se esperaba: " + message;
            try{
                detectedError.setId(errors);
            }catch(Exception e){
                detectedError = new ErrorData(errors, info.toString(), mensaje);
            }
            detectedError.setMessage(detectedError.getMessage() + mensaje);
            errorData.insertarError(detectedError);
        }
        else {
            StringBuilder m = new StringBuilder("Error");
            if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                if (s.left >= 0) {                
                    m.append(" en la línea "+(s.left+1));
                    if (s.right >= 0)
                        m.append(", columna "+(s.right+1));
                }
            }
            m.append(" : " + message);
            detectedError = new ErrorData(errors, info.toString(), m.toString());
        }
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        System.out.println("----------FUI YO------------");
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            s = new Lexer(new FileReader(args[0]));
            Parser p = new Parser(s);
            p.parse();
            System.out.println("\n*** Fin del parseo ***");
            System.out.println(p.assemblyFile);
            File archivo = p.archivoController.getArchivoFromData();
            String newArchivo = archivo.getName().replace(".c", "");
            PrintWriter writer = new PrintWriter(newArchivo + ".asm", "UTF-8");
            writer.println("section .text\n\tglobal _start\n_start:  ");
            writer.println(p.assemblyFile);

            writer.println("\tmov eax, 1");
            writer.println("\tmov ebx, 0");
            writer.println("\tint 80h");

            //Section .data
            writer.println("\nsection     .data\n");
            ArrayList<String> TS = p.tablaSimbolos.getTempVars();
            for(int i = 0; i < TS.size(); i++){
                writer.println("\t" + TS.get(i) + ":    resb 1");
            }

            
            writer.close();

            System.out.println("Total de errores = " + errors + ".");
            errors = 0;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */

/* OPERADORES */
terminal            ADD, SUBSTRACT, TIMES, DIVISION, MODULUS;
terminal            PLUSPLUS, MINUSMINUS;
terminal            ASSIGN, PLUSEQ, MINUSEQ, TIMESEQ, DIVEQ, MODEQ;

/* SEPARADORES */
terminal            LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON, COLON, COMMA;

/* SENTENCIAS */
terminal            IF, ELSE, WHILE;

/* COMPARADORES */
terminal            EQUAL, MENORQUE,MENOREQ, MAYORQUE, MAYOREQ, EXCLAMACION, NOTEQ, OR, AND;

/* PALABRAS RESERVADAS */
terminal            RETURN, VOID;

/* FUNCIONES */
terminal            READ,WRITE;

/* TIPOS */
terminal            INT;
terminal Integer    LITERAL_ENTERO;
terminal            LITERAL_CARACTER;

/* IDENTIFICADOR */
terminal            IDENTIFICADOR;

/* ERROR*/
terminal            ERROR;

non terminal            inicio, programa_c , def_funcion , funcion;
non terminal            read_f,write_f, write_f_aux;
non terminal            bloque_global, bloque, lista_sentencias, sentencia, expresion;
non terminal            asignacion, exp, op_asignaciones, call_function;
non terminal            if_statement, while_statement, else_statement, return_stmt;
non terminal            condicion, valor;
non terminal            decision_funcion, decision_operacion, validar_expr, declaracion_var_interna;
non terminal            operacion_bin_1, operador, comparador, condicion_2;
non terminal            literal, fin_archivo, declaration_part, function_declaration_part, id_declaration, verification_part;
non terminal            condicion_stmt, test_if, start_if, else_stmt, variable;
non terminal            start_while, test_while, id_fun_declaration;

precedence left OR, AND;
precedence left ADD, SUBSTRACT;
precedence left TIMES, DIVISION, MODULUS;

/* ------------------- Seccion de la gramatica ------------------------ */
    start with inicio;

    inicio              ::= programa_c;

    programa_c          ::=   variable  programa_c 
                            | function_declaration_part id_fun_declaration decision_operacion:s 
                                {:
                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    System.out.println("DATOS DE LA FUNCIÓN-------------------");
                                    System.out.println(RS_ID.getToken());
                                    if(parser.tablaSimbolos.get(RS_ID.getToken()) == null){                                    
                                        parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                                 new InfoKey("Función", 
                                                                              RS_TIPO.getToken())); 
                                        parser.assemblyFile += "\tret\n";
                                        System.out.println("DATOS TABLA SIMBOLOS FUNCION");
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());
                                    }else{
                                        if(parser.tablaSimbolos.get(RS_ID.getToken()).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(RS_ID.getToken()).sumarDeclarado();
                                            parser.report_error(" identificador '" + RS_ID.getToken() + "' ya ha sido declarado.", sleft,sright); 
                                        }
                                    }
                                :} programa_c 
                            | declaration_part id_fun_declaration decision_operacion:s
                                {:
                                    System.out.println("*************************************");
                                    
                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();

                                    System.out.println("DATOS DE LA FUNCIÓN-------------------");
                                    System.out.println(RS_ID.getToken());
                                    if(parser.tablaSimbolos.get(RS_ID.getToken()) == null ){                                    
                                        parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                                 new InfoKey("Función", 
                                                                              RS_TIPO.getToken(),RS_ID.getToken())); 
                                        
                                        System.out.println("DATOS TABLA SIMBOLOS FUNCION INT");
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());
                                    }else{
                                        if(parser.tablaSimbolos.get(RS_ID.getToken()).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(RS_ID.getToken()).sumarDeclarado();
                                            parser.report_error(" identificador '" + RS_ID.getToken() + "' ya ha sido declarado.", sleft,sright); 
                                        }
                                    }
                                :} programa_c 
                            |;

    variable                    ::= declaration_part id_declaration verification_part SEMICOLON:s
                                {:  
                                    System.out.println("*************************************");
                                    RegistroSemantico RS_DO = parser.pilaSemantica.pop();
                                    String id,valor;
                                    if(RS_DO.getTipo()!="RS_ID"){
                                        RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                        System.out.println("::::::::::"+RS_ID.getToken());
                                        id=RS_ID.getToken();
                                        valor= RS_DO.getValor();
                                    }else{
                                        id=RS_DO.getToken();
                                        valor="0";
                                    }
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    
                                    System.out.println("*************************************");
                                    if(parser.tablaSimbolos.get(id) == null){
                                        parser.tablaSimbolos.put(id, 
                                                                 new InfoKey("Identificador", 
                                                                              RS_TIPO.getToken(), 
                                                                              valor));
                                        parser.tablaSimbolos.get(id).setDireccion(valor);
                                        System.out.println("DATOS TABLA SIMBOLOS");
                                        System.out.println(id);
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(id)).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(id)).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(id)).getCategoria());    
                                    }else{
                                        if(parser.tablaSimbolos.get(id).getNumDeclarado() <= 1){
                                            parser.tablaSimbolos.get(id).sumarDeclarado();
                                            parser.report_error(" identificador '" + id + "' ya ha sido declarado 1.", sleft,sright); 
                                        }
                                    }
                                :};

    declaration_part            ::= INT:tipo {:
                                        parser.pilaSemantica.push(new RegistroSemantico(tipo.toString(), "RS_TIPO"));//Crear RS_Tipo
                                    :};
    
    function_declaration_part   ::= VOID:tipo {: 
                                        parser.pilaSemantica.push(new RegistroSemantico(tipo.toString(), "RS_TIPO"));//Crear RS_Tipo
                                    :};

    id_declaration              ::= IDENTIFICADOR:id {: 
                                        parser.pilaSemantica.push(new RegistroSemantico(id.toString(), "RS_ID"));//Crear RS_ID
                                    :};


    id_fun_declaration          ::= IDENTIFICADOR:id {: 
                                        RegistroSemanticoSTMT RS_ID = new RegistroSemanticoSTMT(id.toString(), "RS_ID_F");//Crear RS_ID_F
                                        RS_ID.setStmt_label(parser.tablaSimbolos.getLabelName());
                                        parser.pilaSemantica.push(RS_ID);
                                        parser.assemblyFile += ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_ID_F")).getStmt_label()+": \n";
                                    :};

    verification_part           ::= validar_expr:exp;

    decision_operacion   ::= def_funcion | funcion;

    def_funcion         ::= LPAREN RPAREN SEMICOLON;
    
    funcion             ::= LPAREN RPAREN bloque_global | 
                            LPAREN error {: parser.report_error(" parámetro incorrecto.",""); :} RPAREN bloque_global;
    
    bloque_global       ::= LBRACE lista_sentencias RBRACE 
                            | LBRACE RBRACE
                            | error {: parser.report_error(" no se encuentra el LBRACE ACA .","");  :};
    
    bloque              ::= LBRACE lista_sentencias RBRACE | LBRACE RBRACE | 
                            error {: parser.report_error(" no se encuentra el LBRACE o expresión inválida.","");  :} decision_funcion;


    lista_sentencias    ::= lista_sentencias sentencia | sentencia ;

    sentencia           ::= if_statement | variable |  
                            while_statement | 
                            expresion SEMICOLON{:
                                System.out.println("===========================");
                                parser.pilaSemantica.pop(); 

                            :} | asignacion SEMICOLON | 
                            return_stmt;
 
    expresion           ::=  exp |
                             EXCLAMACION exp 
                             {:
                                RegistroSemanticoVar RS_DO = (RegistroSemanticoVar) parser.pilaSemantica.pop();
                                String var = parser.tablaSimbolos.getVarName();
                                IOperacion op = (IOperacion)new OperacionFactory("Not").getOp();
                                op.setOperandor(RS_DO);
                                op.setVarReturn(var);
                                String code = op.generarCodigo();
                                parser.assemblyFile += code;
                                RegistroSemanticoVar RS_RESULT = new RegistroSemanticoVar(RS_DO.getTipo(),var);
                                parser.pilaSemantica.push(RS_RESULT);

                             :}| call_function:i {:
                                    if( parser.tablaSimbolos.get(i.toString()) ==null){
                                        parser.report_error(" Función '" + i.toString() + "' no ha sido declarada.", ileft,iright); 
                                    }else{
                                        String tipo = parser.tablaSimbolos.get(i.toString()).getTipo();
                                        RegistroSemanticoVar RS_DO = new RegistroSemanticoVar(tipo, "ax");
                                        parser.pilaSemantica.push(RS_DO);
                                        parser.assemblyFile += "\tcall " + i.toString() + "\n";
                                    }   
                             :};
    
    asignacion          ::= IDENTIFICADOR:i op_asignaciones expresion
                            {:
                                if( parser.tablaSimbolos.get(i.toString()) ==null){
                                    parser.report_error(" Variable '" + i.toString() + "' no ha sido declarada.", ileft,iright); 
                                }else{
                                    RegistroSemanticoVar RS_DO = (RegistroSemanticoVar) parser.pilaSemantica.pop();
                                    System.out.println("----********-----------------"+RS_DO.getDireccion()+"------------------");
                                    parser.tablaSimbolos.get(i.toString()).setDireccion(RS_DO.getDireccion());
                                }   
                            :};

    op_asignaciones     ::= ASSIGN ;

    exp                 ::= valor operador expresion 
                            {: RegistroSemantico RS_DO1= parser.pilaSemantica.pop();
                               RegistroSemantico RS_OP= parser.pilaSemantica.pop();
                               RegistroSemantico RS_DO2= parser.pilaSemantica.pop();
                               System.out.println(RS_DO1.getValor());
                               String var = parser.tablaSimbolos.getVarName();
                               IOperacion op = (IOperacion)new OperacionFactory(RS_OP.getTipo()).getOp();
                               op.setOperandos(RS_DO1,RS_DO2);
                               op.setVarReturn(var);
                               String code = op.generarCodigo();
                               parser.assemblyFile += code;
                               RegistroSemanticoVar RS_RESULT = new RegistroSemanticoVar(RS_DO1.getTipo(),var);
                               parser.pilaSemantica.push(RS_RESULT);
                            :}|
                            valor comparador expresion  
                            {: 
                                RegistroSemantico RS_DO1= parser.pilaSemantica.pop();
                                RegistroSemantico RS_OP= parser.pilaSemantica.pop();
                                RegistroSemantico RS_DO2= parser.pilaSemantica.pop();
                                String var = parser.tablaSimbolos.getVarName();
                                IOperacion op = (IOperacion)new OperacionFactory(RS_OP.getTipo()).getOp();
                                op.setOperandos(RS_DO1,RS_DO2);
                                op.setVarReturn(var);
                                String code = op.generarCodigo();
                                parser.assemblyFile += code;
                                RegistroSemanticoVar RS_RESULT = new RegistroSemanticoVar(RS_DO1.getTipo(),var);
                                parser.pilaSemantica.push(RS_RESULT);
                            :}|
                            LPAREN expresion RPAREN  |
                            LPAREN expresion RPAREN operador expresion |
                            LPAREN expresion RPAREN comparador expresion |
                            valor operacion_bin_1  
                            {: 
                               RegistroSemantico RS_OP= parser.pilaSemantica.pop();
                               RegistroSemantico RS_DO1= parser.pilaSemantica.pop();
                               String var = parser.tablaSimbolos.getVarName();
                               IOperacion op = (IOperacion)new OperacionFactory(RS_OP.getTipo()).getOp();
                               op.setOperandor(RS_DO1);
                               op.setVarReturn(var);
                               String code = op.generarCodigo();
                               parser.assemblyFile += code;
                               RegistroSemanticoVar RS_RESULT = new RegistroSemanticoVar(RS_DO1.getTipo(),var);
                               parser.pilaSemantica.push(RS_RESULT);
                               parser.tablaSimbolos.get(RS_DO1.getToken()).setDireccion(var);
                            :}|
                            valor;

                            

    call_function       ::= IDENTIFICADOR:i LPAREN RPAREN {: RESULT = i; :} | read_f | write_f ;
            
    condicion           ::= condicion_2 AND condicion |
                            condicion_2 OR condicion | 
                            condicion_2;

    condicion_2         ::= expresion;

    read_f              ::= READ LPAREN IDENTIFICADOR RPAREN | READ LPAREN RPAREN | 
                            READ LPAREN error{: parser.report_error(" parámetros incorrectos en el READ.", ""); :} RPAREN;

    write_f             ::= WRITE LPAREN write_f_aux RPAREN |
                            WRITE LPAREN error{: parser.report_error(" parámetros incorrectos en el WRITE.", ""); :} RPAREN;

    write_f_aux         ::= write_f_aux COMMA expresion | expresion; 
        
    if_statement        ::= start_if LPAREN condicion_stmt test_if bloque else_statement 
                                    {: 
                                        parser.assemblyFile += ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_IF")).getExit_label()+": \n";
                                        RegistroSemantico a = parser.pilaSemantica.pop();
                                        System.out.println("**************" + a.getToken());
                                    :}
                            |start_if LPAREN 
                                error {: parser.report_error(" una condición válida para el IF.", ""); :} 
                            RPAREN bloque else_statement |
                            start_if LPAREN
                                    error {: parser.report_error(" un RPAREN al final de la condición del IF.", ""); :} 
                            bloque| 
                            start_if  
                                error {: parser.report_error(" un LPAREN al final de la condición del IF.", ""); :} 
                            RPAREN bloque else_statement;

    start_if            ::= IF:tipo {:
                                    RegistroSemanticoSTMT RS_IF = new RegistroSemanticoSTMT(tipo.toString(), "RS_IF");//Crear RS_IF
                                    RS_IF.setStmt_label(parser.tablaSimbolos.getLabelName());
                                    RS_IF.setExit_label(parser.tablaSimbolos.getLabelName());
                                    parser.pilaSemantica.push(RS_IF);
                                :};

    condicion_stmt      ::= condicion;

    test_if             ::= RPAREN {:
                                    RegistroSemanticoVar RS_DO = (RegistroSemanticoVar)parser.pilaSemantica.pop();
                                    parser.assemblyFile+= "\tmov eax,"+RS_DO.getDireccion()+" \n"; 
                                    parser.assemblyFile+= "\tcmp eax, 0 \n"; 
                                    parser.assemblyFile+= "\tJNZ "+ ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_IF")).getStmt_label() +  "\n" ;
                                :};

    else_statement      ::= else_stmt bloque |;

    else_stmt           ::= ELSE {:
                                     parser.assemblyFile += "\tJMP "+((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_IF")).getExit_label()+" \n";
                                     parser.assemblyFile += ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_IF")).getStmt_label()+": \n";
                                 :};

    while_statement     ::= start_while LPAREN condicion_stmt test_while bloque {:
                                parser.assemblyFile += "\tJMP "+((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_WHILE")).getStmt_label()+" \n";
                                parser.assemblyFile += ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_WHILE")).getExit_label()+": \n";
                                parser.pilaSemantica.pop();
                            :}
                            | start_while LPAREN
                                error {: parser.report_error("una condición valida para el WHILE.", ""); :} 
                            RPAREN bloque|
                            start_while LPAREN
                                error {: parser.report_error(" un RPAREN al final de la condición del WHILE.", ""); :} 
                            bloque
                            | start_while 
                                error {: parser.report_error(" un LPAREN al final de la condición del WHILE.", ""); :} 
                            RPAREN bloque;

    start_while         ::= WHILE:w {:
                                RegistroSemanticoSTMT RS_WHILE = new RegistroSemanticoSTMT(w.toString(), "RS_WHILE");//Crear RS_WHILE
                                RS_WHILE.setStmt_label(parser.tablaSimbolos.getLabelName());
                                RS_WHILE.setExit_label(parser.tablaSimbolos.getLabelName());
                                parser.pilaSemantica.push(RS_WHILE);    
                                parser.assemblyFile += ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_WHILE")).getStmt_label()+": \n";
                                
                            :};

    test_while          ::= RPAREN {:
                                RegistroSemanticoVar RS_DO = (RegistroSemanticoVar)parser.pilaSemantica.pop();
                                parser.assemblyFile+= "\tmov eax,"+RS_DO.getDireccion()+" \n"; 
                                parser.assemblyFile+= "\tcmp eax, 0 \n"; 
                                parser.assemblyFile+= "\tJNZ "+ ((RegistroSemanticoSTMT)parser.pilaSemantica.searchRS("RS_WHILE")).getExit_label() +  "\n" ;
                            :};
    
    return_stmt         ::= RETURN expresion SEMICOLON {:
                                RegistroSemanticoVar RS_DO = (RegistroSemanticoVar) parser.pilaSemantica.pop();
                                parser.assemblyFile += "\tmov ax, " + RS_DO.getDireccion() + "\n";
                                parser.assemblyFile += "\tret\n"; 
                        :};

    validar_expr        ::= ASSIGN expresion:exp {: RESULT = exp; :}
                            | ASSIGN error {: parser.report_error(" una expresión o falta ; al final.",""); :}
                            | {: RESULT = ""; :};

    comparador          ::= EQUAL:op 
                            {: RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"Igual");
                               parser.pilaSemantica.push(RS_OP);
                            :}| NOTEQ:op 
                            {: RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"NoIgual");
                               parser.pilaSemantica.push(RS_OP);
                            :}| MENOREQ:op 
                            {: RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"MenorIgual");
                               parser.pilaSemantica.push(RS_OP);
                            :}| MAYOREQ:op 
                            {: RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"MayorIgual");
                               parser.pilaSemantica.push(RS_OP);
                            :}| MENORQUE:op 
                            {: RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"Menor");
                               parser.pilaSemantica.push(RS_OP);
                            :}| MAYORQUE:op 
                            {: RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"Mayor");
                               parser.pilaSemantica.push(RS_OP);
                            :};

    operador            ::= ADD:a 
                            {: RegistroSemantico RS_OP = new RegistroSemantico(a.toString(),"Suma");
                               parser.pilaSemantica.push(RS_OP);
                            :}| 
                            SUBSTRACT:s  
                            {: RegistroSemantico RS_OP = new RegistroSemantico(s.toString(),"Resta");
                               parser.pilaSemantica.push(RS_OP);
                            :};

    operacion_bin_1     ::= PLUSPLUS:op 
                            {: RegistroSemantico RS_OP = new RegistroSemantico(op.toString(),"MasMas");
                               parser.pilaSemantica.push(RS_OP);
                            :}| MINUSMINUS:p 
                            {: RegistroSemantico RS_OP = new RegistroSemantico(p.toString(),"MenosMenos");
                               parser.pilaSemantica.push(RS_OP);
                            :};

    valor               ::= IDENTIFICADOR:i 
                            {:  RegistroSemanticoVar RS_DO = new RegistroSemanticoVar("RS_DO_D",i.toString());
                                System.out.println("---------------CREADO-"+i.toString()+"---------------");
                                if( parser.tablaSimbolos.get(RS_DO.getToken()) ==null){
                                    parser.report_error(" Variable '" + RS_DO.getToken() + "' no ha sido declarado.", ileft,iright); 
                                }
                                RS_DO.setValor(parser.tablaSimbolos.get(RS_DO.getToken()).getDireccion());
                                RS_DO.setDireccion(parser.tablaSimbolos.get(RS_DO.getToken()).getDireccion());
                                parser.pilaSemantica.push(RS_DO);
                            :} 
                            | LITERAL_ENTERO:lit 
                            {:  System.out.println("---------------CREADO-LIT---------------");
                                RegistroSemanticoVar RS_DO = new RegistroSemanticoVar("RS_DO_C",lit.toString());
                                parser.pilaSemantica.push(RS_DO);
                            :} 
                            | SUBSTRACT LITERAL_ENTERO:lit {: RESULT = lit; :};
