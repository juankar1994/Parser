/* ---------------Seccion de declaraciones preliminares--------------------*/
package parser.data;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
import java.util.Hashtable;
import java.util.Stack;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:

    public static Lexer s;
    public static int errors = 0;
    public static ErrorData errorData = ErrorData.getInstance();
    ErrorData detectedError;
    public Hashtable<String, InfoKey> tablaSimbolos = new Hashtable<String, InfoKey>();
    public Stack<RegistroSemantico> pilaSemantica = new Stack<>();
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        if (info instanceof String){
            errors++;
            /*try {
                restart_lookahead();
            } catch (Exception ex) {
                Logger.getLogger(Parser.class.getName()).log(Level.SEVERE, null, ex);
            }*/
            String mensaje = ", se esperaba: " + message;
            try{
                detectedError.setId(errors);
            }catch(Exception e){
                detectedError = new ErrorData(errors, info.toString(), mensaje);
            }
            detectedError.setMessage(detectedError.getMessage() + mensaje);
            errorData.insertarError(detectedError);
        }
        else {
            StringBuilder m = new StringBuilder("Error");
            if (info instanceof java_cup.runtime.Symbol) {
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                if (s.left >= 0) {                
                    m.append(" en la línea "+(s.left+1));
                    if (s.right >= 0)
                        m.append(", columna "+(s.right+1));
                }
            }
            m.append(" : " + message);
            detectedError = new ErrorData(errors, info.toString(), m.toString());
        }
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        System.out.println("----------FUI YO------------");
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            s = new Lexer(new FileReader(args[0]));
            Parser p = new Parser(s);
            p.parse();
            System.out.println("\n*** Fin del parseo ***");
            System.out.println("Total de errores = " + errors + ".");
            errors = 0;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */

/* OPERADORES */
terminal            ADD, SUBSTRACT, TIMES, DIVISION, MODULUS;
terminal            PLUSPLUS, MINUSMINUS;
terminal            ASSIGN, PLUSEQ, MINUSEQ, TIMESEQ, DIVEQ, MODEQ;

/* SEPARADORES */
terminal            LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON, COLON, COMMA;

/* SENTENCIAS */
terminal            IF, ELSE, WHILE;

/* COMPARADORES */
terminal            EQUAL, MENORQUE,MENOREQ, MAYORQUE, MAYOREQ, EXCLAMACION, NOTEQ, OR, AND;

/* PALABRAS RESERVADAS */
terminal            RETURN, VOID;

/* FUNCIONES */
terminal            READ,WRITE;

/* TIPOS */
terminal            INT;
terminal Integer    LITERAL_ENTERO;
terminal            LITERAL_CARACTER;

/* IDENTIFICADOR */
terminal            IDENTIFICADOR;

/* ERROR*/
terminal            ERROR;

non terminal            inicio, programa_c , def_funcion , funcion;
non terminal            read_f,write_f, write_f_aux;
non terminal            bloque_global, bloque, lista_sentencias, sentencia, expresion;
non terminal            asignacion, exp, op_asignaciones, call_function;
non terminal            if_statement, while_statement, else_statement, return_stmt;
non terminal            condicion, valor;
non terminal            decision_funcion, decision_operacion, validar_expr, declaracion_var_interna;
non terminal            operacion_bin_1, operacion_bin_2, operador, comparador, condicion_2;
non terminal            literal, fin_archivo, declaration_part, function_declaration_part, id_declaration, verification_part;

precedence left OR, AND;
precedence left ADD, SUBSTRACT;
precedence left TIMES, DIVISION, MODULUS;

/* ------------------- Seccion de la gramatica ------------------------ */
    start with inicio;

    inicio              ::= programa_c;

    programa_c          ::=   declaration_part id_declaration verification_part SEMICOLON 
                                {:
                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    if(parser.tablaSimbolos.get(RS_ID.getToken()) == null){
                                        parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                                 new InfoKey("Identificador", 
                                                                              RS_TIPO.getToken(), 
                                                                              RS_ID.getValor())); 
                                        System.out.println("DATOS TABLA SIMBOLOS");
                                        System.out.println(RS_ID.getToken());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                        System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());    
                                    }else
                                        System.out.println("ERROR SEMÁNTICO - VARIABLE YA DECLARADA");
                                :}  programa_c 
                            | function_declaration_part id_declaration decision_operacion 
                                {:
                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                             new InfoKey("Función", 
                                                                          RS_TIPO.getToken())); 
                                    System.out.println("DATOS TABLA SIMBOLOS");
                                    System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                    System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                    System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());
                                :} programa_c 
                            | declaration_part id_declaration decision_operacion 
                                {:
                                    RegistroSemantico RS_ID = parser.pilaSemantica.pop();
                                    RegistroSemantico RS_TIPO = parser.pilaSemantica.pop();
                                    parser.tablaSimbolos.put(RS_ID.getToken(), 
                                                             new InfoKey("Función", 
                                                                          RS_TIPO.getToken())); 
                                    System.out.println("DATOS TABLA SIMBOLOS");
                                    System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getValor());
                                    System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getTipo());
                                    System.out.println(((InfoKey) parser.tablaSimbolos.get(RS_ID.getToken())).getCategoria());
                                :} programa_c 
                            |;

    declaration_part            ::= INT:tipo {: 
                                        parser.pilaSemantica.push(new RegistroSemantico(tipo.toString(), "RS_TIPO"));//Crear RS_Tipo
                                        RESULT = tipo;
                                    :};
    
    function_declaration_part   ::= VOID:tipo {: 
                                        parser.pilaSemantica.push(new RegistroSemantico(tipo.toString(), "RS_TIPO"));//Crear RS_Tipo
                                        RESULT = tipo;
                                    :};

    id_declaration              ::= IDENTIFICADOR:id {: 
                                        parser.pilaSemantica.push(new RegistroSemantico(id.toString(), "RS_ID"));//Crear RS_Tipo
                                        RESULT = id;
                                    :};

    verification_part           ::= validar_expr:exp {: 
                                        RegistroSemantico tmp = parser.pilaSemantica.pop();
                                        tmp.setValor(exp.toString());
                                        parser.pilaSemantica.push(tmp);//Volver a insertar valor modificado
                                        RESULT = exp;
                                    :};

    decision_operacion   ::= def_funcion | funcion;

    def_funcion         ::= LPAREN RPAREN SEMICOLON;
    
    funcion             ::= LPAREN RPAREN bloque_global | 
                            LPAREN error {: parser.report_error(" parámetro incorrecto.",""); :} RPAREN bloque_global;
    
    bloque_global       ::= LBRACE declaracion_var_interna lista_sentencias RBRACE 
                            | LBRACE RBRACE
                            | error {: parser.report_error(" no se encuentra el LBRACE .","");  :};
    
    bloque              ::= LBRACE lista_sentencias RBRACE | LBRACE RBRACE | 
                            error {: parser.report_error(" no se encuentra el LBRACE o expresión inválida.","");  :} decision_funcion;

    declaracion_var_interna     ::= INT IDENTIFICADOR validar_expr SEMICOLON  | ;

    lista_sentencias    ::= lista_sentencias sentencia | sentencia;

    sentencia           ::= if_statement |  
                            while_statement | 
                            expresion SEMICOLON | 
                            return_stmt;
 
    expresion           ::=  exp:exp1 {: RESULT = exp1; :} | EXCLAMACION exp | call_function | asignacion;
    
    asignacion          ::= IDENTIFICADOR op_asignaciones exp;

    op_asignaciones     ::= ASSIGN | operacion_bin_2;

    exp                 ::= valor operador expresion |valor comparador expresion | LPAREN expresion RPAREN
                            | valor:val {: RESULT = val; :};

    call_function       ::= IDENTIFICADOR LPAREN RPAREN | read_f | write_f ;
            
    condicion           ::= condicion_2 AND condicion | condicion_2 OR condicion | condicion_2;

    condicion_2         ::= expresion;

    read_f              ::= READ LPAREN IDENTIFICADOR RPAREN | READ LPAREN RPAREN | 
                            READ LPAREN error{: parser.report_error(" parámetros incorrectos en el READ.", ""); :} RPAREN;

    write_f             ::= WRITE LPAREN write_f_aux RPAREN |
                            WRITE LPAREN error{: parser.report_error(" parámetros incorrectos en el WRITE.", ""); :} RPAREN;

    write_f_aux         ::= write_f_aux COMMA expresion | expresion; 
        
    if_statement        ::= IF LPAREN condicion RPAREN bloque else_statement |
                            IF LPAREN 
                                error {: parser.report_error(" una condición válida para el IF.", ""); :} 
                            RPAREN bloque else_statement |
                            IF LPAREN
                                    error {: parser.report_error(" un RPAREN al final de la condición del IF.", ""); :} 
                            bloque| 
                            IF  
                                error {: parser.report_error(" un LPAREN al final de la condición del IF.", ""); :} 
                            RPAREN bloque else_statement;

    else_statement      ::= ELSE bloque |;

    while_statement     ::= WHILE LPAREN condicion RPAREN bloque|
                            WHILE LPAREN
                                error {: parser.report_error("una condición valida para el WHILE.", ""); :} 
                            RPAREN bloque|
                            WHILE LPAREN
                                error {: parser.report_error(" un RPAREN al final de la condición del WHILE.", ""); :} 
                            bloque
                            | WHILE 
                                error {: parser.report_error(" un LPAREN al final de la condición del WHILE.", ""); :} 
                            RPAREN bloque;
    
    return_stmt         ::= RETURN expresion:e1 {: RESULT = e1; :} SEMICOLON;

    validar_expr        ::= ASSIGN expresion:exp {: RESULT = exp; :}
                            | ASSIGN error {: parser.report_error(" una expresión o falta ; al final.",""); :}
                            | {: RESULT = ""; :};

    comparador          ::= EQUAL | NOTEQ  | MENOREQ | MAYOREQ | MENORQUE | MAYORQUE;

    operador            ::= ADD | SUBSTRACT | TIMES | DIVISION | MODULUS;

    operacion_bin_1     ::= PLUSPLUS | MINUSMINUS;

    operacion_bin_2     ::= MINUSEQ | TIMESEQ | PLUSEQ | DIVEQ | MODEQ;

    valor               ::= IDENTIFICADOR | LITERAL_ENTERO:lit {: RESULT = lit; :} | SUBSTRACT LITERAL_ENTERO:lit {: RESULT = lit; :};