 
   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package parser.data;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : " + message);
        System.out.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            Parser asin = new Parser(
                    new Lexer( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */

/* OPERADORES */
terminal            ADD, SUBSTRACT, TIMES, DIVISION;

/* SEPARADORES */
terminal            LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, SEMICOLON, COMMA, DOT;

/* SENTENCIAS */
terminal            IF, ELSE, WHILE, DO, FOR, SWITCH;

/* COMPARADORES */
terminal            EQUAL, MENORQUE, MAYORQUE, EXCLAMACION;

/* TIPOS */
terminal            RETURN_TYPE;

/* IDENTIFICADOR */
terminal            IDENTIFICADOR;

terminal Integer    LITERAL_ENTERO;

non terminal            programa , def_funcion , funcion , lista_parametros , parametro;
non terminal            bloque_global, bloque, lista_sentencias, sentencia;
non terminal            if_statement, while_statement, dowhile_statement, for_statement, switch_stmt, else_statement;
non terminal            condicion, valor;
   
/* ------------------- Seccion de la gramatica ------------------------ */
   
    programa            ::= programa def_funcion | programa funcion |;

    def_funcion         ::= RETURN_TYPE IDENTIFICADOR LPAREN lista_parametros RPAREN SEMICOLON;
    
    funcion             ::= RETURN_TYPE IDENTIFICADOR LPAREN lista_parametros RPAREN bloque;

    lista_parametros    ::= lista_parametros COMMA parametro | parametro |;

    parametro           ::= RETURN_TYPE IDENTIFICADOR;

    bloque_global       ::= bloque;

    bloque              ::= LBRACE lista_sentencias RBRACE | LBRACE RBRACE ;

    lista_sentencias    ::= lista_sentencias sentencia | sentencia;

    sentencia           ::= if_statement |  while_statement | dowhile_statement;

/*
    sentencia           ::= if_statement | while_statement | dowhile_statement | 
                            for_statement | switch_stmt;
*/
    if_statement        ::= IF condicion bloque_global else_statement 
                            |
                            IF condicion bloque_global;

    /*PONER TODOS LOS LITERALES*/
    valor               ::= IDENTIFICADOR | LITERAL_ENTERO;
                                    
    condicion           ::= LPAREN valor EQUAL EQUAL valor RPAREN
                            |   
                            LPAREN valor MENORQUE valor RPAREN
                            |   
                            LPAREN valor MAYORQUE valor RPAREN
                            |   
                            LPAREN valor MAYORQUE EQUAL valor RPAREN
                            |   
                            LPAREN valor MENORQUE EQUAL valor RPAREN
                            |   
                            LPAREN valor EXCLAMACION EQUAL valor RPAREN
                            |
                            LPAREN valor RPAREN
                            |
                            LPAREN error RPAREN {: System.out.println("No se reconoce la condición ingresada.");:};

    else_statement      ::= ELSE bloque_global;

    while_statement     ::= WHILE condicion bloque_global;

    dowhile_statement   ::= DO bloque_global WHILE LPAREN condicion RPAREN SEMICOLON;

    